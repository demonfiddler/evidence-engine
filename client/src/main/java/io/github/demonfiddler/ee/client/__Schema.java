/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import io.github.demonfiddler.ee.client.util.CustomJacksonDeserializers;

/**
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("__Schema")
@JsonInclude(Include.NON_NULL)
public class __Schema extends AbstractGraphQLEntity {

	public __Schema() {
	}

	@JsonProperty("description")
	@GraphQLScalar(fieldName = "description", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String description;

	@JsonProperty("types")
	@JsonDeserialize(using = CustomJacksonDeserializers.List__Type.class)
	@GraphQLNonScalar(fieldName = "types", graphQLTypeSimpleName = "__Type", javaClass = __Type.class, listDepth = 1)
	List<__Type> types;

	@JsonProperty("queryType")
	@GraphQLNonScalar(fieldName = "queryType", graphQLTypeSimpleName = "__Type", javaClass = __Type.class,
		listDepth = 0)
	__Type queryType;

	@JsonProperty("mutationType")
	@GraphQLNonScalar(fieldName = "mutationType", graphQLTypeSimpleName = "__Type", javaClass = __Type.class,
		listDepth = 0)
	__Type mutationType;

	@JsonProperty("subscriptionType")
	@GraphQLNonScalar(fieldName = "subscriptionType", graphQLTypeSimpleName = "__Type", javaClass = __Type.class,
		listDepth = 0)
	__Type subscriptionType;

	@JsonProperty("directives")
	@JsonDeserialize(using = CustomJacksonDeserializers.List__Directive.class)
	@GraphQLNonScalar(fieldName = "directives", graphQLTypeSimpleName = "__Directive", javaClass = __Directive.class,
		listDepth = 1)
	List<__Directive> directives;

	@JsonProperty("description")
	public void setDescription(String description) {
		this.description = description;
	}

	@JsonProperty("description")
	public String getDescription() {
		return this.description;
	}

	@JsonProperty("types")
	public void setTypes(List<__Type> types) {
		this.types = types;
	}

	@JsonProperty("types")
	public List<__Type> getTypes() {
		return this.types;
	}

	@JsonProperty("queryType")
	public void setQueryType(__Type queryType) {
		this.queryType = queryType;
	}

	@JsonProperty("queryType")
	public __Type getQueryType() {
		return this.queryType;
	}

	@JsonProperty("mutationType")
	public void setMutationType(__Type mutationType) {
		this.mutationType = mutationType;
	}

	@JsonProperty("mutationType")
	public __Type getMutationType() {
		return this.mutationType;
	}

	@JsonProperty("subscriptionType")
	public void setSubscriptionType(__Type subscriptionType) {
		this.subscriptionType = subscriptionType;
	}

	@JsonProperty("subscriptionType")
	public __Type getSubscriptionType() {
		return this.subscriptionType;
	}

	@JsonProperty("directives")
	public void setDirectives(List<__Directive> directives) {
		this.directives = directives;
	}

	@JsonProperty("directives")
	public List<__Directive> getDirectives() {
		return this.directives;
	}

	public String toString() {
		return "__Schema {" //
			+ "description: " + this.description //
			+ ", " //
			+ "types: " + this.types //
			+ ", " //
			+ "queryType: " + this.queryType //
			+ ", " //
			+ "mutationType: " + this.mutationType //
			+ ", " //
			+ "subscriptionType: " + this.subscriptionType //
			+ ", " //
			+ "directives: " + this.directives //
			+ ", " //
			+ "__typename: " + this.__typename //
			+ "}";
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractGraphQLEntity.Builder<Builder, __Schema> {

		private String description;
		private List<__Type> types;
		private __Type queryType;
		private __Type mutationType;
		private __Type subscriptionType;
		private List<__Directive> directives;

		public Builder withDescription(String descriptionParam) {
			this.description = descriptionParam;
			return this;
		}

		public Builder withTypes(List<__Type> typesParam) {
			this.types = typesParam;
			return this;
		}

		public Builder withQueryType(__Type queryTypeParam) {
			this.queryType = queryTypeParam;
			return this;
		}

		public Builder withMutationType(__Type mutationTypeParam) {
			this.mutationType = mutationTypeParam;
			return this;
		}

		public Builder withSubscriptionType(__Type subscriptionTypeParam) {
			this.subscriptionType = subscriptionTypeParam;
			return this;
		}

		public Builder withDirectives(List<__Directive> directivesParam) {
			this.directives = directivesParam;
			return this;
		}

		public __Schema build() {
			__Schema _object = build(new __Schema());
			_object.setDescription(this.description);
			_object.setTypes(this.types);
			_object.setQueryType(this.queryType);
			_object.setMutationType(this.mutationType);
			_object.setSubscriptionType(this.subscriptionType);
			_object.setDirectives(this.directives);
			return _object;
		}

		@Override
		String getTypeName() {
			return "__Schema";
		}

	}

}
