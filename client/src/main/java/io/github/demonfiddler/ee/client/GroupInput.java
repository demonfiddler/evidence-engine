/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * Input for creating or updating a group of users of the system.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("GroupInput")
@JsonInclude(Include.NON_NULL)
public class GroupInput extends AbstractBaseEntityInput {

	public GroupInput() {
	}

	// Uncommented, as InputParameter.getStringContentForAnInputTypeValue() doesn't check superclass fields.
	/**
	 * The immutable, unique group identifier (system-assigned).
	 */
	@JsonProperty("id")
	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long id;

	/**
	 * The (mutable?) unique group name (user-assigned).
	 */
	@JsonProperty("groupname")
	@GraphQLScalar(fieldName = "groupname", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String groupname;

	/**
	 * The authorities to grant to the group.
	 */
	@JsonProperty("authorities")
	@GraphQLScalar( fieldName = "authorities", graphQLTypeSimpleName = "AuthorityKind", javaClass = AuthorityKind.class,
		listDepth = 1)
	List<AuthorityKind> authorities;

	// Uncommented, as InputParameter.getStringContentForAnInputTypeValue() doesn't check superclass fields.
	/**
	 * The immutable, unique group identifier (system-assigned).
	 */
	@Override
	@JsonProperty("id")
	public void setId(Long id) {
		this.id = id;
	}

	// Uncommented, as InputParameter.getStringContentForAnInputTypeValue() doesn't check superclass fields.
	/**
	 * The immutable, unique group identifier (system-assigned).
	 */
	@Override
	@JsonProperty("id")
	public Long getId() {
		return this.id;
	}

	/**
	 * The (mutable?) unique group name (user-assigned).
	 */
	@JsonProperty("groupname")
	public void setGroupname(String groupname) {
		this.groupname = groupname;
	}

	/**
	 * The (mutable?) unique group name (user-assigned).
	 */
	@JsonProperty("groupname")
	public String getGroupname() {
		return this.groupname;
	}

	/**
     * The authorities to grant to the user.
 	 */
	@JsonProperty("authorities")
	public void setAuthorities(List<AuthorityKind> authorities) {
		this.authorities = authorities;
	}

	/**
	 * The authorities to grant to the user.
	 */
	@JsonProperty("authorities")
	public List<AuthorityKind> getAuthorities() {
		return this.authorities;
	}

	public String toString() {
		return "GroupInput {" //
			+ "id: " + this.id //
			+ ", " //
			+ "groupname: " + this.groupname //
			+ ", " //
			+ "authorities: " + this.authorities //
			+ "}";
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractBaseEntityInput.Builder<Builder, GroupInput> {

		private String groupname;
		private List<AuthorityKind> authorities;

		/**
		 * The (mutable?) unique group name (user-assigned).
		 */
		public Builder withGroupname(String groupnameParam) {
			this.groupname = groupnameParam;
			return this;
		}

		/**
		 * The authorities to grant to the group.
		 */
		public Builder withAuthorities(List<AuthorityKind> authoritiesParam) {
			this.authorities = authoritiesParam;
			return this;
		}

		@Override
		public GroupInput build() {
			GroupInput _object = build(new GroupInput());
			_object.setGroupname(this.groupname);
			_object.setAuthorities(this.authorities);
			return _object;
		}

	}

}
