/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * An association between two entity records.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("EntityLink")
@JsonInclude(Include.NON_NULL)
public class EntityLink extends AbstractTrackedEntity {

	/**
	 * The 'linked-from' entity.
	 */
	@JsonProperty("fromEntity")
	@GraphQLNonScalar(fieldName = "fromEntity", graphQLTypeSimpleName = "ILinkableEntity",
		javaClass = ILinkableEntity.class, listDepth = 0)
	ILinkableEntity fromEntity;

	/**
	 * The locations within the 'linked-from' record, one per line.
	 */
	@JsonProperty("fromEntityLocations")
	@GraphQLScalar(fieldName = "fromEntityLocations", graphQLTypeSimpleName = "String", javaClass = String.class,
		listDepth = 0)
	String fromEntityLocations;

	/**
	 * The 'linked-to' entity.
	 */
	@JsonProperty("toEntity")
	@GraphQLNonScalar(fieldName = "toEntity", graphQLTypeSimpleName = "ILinkableEntity",
		javaClass = ILinkableEntity.class, listDepth = 0)
	ILinkableEntity toEntity;

	/**
	 * The locations within the 'linked-to' record, one per line.
	 */
	@JsonProperty("toEntityLocations")
	@GraphQLScalar(fieldName = "toEntityLocations", graphQLTypeSimpleName = "String", javaClass = String.class,
		listDepth = 0)
	String toEntityLocations;

	/**
	 * The 'linked-from' entity.
	 */
	@JsonProperty("fromEntity")
	public void setFromEntity(ILinkableEntity fromEntity) {
		this.fromEntity = fromEntity;
	}

	/**
	 * The 'linked-from' entity.
	 */
	@JsonProperty("fromEntity")
	public ILinkableEntity getFromEntity() {
		return this.fromEntity;
	}

	/**
	 * The locations within the 'linked-from' record, one per line.
	 */
	@JsonProperty("fromEntityLocations")
	public void setFromEntityLocations(String fromEntityLocations) {
		this.fromEntityLocations = fromEntityLocations;
	}

	/**
	 * The locations within the 'linked-from' record, one per line.
	 */
	@JsonProperty("fromEntityLocations")
	public String getFromEntityLocations() {
		return this.fromEntityLocations;
	}

	/**
	 * The 'linked-to' entity.
	 */
	@JsonProperty("toEntity")
	public void setToEntity(ILinkableEntity toEntity) {
		this.toEntity = toEntity;
	}

	/**
	 * The 'linked-to' entity.
	 */
	@JsonProperty("toEntity")
	public ILinkableEntity getToEntity() {
		return this.toEntity;
	}

	/**
	 * The locations within the 'linked-to' record, one per line.
	 */
	@JsonProperty("toEntityLocations")
	public void setToEntityLocations(String toEntityLocations) {
		this.toEntityLocations = toEntityLocations;
	}

	/**
	 * The locations within the 'linked-to' record, one per line.
	 */
	@JsonProperty("toEntityLocations")
	public String getToEntityLocations() {
		return this.toEntityLocations;
	}

	public String toString() {
		return "EntityLink {" //
			+ "id: " + this.id //
			+ ", " //
			+ "entityKind: " + this.entityKind //
			+ ", " //
			+ "status: " + this.status //
			+ ", " //
			+ "rating: " + this.rating //
			+ ", " //
			+ "created: " + this.created //
			+ ", " //
			+ "createdByUser.id: " + (this.createdByUser == null ? null : this.createdByUser.getId()) //
			+ ", " //
			+ "updated: " + this.updated //
			+ ", " //
			+ "updatedByUser.id: " + (this.updatedByUser == null ? null : this.updatedByUser.getId()) //
			+ ", " //
			+ "log: " + this.log //
			+ ", " //
			+ "comments: " + this.comments //
			+ ", " //
			+ "fromEntity.id: " + (this.fromEntity == null ? null : this.fromEntity.getId()) //
			+ ", " //
			+ "fromEntityLocations: " + this.fromEntityLocations //
			+ ", " //
			+ "toEntity.id: " + (this.toEntity == null ? null : this.toEntity.getId()) //
			+ ", " //
			+ "toEntityLocations: " + this.toEntityLocations //
			+ ", " //
			+ "__typename: " + this.__typename //
			+ "}";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((log == null) ? 0 : log.hashCode());
		result =
			prime * result + ((fromEntity == null || fromEntity.getId() == null) ? 0 : fromEntity.getId().hashCode());
		result = prime * result + ((fromEntityLocations == null) ? 0 : fromEntityLocations.hashCode());
		result = prime * result + ((toEntity == null || toEntity.getId() == null) ? 0 : toEntity.getId().hashCode());
		result = prime * result + ((toEntityLocations == null) ? 0 : toEntityLocations.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (!super.equals(obj))
			return false;
		EntityLink other = (EntityLink)obj;
		// N.B. ILinkableEntity::fromEntityLinks and ILinkableEntity::toEntityLinks are of type EntityLink.
		// Therefore, to avoid stack overflow do not recurse into fromEntity but compare fromEntity IDs instead.
		if (fromEntity == null) {
			if (other.fromEntity != null)
				return false;
		} else {
			if (other.fromEntity == null)
				return false;
			Long fromEntityId = fromEntity.getId();
			Long otherFromEntityId = other.fromEntity.getId();
			if (fromEntityId == null) {
				if (otherFromEntityId != null)
					return false;
			} else if (!fromEntityId.equals(otherFromEntityId))
				return false;
		}
		if (fromEntityLocations == null) {
			if (other.fromEntityLocations != null)
				return false;
		} else if (!fromEntityLocations.equals(other.fromEntityLocations))
			return false;
		// N.B. ILinkableEntity::fromEntityLinks and ILinkableEntity::toEntityLinks are of type EntityLink.
		// Therefore, to avoid stack overflow do not recurse into toEntity but compare toEntity IDs instead.
		if (toEntity == null) {
			if (other.toEntity != null)
				return false;
		} else {
			if (other.toEntity == null)
				return false;
			Long toEntityId = toEntity.getId();
			Long otherFromEntityId = other.toEntity.getId();
			if (toEntityId == null) {
				if (otherFromEntityId != null)
					return false;
			} else if (!toEntityId.equals(otherFromEntityId))
				return false;
		}
		if (toEntityLocations == null) {
			if (other.toEntityLocations != null)
				return false;
		} else if (!toEntityLocations.equals(other.toEntityLocations))
			return false;
		return true;
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractTrackedEntity.Builder<Builder, EntityLink> {

		private ILinkableEntity fromEntity;
		private String fromEntityLocations;
		private ILinkableEntity toEntity;
		private String toEntityLocations;

		/**
		 * The 'linked-from' entity.
		 */
		public Builder withFromEntity(ILinkableEntity fromEntityParam) {
			this.fromEntity = fromEntityParam;
			return this;
		}

		/**
		 * The locations within the 'linked-from' record, one per line.
		 */
		public Builder withFromEntityLocations(String fromEntityLocationsParam) {
			this.fromEntityLocations = fromEntityLocationsParam;
			return this;
		}

		/**
		 * The 'linked-to' entity.
		 */
		public Builder withToEntity(ILinkableEntity toEntityParam) {
			this.toEntity = toEntityParam;
			return this;
		}

		/**
		 * The locations within the 'linked-to' record, one per line.
		 */
		public Builder withToEntityLocations(String toEntityLocationsParam) {
			this.toEntityLocations = toEntityLocationsParam;
			return this;
		}

		@Override
		public EntityLink build() {
			EntityLink _object = build(new EntityLink());
			_object.setFromEntity(this.fromEntity);
			_object.setFromEntityLocations(this.fromEntityLocations);
			_object.setToEntity(this.toEntity);
			_object.setToEntityLocations(this.toEntityLocations);
			return _object;
		}

		@Override
		String getTypeName() {
			return "EntityLink";
		}

	}

}
