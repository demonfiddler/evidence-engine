/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.graphql_java_generator.annotation.GraphQLIgnore;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLQuery;
import com.graphql_java_generator.annotation.GraphQLScalar;
import com.graphql_java_generator.annotation.RequestType;
import com.graphql_java_generator.client.GraphQLObjectMapper;
import com.graphql_java_generator.client.GraphQLRequestObject;

/**
 * Available queries.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLQuery(name = "Query", type = RequestType.query)
@GraphQLObjectType("Query")
@JsonInclude(Include.NON_NULL)
public class Query implements GraphQLRequestObject {

	private ObjectMapper mapper = null;
	private JsonNode extensions;
	private Map<String, JsonNode> extensionsAsMap = null;

	/**
	 * This map contains the deserialized values for the alias, as parsed from the JSON response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public Query() {
	}

	/**
	 * Returns a paged list of claims.
	 */
	@JsonProperty("claims")
	@GraphQLInputParameters(names = { "filter", "pageSort" }, types = { "TopicalEntityQueryFilter", "PageableInput" },
		mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "claims", graphQLTypeSimpleName = "ClaimPage", javaClass = ClaimPage.class,
		listDepth = 0)
	ClaimPage claims;

	/**
	 * Returns a claim given its identifier.
	 */
	@JsonProperty("claimById")
	@GraphQLInputParameters(names = { "id" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "claimById", graphQLTypeSimpleName = "Claim", javaClass = Claim.class, listDepth = 0)
	Claim claimById;

	/**
	 * Returns a paged list of declarations.
	 */
	@JsonProperty("declarations")
	@GraphQLInputParameters(names = { "filter", "pageSort" }, types = { "TopicalEntityQueryFilter", "PageableInput" },
		mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "declarations", graphQLTypeSimpleName = "DeclarationPage",
		javaClass = DeclarationPage.class, listDepth = 0)
	DeclarationPage declarations;

	/**
	 * Returns a declaration given its identifier.
	 */
	@JsonProperty("declarationById")
	@GraphQLInputParameters(names = { "id" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "declarationById", graphQLTypeSimpleName = "Declaration",
		javaClass = Declaration.class, listDepth = 0)
	Declaration declarationById;

	/**
	 * Returns a paged list of journals.
	 */
	@JsonProperty("journals")
	@GraphQLInputParameters(names = { "filter", "pageSort" }, types = { "TrackedEntityQueryFilter", "PageableInput" },
		mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "journals", graphQLTypeSimpleName = "JournalPage", javaClass = JournalPage.class,
		listDepth = 0)
	JournalPage journals;

	/**
	 * Returns a journal given its identifier.
	 */
	@JsonProperty("journalById")
	@GraphQLInputParameters(names = { "id" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "journalById", graphQLTypeSimpleName = "Journal", javaClass = Journal.class,
		listDepth = 0)
	Journal journalById;

	/**
	 * Returns a paged list of log entries.
	 */
	@JsonProperty("log")
	@GraphQLInputParameters(names = { "filter", "pageSort" }, types = { "LogQueryFilter", "PageableInput" },
		mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "log", graphQLTypeSimpleName = "LogPage", javaClass = LogPage.class, listDepth = 0)
	LogPage log;

	/**
	 * Returns a paged list of persons.
	 */
	@JsonProperty("persons")
	@GraphQLInputParameters(names = { "filter", "pageSort" }, types = { "TopicalEntityQueryFilter", "PageableInput" },
		mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "persons", graphQLTypeSimpleName = "PersonPage", javaClass = PersonPage.class,
		listDepth = 0)
	PersonPage persons;

	/**
	 * Returns a person given its identifier.
	 */
	@JsonProperty("personById")
	@GraphQLInputParameters(names = { "id" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "personById", graphQLTypeSimpleName = "Person", javaClass = Person.class,
		listDepth = 0)
	Person personById;

	/**
	 * Returns a paged list of publications.
	 */
	@JsonProperty("publications")
	@GraphQLInputParameters(names = { "filter", "pageSort" }, types = { "TopicalEntityQueryFilter", "PageableInput" },
		mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "publications", graphQLTypeSimpleName = "PublicationPage",
		javaClass = PublicationPage.class, listDepth = 0)
	PublicationPage publications;

	/**
	 * Returns a publication given its identifier.
	 */
	@JsonProperty("publicationById")
	@GraphQLInputParameters(names = { "id" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "publicationById", graphQLTypeSimpleName = "Publication",
		javaClass = Publication.class, listDepth = 0)
	Publication publicationById;

	/**
	 * Returns a paged list of publishers.
	 */
	@JsonProperty("publishers")
	@GraphQLInputParameters(names = { "filter", "pageSort" }, types = { "TrackedEntityQueryFilter", "PageableInput" },
		mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "publishers", graphQLTypeSimpleName = "PublisherPage",
		javaClass = PublisherPage.class, listDepth = 0)
	PublisherPage publishers;

	/**
	 * Returns a publisher given its identifier.
	 */
	@JsonProperty("publisherById")
	@GraphQLInputParameters(names = { "id" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "publisherById", graphQLTypeSimpleName = "Publisher", javaClass = Publisher.class,
		listDepth = 0)
	Publisher publisherById;

	/**
	 * Returns a paged list of quotations.
	 */
	@JsonProperty("quotations")
	@GraphQLInputParameters(names = { "filter", "pageSort" }, types = { "TopicalEntityQueryFilter", "PageableInput" },
		mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "quotations", graphQLTypeSimpleName = "QuotationPage",
		javaClass = QuotationPage.class, listDepth = 0)
	QuotationPage quotations;

	/**
	 * Returns a quotation given its identifier.
	 */
	@JsonProperty("quotationById")
	@GraphQLInputParameters(names = { "id" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "quotationById", graphQLTypeSimpleName = "Quotation", javaClass = Quotation.class,
		listDepth = 0)
	Quotation quotationById;

	/**
	 * Returns a paged list of topics or sub-topics.
	 */
	@JsonProperty("topics")
	@GraphQLInputParameters(names = { "filter", "pageSort" }, types = { "TopicQueryFilter", "PageableInput" },
		mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "topics", graphQLTypeSimpleName = "TopicPage", javaClass = TopicPage.class,
		listDepth = 0)
	TopicPage topics;

	/**
	 * Returns a topic given its identifier.
	 */
	@JsonProperty("topicById")
	@GraphQLInputParameters(names = { "id" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "topicById", graphQLTypeSimpleName = "Topic", javaClass = Topic.class, listDepth = 0)
	Topic topicById;

	@JsonProperty("topicRefs")
	@GraphQLInputParameters(names = { "filter", "pageSort" }, types = { "TopicRefQueryFilter", "PageableInput" },
		mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "topicRefs", graphQLTypeSimpleName = "TopicRefPage", javaClass = TopicRefPage.class,
		listDepth = 0)
	TopicRefPage topicRefs;

	/**
	 * Returns a topic reference given its identifier.
	 */
	@JsonProperty("topicRefById")
	@GraphQLInputParameters(names = { "id", "entityKind" }, types = { "ID", "EntityKind" }, mandatories = { true, true }, listDepths = { 0 },
		itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "topicRefById", graphQLTypeSimpleName = "TopicRef", javaClass = TopicRef.class,
		listDepth = 0)
	TopicRef topicRefById;

	/**
	 * Returns a topic reference given its topic and entity identifiers.
	 */
	@JsonProperty("topicRefByEntityId")
	@GraphQLInputParameters(names = {"topicId", "entityId", "entityKind"}, types = {"ID", "ID", "EntityKind"}, mandatories = {true, true, true}, listDepths = {0, 0, 0}, itemsMandatory = {false, false, false})
	@GraphQLNonScalar( fieldName = "topicRefByEntityId", graphQLTypeSimpleName = "TopicRef", javaClass = TopicRef.class, listDepth = 0)
	TopicRef topicRefByEntityId;

	/**
	 * Returns a paged list of users.
	 */
	@JsonProperty("users")
	@GraphQLInputParameters(names = { "filter", "pageSort" }, types = { "TrackedEntityQueryFilter", "PageableInput" },
		mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "users", graphQLTypeSimpleName = "UserPage", javaClass = UserPage.class,
		listDepth = 0)
	UserPage users;

	/**
	 * Returns a user given its identifier.
	 */
	@JsonProperty("userById")
	@GraphQLInputParameters(names = { "id" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "userById", graphQLTypeSimpleName = "User", javaClass = User.class, listDepth = 0)
	User userById;

	/**
	 * Returns a user given its username.
	 */
	@JsonProperty("userByUsername")
	@GraphQLInputParameters(names = { "username" }, types = { "String" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "userByUsername", graphQLTypeSimpleName = "User", javaClass = User.class, listDepth = 0)
	User userByUsername;

	@JsonProperty("__schema")
	@GraphQLNonScalar(fieldName = "__schema", graphQLTypeSimpleName = "__Schema", javaClass = __Schema.class,
		listDepth = 0)
	__Schema __schema;

	@JsonProperty("__type")
	@GraphQLInputParameters(names = { "name" }, types = { "String" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "__type", graphQLTypeSimpleName = "__Type", javaClass = __Type.class, listDepth = 0)
	__Type __type;

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String __typename;

	/**
	 * Returns a paged list of claims.
	 */
	@JsonProperty("claims")
	public void setClaims(ClaimPage claims) {
		this.claims = claims;
	}

	/**
	 * Returns a paged list of claims.
	 */
	@JsonProperty("claims")
	public ClaimPage getClaims() {
		return this.claims;
	}

	/**
	 * Returns a claim given its identifier.
	 */
	@JsonProperty("claimById")
	public void setClaimById(Claim claimById) {
		this.claimById = claimById;
	}

	/**
	 * Returns a claim given its identifier.
	 */
	@JsonProperty("claimById")
	public Claim getClaimById() {
		return this.claimById;
	}

	/**
	 * Returns a paged list of declarations.
	 */
	@JsonProperty("declarations")
	public void setDeclarations(DeclarationPage declarations) {
		this.declarations = declarations;
	}

	/**
	 * Returns a paged list of declarations.
	 */
	@JsonProperty("declarations")
	public DeclarationPage getDeclarations() {
		return this.declarations;
	}

	/**
	 * Returns a declaration given its identifier.
	 */
	@JsonProperty("declarationById")
	public void setDeclarationById(Declaration declarationById) {
		this.declarationById = declarationById;
	}

	/**
	 * Returns a declaration given its identifier.
	 */
	@JsonProperty("declarationById")
	public Declaration getDeclarationById() {
		return this.declarationById;
	}

	/**
	 * Returns a paged list of journals.
	 */
	@JsonProperty("journals")
	public void setJournals(JournalPage journals) {
		this.journals = journals;
	}

	/**
	 * Returns a paged list of journals.
	 */
	@JsonProperty("journals")
	public JournalPage getJournals() {
		return this.journals;
	}

	/**
	 * Returns a journal given its identifier.
	 */
	@JsonProperty("journalById")
	public void setJournalById(Journal journalById) {
		this.journalById = journalById;
	}

	/**
	 * Returns a journal given its identifier.
	 */
	@JsonProperty("journalById")
	public Journal getJournalById() {
		return this.journalById;
	}

	/**
	 * Returns a paged list of log entries.
	 */
	@JsonProperty("log")
	public void setLog(LogPage log) {
		this.log = log;
	}

	/**
	 * Returns a paged list of log entries.
	 */
	@JsonProperty("log")
	public LogPage getLog() {
		return this.log;
	}

	/**
	 * Returns a paged list of persons.
	 */
	@JsonProperty("persons")
	public void setPersons(PersonPage persons) {
		this.persons = persons;
	}

	/**
	 * Returns a paged list of persons.
	 */
	@JsonProperty("persons")
	public PersonPage getPersons() {
		return this.persons;
	}

	/**
	 * Returns a person given its identifier.
	 */
	@JsonProperty("personById")
	public void setPersonById(Person personById) {
		this.personById = personById;
	}

	/**
	 * Returns a person given its identifier.
	 */
	@JsonProperty("personById")
	public Person getPersonById() {
		return this.personById;
	}

	/**
	 * Returns a paged list of publications.
	 */
	@JsonProperty("publications")
	public void setPublications(PublicationPage publications) {
		this.publications = publications;
	}

	/**
	 * Returns a paged list of publications.
	 */
	@JsonProperty("publications")
	public PublicationPage getPublications() {
		return this.publications;
	}

	/**
	 * Returns a publication given its identifier.
	 */
	@JsonProperty("publicationById")
	public void setPublicationById(Publication publicationById) {
		this.publicationById = publicationById;
	}

	/**
	 * Returns a publication given its identifier.
	 */
	@JsonProperty("publicationById")
	public Publication getPublicationById() {
		return this.publicationById;
	}

	/**
	 * Returns a paged list of publishers.
	 */
	@JsonProperty("publishers")
	public void setPublishers(PublisherPage publishers) {
		this.publishers = publishers;
	}

	/**
	 * Returns a paged list of publishers.
	 */
	@JsonProperty("publishers")
	public PublisherPage getPublishers() {
		return this.publishers;
	}

	/**
	 * Returns a publisher given its identifier.
	 */
	@JsonProperty("publisherById")
	public void setPublisherById(Publisher publisherById) {
		this.publisherById = publisherById;
	}

	/**
	 * Returns a publisher given its identifier.
	 */
	@JsonProperty("publisherById")
	public Publisher getPublisherById() {
		return this.publisherById;
	}

	/**
	 * Returns a paged list of quotations.
	 */
	@JsonProperty("quotations")
	public void setQuotations(QuotationPage quotations) {
		this.quotations = quotations;
	}

	/**
	 * Returns a paged list of quotations.
	 */
	@JsonProperty("quotations")
	public QuotationPage getQuotations() {
		return this.quotations;
	}

	/**
	 * Returns a quotation given its identifier.
	 */
	@JsonProperty("quotationById")
	public void setQuotationById(Quotation quotationById) {
		this.quotationById = quotationById;
	}

	/**
	 * Returns a quotation given its identifier.
	 */
	@JsonProperty("quotationById")
	public Quotation getQuotationById() {
		return this.quotationById;
	}

	/**
	 * Returns a paged list of topics or sub-topics.
	 */
	@JsonProperty("topics")
	public void setTopics(TopicPage topics) {
		this.topics = topics;
	}

	/**
	 * Returns a paged list of topics or sub-topics.
	 */
	@JsonProperty("topics")
	public TopicPage getTopics() {
		return this.topics;
	}

	/**
	 * Returns a topic given its identifier.
	 */
	@JsonProperty("topicById")
	public void setTopicById(Topic topicById) {
		this.topicById = topicById;
	}

	/**
	 * Returns a topic given its identifier.
	 */
	@JsonProperty("topicById")
	public Topic getTopicById() {
		return this.topicById;
	}

	@JsonProperty("topicRefs")
	public void setTopicRefs(TopicRefPage topicRefs) {
		this.topicRefs = topicRefs;
	}

	@JsonProperty("topicRefs")
	public TopicRefPage getTopicRefs() {
		return this.topicRefs;
	}

	/**
	 * Returns a topic reference given its identifier.
	 */
	@JsonProperty("topicRefById")
	public void setTopicRefById(TopicRef topicRefById) {
		this.topicRefById = topicRefById;
	}

	/**
	 * Returns a topic reference given its identifier.
	 */
	@JsonProperty("topicRefById")
	public TopicRef getTopicRefById() {
		return this.topicRefById;
	}

	/**
	  * Returns a topic reference given its topic and entity identifiers.
  	 */
	@JsonProperty("topicRefByEntityId")
	public void setTopicRefByEntityId(TopicRef topicRefByEntityId) {
		this.topicRefByEntityId = topicRefByEntityId;
	}

	/**
	 * Returns a topic reference given its topic and entity identifiers.
	 */
	@JsonProperty("topicRefByEntityId")
	public TopicRef getTopicRefByEntityId() {
		return this.topicRefByEntityId;
	}
		  
	  /**
	 * Returns a paged list of users.
	 */
	@JsonProperty("users")
	public void setUsers(UserPage users) {
		this.users = users;
	}

	/**
	 * Returns a paged list of users.
	 */
	@JsonProperty("users")
	public UserPage getUsers() {
		return this.users;
	}

	/**
	 * Returns a user given its identifier.
	 */
	@JsonProperty("userById")
	public void setUserById(User userById) {
		this.userById = userById;
	}

	/**
	 * Returns a user given its identifier.
	 */
	@JsonProperty("userById")
	public User getUserById() {
		return this.userById;
	}

	/**
	 * Returns a user given its username.
	 */
	@JsonProperty("userByUsername")
	public void setUserByUsername(User userByUsername) {
		this.userByUsername = userByUsername;
	}

	/**
	 * Returns a user given its username.
	 */
	@JsonProperty("userByUsername")
	public User getUserByUsername() {
		return this.userByUsername;
	}

	@JsonProperty("__schema")
	public void set__schema(__Schema __schema) {
		this.__schema = __schema;
	}

	@JsonProperty("__schema")
	public __Schema get__schema() {
		return this.__schema;
	}

	@JsonProperty("__type")
	public void set__type(__Type __type) {
		this.__type = __type;
	}

	@JsonProperty("__type")
	public __Type get__type() {
		return this.__type;
	}

	@JsonProperty("__typename")
	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	@JsonProperty("__typename")
	public String get__typename() {
		return this.__typename;
	}

	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		this.aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return this.aliasValues.get(alias);
	}

	public String toString() {
		return "Query {" //$NON-NLS-1$
			+ "claims: " + this.claims //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "claimById: " + this.claimById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "declarations: " + this.declarations //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "declarationById: " + this.declarationById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "journals: " + this.journals //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "journalById: " + this.journalById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "log: " + this.log //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "persons: " + this.persons //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "personById: " + this.personById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "publications: " + this.publications //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "publicationById: " + this.publicationById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "publishers: " + this.publishers //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "publisherById: " + this.publisherById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "quotations: " + this.quotations //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "quotationById: " + this.quotationById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "topics: " + this.topics //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "topicById: " + this.topicById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "topicRefs: " + this.topicRefs //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "topicRefById: " + this.topicRefById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "topicRefByEntityId: " + this.topicRefByEntityId //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "users: " + this.users //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "userById: " + this.userById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "userByUsername: " + this.userByUsername //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "__schema: " + this.__schema //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "__type: " + this.__type //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "__typename: " + this.__typename //$NON-NLS-1$
			+ "}"; //$NON-NLS-1$
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {

		private ClaimPage claims;
		private Claim claimById;
		private DeclarationPage declarations;
		private Declaration declarationById;
		private JournalPage journals;
		private Journal journalById;
		private LogPage log;
		private PersonPage persons;
		private Person personById;
		private PublicationPage publications;
		private Publication publicationById;
		private PublisherPage publishers;
		private Publisher publisherById;
		private QuotationPage quotations;
		private Quotation quotationById;
		private TopicPage topics;
		private Topic topicById;
		private TopicRefPage topicRefs;
		private TopicRef topicRefById;
		private TopicRef topicRefByEntityId;
		private UserPage users;
		private User userById;
		private User userByUsername;
		private __Schema __schema;
		private __Type __type;

		/**
		 * Returns a paged list of claims.
		 */
		public Builder withClaims(ClaimPage claimsParam) {
			this.claims = claimsParam;
			return this;
		}

		/**
		 * Returns a claim given its identifier.
		 */
		public Builder withClaimById(Claim claimByIdParam) {
			this.claimById = claimByIdParam;
			return this;
		}

		/**
		 * Returns a paged list of declarations.
		 */
		public Builder withDeclarations(DeclarationPage declarationsParam) {
			this.declarations = declarationsParam;
			return this;
		}

		/**
		 * Returns a declaration given its identifier.
		 */
		public Builder withDeclarationById(Declaration declarationByIdParam) {
			this.declarationById = declarationByIdParam;
			return this;
		}

		/**
		 * Returns a paged list of journals.
		 */
		public Builder withJournals(JournalPage journalsParam) {
			this.journals = journalsParam;
			return this;
		}

		/**
		 * Returns a journal given its identifier.
		 */
		public Builder withJournalById(Journal journalByIdParam) {
			this.journalById = journalByIdParam;
			return this;
		}

		/**
		 * Returns a paged list of log entries.
		 */
		public Builder withLog(LogPage logParam) {
			this.log = logParam;
			return this;
		}

		/**
		 * Returns a paged list of persons.
		 */
		public Builder withPersons(PersonPage personsParam) {
			this.persons = personsParam;
			return this;
		}

		/**
		 * Returns a person given its identifier.
		 */
		public Builder withPersonById(Person personByIdParam) {
			this.personById = personByIdParam;
			return this;
		}

		/**
		 * Returns a paged list of publications.
		 */
		public Builder withPublications(PublicationPage publicationsParam) {
			this.publications = publicationsParam;
			return this;
		}

		/**
		 * Returns a publication given its identifier.
		 */
		public Builder withPublicationById(Publication publicationByIdParam) {
			this.publicationById = publicationByIdParam;
			return this;
		}

		/**
		 * Returns a paged list of publishers.
		 */
		public Builder withPublishers(PublisherPage publishersParam) {
			this.publishers = publishersParam;
			return this;
		}

		/**
		 * Returns a publisher given its identifier.
		 */
		public Builder withPublisherById(Publisher publisherByIdParam) {
			this.publisherById = publisherByIdParam;
			return this;
		}

		/**
		 * Returns a paged list of quotations.
		 */
		public Builder withQuotations(QuotationPage quotationsParam) {
			this.quotations = quotationsParam;
			return this;
		}

		/**
		 * Returns a quotation given its identifier.
		 */
		public Builder withQuotationById(Quotation quotationByIdParam) {
			this.quotationById = quotationByIdParam;
			return this;
		}

		/**
		 * Returns a paged list of topics or sub-topics.
		 */
		public Builder withTopics(TopicPage topicsParam) {
			this.topics = topicsParam;
			return this;
		}

		/**
		 * Returns a topic given its identifier.
		 */
		public Builder withTopicById(Topic topicByIdParam) {
			this.topicById = topicByIdParam;
			return this;
		}

		public Builder withTopicRefs(TopicRefPage topicRefsParam) {
			this.topicRefs = topicRefsParam;
			return this;
		}

		/**
		 * Returns a topic reference given its identifier.
		 */
		public Builder withTopicRefById(TopicRef topicRefByIdParam) {
			this.topicRefById = topicRefByIdParam;
			return this;
		}

		/**
		 * Returns a topic reference given its topic and entity identifiers.
		 */
		public Builder withTopicRefByEntityId(TopicRef topicRefByEntityIdParam) {
			this.topicRefByEntityId = topicRefByEntityIdParam;
			return this;
		}

		/**
		 * Returns a paged list of users.
		 */
		public Builder withUsers(UserPage usersParam) {
			this.users = usersParam;
			return this;
		}

		/**
		 * Returns a user given its identifier.
		 */
		public Builder withUserById(User userByIdParam) {
			this.userById = userByIdParam;
			return this;
		}

		/**
		 * Returns a user given its username.
		 */
		public Builder withUserByUsername(User userByUsernameParam) {
			this.userByUsername = userByUsernameParam;
			return this;
		}

		public Builder with__schema(__Schema __schemaParam) {
			this.__schema = __schemaParam;
			return this;
		}

		public Builder with__type(__Type __typeParam) {
			this.__type = __typeParam;
			return this;
		}

		public Query build() {
			Query _object = new Query();
			_object.setClaims(this.claims);
			_object.setClaimById(this.claimById);
			_object.setDeclarations(this.declarations);
			_object.setDeclarationById(this.declarationById);
			_object.setJournals(this.journals);
			_object.setJournalById(this.journalById);
			_object.setLog(this.log);
			_object.setPersons(this.persons);
			_object.setPersonById(this.personById);
			_object.setPublications(this.publications);
			_object.setPublicationById(this.publicationById);
			_object.setPublishers(this.publishers);
			_object.setPublisherById(this.publisherById);
			_object.setQuotations(this.quotations);
			_object.setQuotationById(this.quotationById);
			_object.setTopics(this.topics);
			_object.setTopicById(this.topicById);
			_object.setTopicRefs(this.topicRefs);
			_object.setTopicRefById(this.topicRefById);
			_object.setTopicRefByEntityId(this.topicRefByEntityId);
			_object.setUsers(this.users);
			_object.setUserById(this.userById);
			_object.setUserByUsername(this.userByUsername);
			_object.set__schema(this.__schema);
			_object.set__type(this.__type);
			_object.set__typename("Query"); //$NON-NLS-1$
			return _object;
		}
	}

	private ObjectMapper getMapper() {
		if (this.mapper == null) {
			this.mapper = new ObjectMapper();
		}
		return this.mapper;
	}

	public JsonNode getExtensions() {
		return this.extensions;
	}

	public void setExtensions(JsonNode extensionsParam) {
		this.extensions = extensionsParam;
	}

	/**
	 * Returns the extensions as a map. The values can't be deserialized, as their type is unknown.
	 * @return
	 */
	public Map<String, JsonNode> getExtensionsAsMap() {
		if (this.extensionsAsMap == null) {
			this.extensionsAsMap =
				new ObjectMapper().convertValue(this.extensions, new TypeReference<Map<String, JsonNode>>() {
				});
		}
		return this.extensionsAsMap;
	}

	/**
	 * Parse the value for the given _key_, as found in the <I>extensions</I> field of the GraphQL server's response,
	 * into the given _t_ class.
	 * @param <T>
	 * @param key
	 * @param t
	 * @return null if the key is not in the <I>extensions</I> map. Otherwise: the value for this _key_, as a _t_
	 * instance
	 * @throws JsonProcessingException When there is an error when converting the key's value into the _t_ class
	 */
	public <T> T getExtensionsField(String key, Class<T> t) throws JsonProcessingException {
		JsonNode node = getExtensionsAsMap().get(key);
		return (node == null) ? null : getMapper().treeToValue(node, t);
	}

}
