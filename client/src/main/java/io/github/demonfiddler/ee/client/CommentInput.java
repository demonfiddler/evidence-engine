/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * An input for creating or updating a comment.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("CommentInput")
@JsonInclude(Include.NON_NULL)
public class CommentInput extends AbstractTrackedEntityInput {

	public CommentInput() {
	}

	/**
	 * The comment identifier, required if updating an existing record.
	 */
	@JsonProperty("id")
	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long id;

	/**
	 * A five-star rating for the comment, indicative of significance, credibility, evidence base, etc.
	 */
	@JsonProperty("rating")
	@GraphQLScalar(fieldName = "rating", graphQLTypeSimpleName = "Int", javaClass = Integer.class, listDepth = 0)
	Integer rating;

	/**
	 * The ID of the target entity with which the comment is associated.
	 */
	@JsonProperty("targetId")
	@GraphQLScalar(fieldName = "targetId", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long targetId;

	/**
	 * The ID of the parent comment to which this comment is a reply.
	 */
	@JsonProperty("parentId")
	@GraphQLScalar(fieldName = "parentId", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long parentId;

	/**
	 * The text of the comment.
	 */
	@JsonProperty("text")
	@GraphQLScalar(fieldName = "text", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String text;

	/**
	 * The comment identifier, required if updating an existing record.
	 */
	@Override
	@JsonProperty("id")
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * The comment identifier, required if updating an existing record.
	 */
	@Override
	@JsonProperty("id")
	public Long getId() {
		return this.id;
	}

	/**
	 * A five-star rating for the comment, indicative of significance, credibility, evidence base, etc.
	 */
	@Override
	@JsonProperty("rating")
	public void setRating(Integer rating) {
		this.rating = rating;
	}

	/**
	 * A five-star rating for the comment, indicative of significance, credibility, evidence base, etc.
	 */
	@Override
	@JsonProperty("rating")
	public Integer getRating() {
		return this.rating;
	}

	/**
	 * The ID of the target entity with which the comment is associated.
	 */
	@JsonProperty("targetId")
	public void setTargetId(Long entityId) {
		this.targetId = entityId;
	}

	/**
	 * The ID of the target entity with which the comment is associated.
	 */
	@JsonProperty("targetId")
	public Long getTargetId() {
		return this.targetId;
	}

	/**
	 * The ID of the parent comment to which this comment is a reply.
	 */
	@JsonProperty("parentId")
	public void setParentId(Long parentId) {
		this.parentId = parentId;
	}

	/**
	 * The ID of the parent comment to which this comment is a reply.
	 */
	@JsonProperty("parentId")
	public Long getParentId() {
		return this.parentId;
	}

	/**
	 * The text of the comment.
	 */
	@JsonProperty("text")
	public void setText(String text) {
		this.text = text;
	}

	/**
	 * The text of the comment.
	 */
	@JsonProperty("text")
	public String getText() {
		return this.text;
	}

	public String toString() {
		return "CommentInput {" //
			+ "id: " + this.id //
			+ ", " //
			+ "rating: " + this.rating //
			+ ", " //
			+ "targetId: " + this.targetId //
			+ ", " //
			+ "parentId: " + this.parentId //
			+ ", " //
			+ "text: " + this.text //
			+ "}"; //
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractTrackedEntityInput.Builder<Builder, CommentInput> {

		private Long targetId;
		private Long parentId;
		private String text;

		/**
		 * The ID of the entity with which the comment is associated.
		 */
		public Builder withTargetId(Long targetIdParam) {
			this.targetId = targetIdParam;
			return this;
		}

		/**
		 * The ID of the parent comment to which this comment is a reply.
		 */
		public Builder withParentId(Long parentIdParam) {
			this.parentId = parentIdParam;
			return this;
		}

		/**
		 * The text of the comment.
		 */
		public Builder withText(String textParam) {
			this.text = textParam;
			return this;
		}

		public CommentInput build() {
			CommentInput _object = super.build(new CommentInput());
			_object.setTargetId(this.targetId);
			_object.setParentId(this.parentId);
			_object.setText(this.text);
			return _object;
		}

	}

}
