/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.time.LocalDate;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import io.github.demonfiddler.ee.client.util.CustomJacksonDeserializers;

/**
 * A claim made in respect of given topic(s).
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("Claim")
@JsonInclude(Include.NON_NULL)
public class Claim extends AbstractLinkableEntity {

	public Claim() {
	}

	/**
	 * The text of the claim.
	 */
	@JsonProperty("text")
	@GraphQLScalar(fieldName = "text", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String text;

	/**
	 * The date the claim was made.
	 */
	@JsonProperty("date")
	@JsonDeserialize(using = CustomJacksonDeserializers.Date.class)
	@GraphQLScalar(fieldName = "date", graphQLTypeSimpleName = "Date", javaClass = LocalDate.class, listDepth = 0)
	LocalDate date;

	/**
	 * Added notes about the claim.
	 */
	@JsonProperty("notes")
	@GraphQLScalar(fieldName = "notes", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String notes;

	/**
	 * The text of the claim.
	 */
	@JsonProperty("text")
	public void setText(String text) {
		this.text = text;
	}

	/**
	 * The text of the claim.
	 */
	@JsonProperty("text")
	public String getText() {
		return this.text;
	}

	/**
	 * The date the claim was made.
	 */
	@JsonProperty("date")
	public void setDate(LocalDate date) {
		this.date = date;
	}

	/**
	 * The date the claim was made.
	 */
	@JsonProperty("date")
	public LocalDate getDate() {
		return this.date;
	}

	/**
	 * Added notes about the claim.
	 */
	@JsonProperty("notes")
	public void setNotes(String notes) {
		this.notes = notes;
	}

	/**
	 * Added notes about the claim.
	 */
	@JsonProperty("notes")
	public String getNotes() {
		return this.notes;
	}

	public String toString() {
		return "Claim {" //
			+ "id: " + this.id //
			+ ", " //
			+ "entityKind: " + this.entityKind //
			+ ", " //
			+ "status: " + this.status //
			+ ", " //
			+ "created: " + this.created //
			+ ", " //
			+ "createdByUser.id: " + (this.createdByUser == null ? null : this.createdByUser.getId()) //
			+ ", " //
			+ "updated: " + this.updated //
			+ ", " //
			+ "updatedByUser.id: " + (this.updatedByUser == null ? null : this.updatedByUser.getId()) //
			+ ", " //
			+ "log: " + this.log //
			+ ", " //
			+ "fromEntityLinks: " + this.fromEntityLinks //
			+ ", " //
			+ "toEntityLinks: " + this.toEntityLinks //
			+ ", " //
			+ "text: " + this.text //
			+ ", " //
			+ "date: " + this.date //
			+ ", " //
			+ "notes: " + this.notes //
			+ ", " //
			+ "__typename: " + this.__typename //
			+ "}";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((text == null) ? 0 : text.hashCode());
		result = prime * result + ((date == null) ? 0 : date.hashCode());
		result = prime * result + ((notes == null) ? 0 : notes.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
        if (!super.equals(obj))
            return false;
		Claim other = (Claim)obj;
		if (text == null) {
			if (other.text != null)
				return false;
		} else if (!text.equals(other.text))
			return false;
		if (date == null) {
			if (other.date != null)
				return false;
		} else if (!date.equals(other.date))
			return false;
		if (notes == null) {
			if (other.notes != null)
				return false;
		} else if (!notes.equals(other.notes))
			return false;
		return true;
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractLinkableEntity.Builder<Builder, Claim> {

		private String text;
		private LocalDate date;
		private String notes;

		/**
		 * The text of the claim.
		 */
		public Builder withText(String textParam) {
			this.text = textParam;
			return this;
		}

		/**
		 * The date the claim was made.
		 */
		public Builder withDate(LocalDate dateParam) {
			this.date = dateParam;
			return this;
		}

		/**
		 * Added notes about the claim.
		 */
		public Builder withNotes(String notesParam) {
			this.notes = notesParam;
			return this;
		}

		@Override
		public Claim build() {
			Claim _object = build(new Claim());
			_object.setText(this.text);
			_object.setDate(this.date);
			_object.setNotes(this.notes);
			return _object;
		}

		@Override
		String getTypeName() {
			return "Claim";
		}

	}

}
