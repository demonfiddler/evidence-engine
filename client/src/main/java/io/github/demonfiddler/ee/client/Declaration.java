/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.net.URL;
import java.time.LocalDate;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import io.github.demonfiddler.ee.client.util.CustomJacksonDeserializers;

/**
 * A public declaration or open letter made in respect of given topic(s).
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("Declaration")
@JsonInclude(Include.NON_NULL)
public class Declaration extends AbstractLinkableEntity {

	public Declaration() {
	}

	/**
	 * The kind of declaration.
	 */
	@JsonProperty("kind")
	@GraphQLInputParameters(names = { "format" }, types = { "FormatKind" }, mandatories = { false }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "kind", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String kind;

	/**
	 * The declaration name or title.
	 */
	@JsonProperty("title")
	@GraphQLScalar(fieldName = "title", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String title;

	/**
	 * The date the declaration was published.
	 */
	@JsonProperty("date")
	@JsonDeserialize(using = CustomJacksonDeserializers.Date.class)
	@GraphQLScalar(fieldName = "date", graphQLTypeSimpleName = "Date", javaClass = LocalDate.class, listDepth = 0)
	LocalDate date;

	/**
	 * The country to which the declaration relates.
	 */
	@JsonProperty("country")
	@GraphQLInputParameters(names = { "format" }, types = { "CountryFormatKind" }, mandatories = { false },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLScalar(fieldName = "country", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String country;

	/**
	 * The URL for the declaration online.
	 */
	@JsonProperty("url")
	@JsonDeserialize(using = CustomJacksonDeserializers.URL.class)
	@GraphQLScalar(fieldName = "url", graphQLTypeSimpleName = "URL", javaClass = URL.class, listDepth = 0)
	URL url;

	/**
	 * Flag to indicate that url content is cached on this application server.
	 */
	@JsonProperty("cached")
	@GraphQLScalar(fieldName = "cached", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class, listDepth = 0)
	Boolean cached;

	/**
	 * Names of persons who signed the declaration, one per line.
	 */
	@JsonProperty("signatories")
	@GraphQLScalar(fieldName = "signatories", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String signatories;

	/**
	 * The number of signatories.
	 */
	@JsonProperty("signatoryCount")
	@GraphQLScalar(fieldName = "signatoryCount", graphQLTypeSimpleName = "Int", javaClass = Integer.class,
		listDepth = 0)
	Integer signatoryCount;

	/**
	 * Added notes about the declaration.
	 */
	@JsonProperty("notes")
	@GraphQLScalar(fieldName = "notes", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String notes;

	/**
	 * The kind of declaration.
	 */
	@JsonProperty("kind")
	public void setKind(String kind) {
		this.kind = kind;
	}

	/**
	 * The kind of declaration.
	 */
	@JsonProperty("kind")
	public String getKind() {
		return this.kind;
	}

	/**
	 * The declaration name or title.
	 */
	@JsonProperty("title")
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * The declaration name or title.
	 */
	@JsonProperty("title")
	public String getTitle() {
		return this.title;
	}

	/**
	 * The date the declaration was published.
	 */
	@JsonProperty("date")
	public void setDate(LocalDate date) {
		this.date = date;
	}

	/**
	 * The date the declaration was published.
	 */
	@JsonProperty("date")
	public LocalDate getDate() {
		return this.date;
	}

	/**
	 * The country to which the declaration relates.
	 */
	@JsonProperty("country")
	public void setCountry(String country) {
		this.country = country;
	}

	/**
	 * The country to which the declaration relates.
	 */
	@JsonProperty("country")
	public String getCountry() {
		return this.country;
	}

	/**
	 * The URL for the declaration online.
	 */
	@JsonProperty("url")
	public void setUrl(URL url) {
		this.url = url;
	}

	/**
	 * The URL for the declaration online.
	 */
	@JsonProperty("url")
	public URL getUrl() {
		return this.url;
	}

	/**
	 * Flag to indicate that url content is cached on this application server.
	 */
	@JsonProperty("cached")
	public void setCached(Boolean cached) {
		this.cached = cached;
	}

	/**
	 * Flag to indicate that url content is cached on this application server.
	 */
	@JsonProperty("cached")
	public Boolean getCached() {
		return this.cached;
	}

	/**
	 * Names of persons who signed the declaration, one per line.
	 */
	@JsonProperty("signatories")
	public void setSignatories(String signatories) {
		this.signatories = signatories;
	}

	/**
	 * Names of persons who signed the declaration, one per line.
	 */
	@JsonProperty("signatories")
	public String getSignatories() {
		return this.signatories;
	}

	/**
	 * The number of signatories.
	 */
	@JsonProperty("signatoryCount")
	public void setSignatoryCount(Integer signatoryCount) {
		this.signatoryCount = signatoryCount;
	}

	/**
	 * The number of signatories.
	 */
	@JsonProperty("signatoryCount")
	public Integer getSignatoryCount() {
		return this.signatoryCount;
	}

	/**
	 * Added notes about the declaration.
	 */
	@JsonProperty("notes")
	public void setNotes(String notes) {
		this.notes = notes;
	}

	/**
	 * Added notes about the declaration.
	 */
	@JsonProperty("notes")
	public String getNotes() {
		return this.notes;
	}

	@Override
	public String toString() {
		return "Declaration {" //
			+ "id: " + this.id //
			+ ", " //
			+ "entityKind: " + this.entityKind //
			+ ", " //
			+ "status: " + this.status //
			+ ", " //
			+ "created: " + this.created //
			+ ", " //
			+ "createdByUser.id: " + (this.createdByUser == null ? null : this.createdByUser.getId()) //
			+ ", " //
			+ "updated: " + this.updated //
			+ ", " //
			+ "updatedByUser.id: " + (this.updatedByUser == null ? null : this.updatedByUser.getId()) //
			+ ", " //
			+ "log: " + this.log //
			+ ", " //
			+ "fromEntityLinks: " + this.fromEntityLinks //
			+ ", " //
			+ "toEntityLinks: " + this.toEntityLinks //
			+ ", " //
			+ ", " //
			+ "kind: " + this.kind //
			+ ", " //
			+ "title: " + this.title //
			+ ", " //
			+ "date: " + this.date //
			+ ", " //
			+ "country: " + this.country //
			+ ", " //
			+ "url: " + this.url //
			+ ", " //
			+ "cached: " + this.cached //
			+ ", " //
			+ "signatories: " + this.signatories //
			+ ", " //
			+ "signatoryCount: " + this.signatoryCount //
			+ ", " //
			+ "notes: " + this.notes //
			+ ", " //
			+ "__typename: " + this.__typename //
			+ "}";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((kind == null) ? 0 : kind.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		result = prime * result + ((date == null) ? 0 : date.hashCode());
		result = prime * result + ((country == null) ? 0 : country.hashCode());
		result = prime * result + ((url == null) ? 0 : url.hashCode());
		result = prime * result + ((cached == null) ? 0 : cached.hashCode());
		result = prime * result + ((signatories == null) ? 0 : signatories.hashCode());
		result = prime * result + ((signatoryCount == null) ? 0 : signatoryCount.hashCode());
		result = prime * result + ((notes == null) ? 0 : notes.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
        if (!super.equals(obj))
            return false;
		Declaration other = (Declaration)obj;
		if (kind == null) {
			if (other.kind != null)
				return false;
		} else if (!kind.equals(other.kind))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		if (date == null) {
			if (other.date != null)
				return false;
		} else if (!date.equals(other.date))
			return false;
		if (country == null) {
			if (other.country != null)
				return false;
		} else if (!country.equals(other.country))
			return false;
		if (url == null) {
			if (other.url != null)
				return false;
		} else if (!url.equals(other.url))
			return false;
		if (cached == null) {
			if (other.cached != null)
				return false;
		} else if (!cached.equals(other.cached))
			return false;
		if (signatories == null) {
			if (other.signatories != null)
				return false;
		} else if (!signatories.equals(other.signatories))
			return false;
		if (signatoryCount == null) {
			if (other.signatoryCount != null)
				return false;
		} else if (!signatoryCount.equals(other.signatoryCount))
			return false;
		if (notes == null) {
			if (other.notes != null)
				return false;
		} else if (!notes.equals(other.notes))
			return false;
		return true;
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractLinkableEntity.Builder<Builder, Declaration> {

		private String kind;
		private String title;
		private LocalDate date;
		private String country;
		private URL url;
		private Boolean cached;
		private String signatories;
		private Integer signatoryCount;
		private String notes;

		/**
		 * The kind of declaration.
		 */
		public Builder withKind(String kindParam) {
			this.kind = kindParam;
			return this;
		}

		/**
		 * The declaration name or title.
		 */
		public Builder withTitle(String titleParam) {
			this.title = titleParam;
			return this;
		}

		/**
		 * The date the declaration was published.
		 */
		public Builder withDate(LocalDate dateParam) {
			this.date = dateParam;
			return this;
		}

		/**
		 * The country to which the declaration relates.
		 */
		public Builder withCountry(String countryParam) {
			this.country = countryParam;
			return this;
		}

		/**
		 * The URL for the declaration online.
		 */
		public Builder withUrl(URL urlParam) {
			this.url = urlParam;
			return this;
		}

		/**
		 * Flag to indicate that url content is cached on this application server.
		 */
		public Builder withCached(Boolean cachedParam) {
			this.cached = cachedParam;
			return this;
		}

		/**
		 * Names of persons who signed the declaration, one per line.
		 */
		public Builder withSignatories(String signatoriesParam) {
			this.signatories = signatoriesParam;
			return this;
		}

		/**
		 * The number of signatories.
		 */
		public Builder withSignatoryCount(Integer signatoryCountParam) {
			this.signatoryCount = signatoryCountParam;
			return this;
		}

		/**
		 * Added notes about the declaration.
		 */
		public Builder withNotes(String notesParam) {
			this.notes = notesParam;
			return this;
		}

		@Override
		public Declaration build() {
			Declaration _object = build(new Declaration());
			_object.setKind(this.kind);
			_object.setTitle(this.title);
			_object.setDate(this.date);
			_object.setCountry(this.country);
			_object.setUrl(this.url);
			_object.setCached(this.cached);
			_object.setSignatories(this.signatories);
			_object.setSignatoryCount(this.signatoryCount);
			_object.setNotes(this.notes);
			return _object;
		}

		@Override
		String getTypeName() {
			return "Declaration";
		}

	}

}
