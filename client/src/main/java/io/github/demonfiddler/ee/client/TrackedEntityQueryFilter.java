/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * Parameters to filter an ```ITrackedEntity``` query.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("TrackedEntityQueryFilter")
@JsonInclude(Include.NON_NULL)
public class TrackedEntityQueryFilter extends AbstractGraphQLObject {

	public TrackedEntityQueryFilter() {
	}

	/**
	 * Return only records with these status codes (default: ALL).
	 */
	@JsonProperty("status")
	@GraphQLScalar(fieldName = "status", graphQLTypeSimpleName = "StatusKind", javaClass = StatusKind.class,
		listDepth = 1)
	List<StatusKind> status;

	/**
	 * Free text search string.
	 */
	@JsonProperty("text")
	@GraphQLScalar(fieldName = "text", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String text;

	/**
	 * Whether to search ```text``` in advanced (boolean) mode.
	 */
	@JsonProperty("advancedSearch")
	@GraphQLScalar(fieldName = "advancedSearch", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class,
		listDepth = 0)
	Boolean advancedSearch;

	/**
	 * Return only records with these status codes (default: ALL).
	 */
	@JsonProperty("status")
	public final void setStatus(List<StatusKind> status) {
		this.status = status;
	}

	/**
	 * Return only records with these status codes (default: ALL).
	 */
	@JsonProperty("status")
	public final List<StatusKind> getStatus() {
		return this.status;
	}

	/**
	 * Free text search string.
	 */
	@JsonProperty("text")
	public final void setText(String text) {
		this.text = text;
	}

	/**
	 * Free text search string.
	 */
	@JsonProperty("text")
	public final String getText() {
		return this.text;
	}

	/**
	 * Whether to search ```text``` in advanced (boolean) mode.
	 */
	@JsonProperty("advancedSearch")
	public final void setAdvancedSearch(Boolean advancedSearch) {
		this.advancedSearch = advancedSearch;
	}

	/**
	 * Whether to search ```text``` in advanced (boolean) mode.
	 */
	@JsonProperty("advancedSearch")
	public final Boolean getAdvancedSearch() {
		return this.advancedSearch;
	}

	public String toString() {
		return "TrackedEntityQueryFilter {" //
			+ "status: " + this.status //
			+ ", " //
			+ "text: " + this.text //
			+ ", " //
			+ "advancedSearch: " + this.advancedSearch //
			+ "}";
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	@SuppressWarnings("unchecked")
	abstract static class AbstractBuilder<B extends AbstractBuilder<B, T>, T extends TrackedEntityQueryFilter> {

		private List<StatusKind> status;
		private String text;
		private Boolean advancedSearch;

		/**
		 * Return only records with these status codes (default: ALL).
		 */
		public final B withStatus(List<StatusKind> statusParam) {
			this.status = statusParam;
			return (B)this;
		}

		/**
		 * Free text search string.
		 */
		public final B withText(String textParam) {
			this.text = textParam;
			return (B)this;
		}

		/**
		 * Whether to search ```text``` in advanced (boolean) mode.
		 */
		public final B withAdvancedSearch(Boolean advancedSearchParam) {
			this.advancedSearch = advancedSearchParam;
			return (B)this;
		}

		T build(T _object) {
			_object.setStatus(this.status);
			_object.setText(this.text);
			_object.setAdvancedSearch(this.advancedSearch);
			return _object;
		}

		public abstract T build();

	}

	public static class Builder extends AbstractBuilder<Builder, TrackedEntityQueryFilter> {

		public TrackedEntityQueryFilter build() {
			return build(new TrackedEntityQueryFilter());
		}

	}

}