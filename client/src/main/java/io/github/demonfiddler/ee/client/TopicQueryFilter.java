/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import io.github.demonfiddler.ee.client.util.CustomJacksonSerializers;

/**
 * Parameters to filter a topic query.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("TopicQueryFilter")
@JsonInclude(Include.NON_NULL)
public class TopicQueryFilter extends /*TrackedEntityQueryFilter*/AbstractGraphQLObject {

	public TopicQueryFilter() {
	}

	/**
	 * The parent topic identifier. Specify to get sub-topics, leave blank for top-level topics.
	 */
	@JsonProperty("parentId")
	@JsonSerialize(using = CustomJacksonSerializers.Long.class)
	@GraphQLScalar(fieldName = "parentId", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long parentId;

	/**
	 * Whether to return all sub-topics, recursively.
	 */
	@JsonProperty("recursive")
	@GraphQLScalar(fieldName = "recursive", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class, listDepth = 0)
	Boolean recursive;

	// Uncommented, as InputParameter.getStringContentForAnInputTypeValue() doesn't check superclass fields.
	/**
	 * Return only topics with these status codes (default: ALL).
	 */
	@JsonProperty("status")
	@GraphQLScalar(fieldName = "status", graphQLTypeSimpleName = "StatusKind", javaClass = StatusKind.class,
		listDepth = 1)
	List<StatusKind> status;

	// Uncommented, as InputParameter.getStringContentForAnInputTypeValue() doesn't check superclass fields.
	/**
	 * Free text search string.
	 */
	@JsonProperty("text")
	@GraphQLScalar(fieldName = "text", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String text;

	// Uncommented, as InputParameter.getStringContentForAnInputTypeValue() doesn't check superclass fields.
	/**
	 * Whether to search ```text``` in advanced (boolean) mode.
	 */
	@JsonProperty("advancedSearch")
	@GraphQLScalar(fieldName = "advancedSearch", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class,
		listDepth = 0)
	Boolean advancedSearch;

	/**
	 * The parent topic identifier. Specify to get sub-topics, leave blank for top-level topics.
	 */
	@JsonProperty("parentId")
	public void setParentId(Long parentId) {
		this.parentId = parentId;
	}

	/**
	 * The parent topic identifier. Specify to get sub-topics, leave blank for top-level topics.
	 */
	@JsonProperty("parentId")
	public Long getParentId() {
		return this.parentId;
	}

	/**
	 * Whether to return all sub-topics, recursively.
	 */
	@JsonProperty("recursive")
	public void setRecursive(Boolean recursive) {
		this.recursive = recursive;
	}

	/**
	 * Whether to return all sub-topics, recursively.
	 */
	@JsonProperty("recursive")
	public Boolean getRecursive() {
		return this.recursive;
	}

	// Uncommented, as InputParameter.getStringContentForAnInputTypeValue() doesn't check superclass fields.
	/**
	 * Return only topics with these status codes (default: ALL).
	 */
	@JsonProperty("status")
	public void setStatus(List<StatusKind> status) {
		this.status = status;
	}

	// Uncommented, as InputParameter.getStringContentForAnInputTypeValue() doesn't check superclass fields.
	/**
	 * Return only topics with these status codes (default: ALL).
	 */
	@JsonProperty("status")
	public List<StatusKind> getStatus() {
		return this.status;
	}

	// Uncommented, as InputParameter.getStringContentForAnInputTypeValue() doesn't check superclass fields.
	/**
	 * Free text search string.
	 */
	@JsonProperty("text")
	public void setText(String text) {
		this.text = text;
	}

	// Uncommented, as InputParameter.getStringContentForAnInputTypeValue() doesn't check superclass fields.
	/**
	 * Free text search string.
	 */
	@JsonProperty("text")
	public String getText() {
		return this.text;
	}

	// Uncommented, as InputParameter.getStringContentForAnInputTypeValue() doesn't check superclass fields.
	/**
	 * Whether to search ```text``` in advanced (boolean) mode.
	 */
	@JsonProperty("advancedSearch")
	public void setAdvancedSearch(Boolean advancedSearch) {
		this.advancedSearch = advancedSearch;
	}

	// Uncommented, as InputParameter.getStringContentForAnInputTypeValue() doesn't check superclass fields.
	/**
	 * Whether to search ```text``` in advanced (boolean) mode.
	 */
	@JsonProperty("advancedSearch")
	public Boolean getAdvancedSearch() {
		return this.advancedSearch;
	}

	public String toString() {
		return "TopicQueryFilter {" //
			+ "parentId: " + this.parentId //
			+ ", " //
			+ "recursive: " + this.recursive //
			+ ", " //
			+ "status: " + this.status //
			+ ", " //
			+ "text: " + this.text //
			+ ", " //
			+ "advancedSearch: " + this.advancedSearch //
			+ "}";
	}

	public static Builder builder() {
		return new Builder();
	}

	// Commented out, as InputParameter.getStringContentForAnInputTypeValue() doesn't check superclass fields.
	// /**
	//  * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	//  * {@link #builderForTopicQueryFilter()}
	//  */
	// public static class Builder {

	// 	private Long parentId;
	// 	private Boolean recursive;
	// 	private List<StatusKind> status;
	// 	private String text;
	// 	private Boolean advancedSearch;

	// 	/**
	// 	 * The parent topic identifier. Specify to get sub-topics, leave blank for top-level topics.
	// 	 */
	// 	public Builder withParentId(Long parentIdParam) {
	// 		this.parentId = parentIdParam;
	// 		return this;
	// 	}

	// 	/**
	// 	 * Whether to return all sub-topics, recursively.
	// 	 */
	// 	public Builder withRecursive(Boolean recursiveParam) {
	// 		this.recursive = recursiveParam;
	// 		return this;
	// 	}

	// 	/**
	// 	 * Return only topics with these status codes (default: ALL).
	// 	 */
	// 	public Builder withStatus(List<StatusKind> statusParam) {
	// 		this.status = statusParam;
	// 		return this;
	// 	}

	// 	/**
	// 	 * Free text search string.
	// 	 */
	// 	public Builder withText(String textParam) {
	// 		this.text = textParam;
	// 		return this;
	// 	}

	// 	/**
	// 	 * Whether to search ```text``` in advanced (boolean) mode.
	// 	 */
	// 	public Builder withAdvancedSearch(Boolean advancedSearchParam) {
	// 		this.advancedSearch = advancedSearchParam;
	// 		return this;
	// 	}

	// 	public TopicQueryFilter build() {
	// 		TopicQueryFilter _object = new TopicQueryFilter();
	// 		_object.setParentId(this.parentId);
	// 		_object.setRecursive(this.recursive);
	// 		_object.setStatus(this.status);
	// 		_object.setText(this.text);
	// 		_object.setAdvancedSearch(this.advancedSearch);
	// 		return _object;
	// 	}

	// }

	// @SuppressWarnings("unchecked")
	// abstract static class AbstractBuilder<B extends AbstractBuilder<B, T>, T extends TopicQueryFilter>
	// 	extends TrackedEntityQueryFilter.AbstractBuilder<B, T> {

	// 	private Long parentId;
	// 	private Boolean recursive;

	// 	/**
	// 	 * The parent topic identifier. Specify to get sub-topics, pass {@code -1} for top-level topics.
	// 	 */
	// 	public B withParentId(Long parentIdParam) {
	// 		this.parentId = parentIdParam;
	// 		return (B)this;
	// 	}

	// 	/**
	// 	 * Whether to return all sub-topics, recursively.
	// 	 */
	// 	public B withRecursive(Boolean recursiveParam) {
	// 		this.recursive = recursiveParam;
	// 		return (B)this;
	// 	}

	// 	T build(T _object) {
	// 		_object.setParentId(this.parentId);
	// 		_object.setRecursive(this.recursive);
	// 		return _object;
	// 	}

	// }

	// /**
	//  * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	//  * {@link #topicQFBuilder()}
	//  */
	// public static class Builder extends AbstractBuilder<Builder, TopicQueryFilter> {

	// 	@Override
	// 	public TopicQueryFilter build() {
	// 		return build(new TopicQueryFilter());
	// 	}

	// }

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #topicQFBuilder()}
	 */
	public static class Builder {

		private Long parentId;
		private Boolean recursive;
		private List<StatusKind> status;
		private String text;
		private Boolean advancedSearch;


		/**
		 * The parent topic identifier. Specify to get sub-topics, pass {@code -1} for top-level topics.
		 */
		public Builder withParentId(Long parentIdParam) {
			this.parentId = parentIdParam;
			return this;
		}

		/**
		 * Whether to return all sub-topics, recursively.
		 */
		public Builder withRecursive(Boolean recursiveParam) {
			this.recursive = recursiveParam;
			return this;
		}

		/**
		 * Return only records with these status codes (default: ALL).
		 */
		public final Builder withStatus(List<StatusKind> statusParam) {
			this.status = statusParam;
			return this;
		}

		/**
		 * Free text search string.
		 */
		public final Builder withText(String textParam) {
			this.text = textParam;
			return this;
		}

		/**
		 * Whether to search ```text``` in advanced (boolean) mode.
		 */
		public final Builder withAdvancedSearch(Boolean advancedSearchParam) {
			this.advancedSearch = advancedSearchParam;
			return this;
		}

		public TopicQueryFilter build() {
			TopicQueryFilter _object = new TopicQueryFilter();
			_object.setParentId(this.parentId);
			_object.setRecursive(this.recursive);
			_object.setStatus(this.status);
			_object.setText(this.text);
			_object.setAdvancedSearch(this.advancedSearch);
			return _object;
		}

	}
}
