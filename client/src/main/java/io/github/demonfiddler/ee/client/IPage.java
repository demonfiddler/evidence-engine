/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLInterfaceType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import io.github.demonfiddler.ee.client.util.CustomJacksonDeserializers;

/**
 * Interface for returning paged results.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@JsonTypeInfo(use = Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "__typename", visible = true)
@JsonSubTypes({ @Type(value = ClaimPage.class, name = "ClaimPage"),
	@Type(value = DeclarationPage.class, name = "DeclarationPage"),
	@Type(value = EntityLinkPage.class, name = "EntityLinkPage"),
	@Type(value = JournalPage.class, name = "JournalPage"), //
	@Type(value = LogPage.class, name = "LogPage"), //
	@Type(value = PersonPage.class, name = "PersonPage"),
	@Type(value = PublicationPage.class, name = "PublicationPage"),
	@Type(value = PublisherPage.class, name = "PublisherPage"),
	@Type(value = QuotationPage.class, name = "QuotationPage"), //
	@Type(value = TopicPage.class, name = "TopicPage"), //
	@Type(value = UserPage.class, name = "UserPage") })
@GraphQLInterfaceType("IPage")
public interface IPage extends IGraphQLEntity {

	@JsonProperty("dummy")
	@GraphQLScalar(fieldName = "dummy", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	@JsonDeserialize(using = CustomJacksonDeserializers.Long.class)
	public void setDummy(Long dummy);

	@JsonProperty("dummy")
	@GraphQLScalar(fieldName = "dummy", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	@JsonDeserialize(using = CustomJacksonDeserializers.Long.class)
	public Long getDummy();

	@JsonProperty("hasContent")
	@GraphQLScalar(fieldName = "hasContent", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class,
		listDepth = 0)
	public void setHasContent(Boolean hasContent);

	@JsonProperty("hasContent")
	@GraphQLScalar(fieldName = "hasContent", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class,
		listDepth = 0)
	public Boolean getHasContent();

	@JsonProperty("isEmpty")
	@GraphQLScalar(fieldName = "isEmpty", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class, listDepth = 0)
	public void setIsEmpty(Boolean isEmpty);

	@JsonProperty("isEmpty")
	@GraphQLScalar(fieldName = "isEmpty", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class, listDepth = 0)
	public Boolean getIsEmpty();

	@JsonProperty("number")
	@GraphQLScalar(fieldName = "number", graphQLTypeSimpleName = "Int", javaClass = Integer.class, listDepth = 0)
	public void setNumber(Integer number);

	@JsonProperty("number")
	@GraphQLScalar(fieldName = "number", graphQLTypeSimpleName = "Int", javaClass = Integer.class, listDepth = 0)
	public Integer getNumber();

	@JsonProperty("size")
	@GraphQLScalar(fieldName = "size", graphQLTypeSimpleName = "Int", javaClass = Integer.class, listDepth = 0)
	public void setSize(Integer size);

	@JsonProperty("size")
	@GraphQLScalar(fieldName = "size", graphQLTypeSimpleName = "Int", javaClass = Integer.class, listDepth = 0)
	public Integer getSize();

	@JsonProperty("numberOfElements")
	@GraphQLScalar(fieldName = "numberOfElements", graphQLTypeSimpleName = "Int", javaClass = Integer.class,
		listDepth = 0)
	public void setNumberOfElements(Integer numberOfElements);

	@JsonProperty("numberOfElements")
	@GraphQLScalar(fieldName = "numberOfElements", graphQLTypeSimpleName = "Int", javaClass = Integer.class,
		listDepth = 0)
	public Integer getNumberOfElements();

	@JsonProperty("totalPages")
	@GraphQLScalar(fieldName = "totalPages", graphQLTypeSimpleName = "Int", javaClass = Integer.class, listDepth = 0)
	public void setTotalPages(Integer totalPages);

	@JsonProperty("totalPages")
	@GraphQLScalar(fieldName = "totalPages", graphQLTypeSimpleName = "Int", javaClass = Integer.class, listDepth = 0)
	public Integer getTotalPages();

	@JsonProperty("totalElements")
	@JsonDeserialize(using = CustomJacksonDeserializers.Long.class)
	@GraphQLScalar(fieldName = "totalElements", graphQLTypeSimpleName = "Long", javaClass = Long.class, listDepth = 0)
	public void setTotalElements(Long totalElements);

	@JsonProperty("totalElements")
	@JsonDeserialize(using = CustomJacksonDeserializers.Long.class)
	@GraphQLScalar(fieldName = "totalElements", graphQLTypeSimpleName = "Long", javaClass = Long.class, listDepth = 0)
	public Long getTotalElements();

	@JsonProperty("isFirst")
	@GraphQLScalar(fieldName = "isFirst", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class, listDepth = 0)
	public void setIsFirst(Boolean isFirst);

	@JsonProperty("isFirst")
	@GraphQLScalar(fieldName = "isFirst", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class, listDepth = 0)
	public Boolean getIsFirst();

	@JsonProperty("isLast")
	@GraphQLScalar(fieldName = "isLast", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class, listDepth = 0)
	public void setIsLast(Boolean isLast);

	@JsonProperty("isLast")
	@GraphQLScalar(fieldName = "isLast", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class, listDepth = 0)
	public Boolean getIsLast();

	@JsonProperty("hasNext")
	@GraphQLScalar(fieldName = "hasNext", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class, listDepth = 0)
	public void setHasNext(Boolean hasNext);

	@JsonProperty("hasNext")
	@GraphQLScalar(fieldName = "hasNext", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class, listDepth = 0)
	public Boolean getHasNext();

	@JsonProperty("hasPrevious")
	@GraphQLScalar(fieldName = "hasPrevious", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class,
		listDepth = 0)
	public void setHasPrevious(Boolean hasPrevious);

	@JsonProperty("hasPrevious")
	@GraphQLScalar(fieldName = "hasPrevious", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class,
		listDepth = 0)
	public Boolean getHasPrevious();

}
