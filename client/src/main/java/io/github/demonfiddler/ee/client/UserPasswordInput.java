/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * Input for updating a user's password.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("UserPasswordInput")
@JsonInclude(Include.NON_NULL)
public class UserPasswordInput extends AbstractBaseEntityInput {

	/**
	 * The immutable, unique user identifier (system-assigned).
	 */
	@JsonProperty("id")
	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long id;

	/**
	 * A bcrypt hash of the user's password.
	 */
	@JsonProperty("password")
	@GraphQLScalar(fieldName = "password", graphQLTypeSimpleName = "String", javaClass = String.class,
		listDepth = 0)
	String password;

	/**
	 * The immutable, unique user identifier (system-assigned).
	 */
	@JsonProperty("id")
	@Override
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * The immutable, unique user identifier (system-assigned).
	 */
	@JsonProperty("id")
	@Override
	public Long getId() {
		return this.id;
	}

	/**
	 * A bcrypt hash of the user's password.
	 */
	@JsonProperty("password")
	public void setPassword(String password) {
		this.password = password;
	}

	/**
	 * A bcrypt hash of the user's password.
	 */
	@JsonProperty("password")
	public String getPassword() {
		return this.password;
	}

	public String toString() {
		return "UserPasswordInput {" //$NON-NLS-1$
			+ "id: " + this.id //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "password: " + this.password //$NON-NLS-1$
			+ "}"; //$NON-NLS-1$
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractBaseEntityInput.Builder<Builder, UserPasswordInput> {

		private String password;

		/**
		 * A bcrypt hash of the user's password.
		 */
		public Builder withPassword(String passwordParam) {
			this.password = passwordParam;
			return this;
		}

		public UserPasswordInput build() {
			UserPasswordInput _object = new UserPasswordInput();
			super.build(_object);
			_object.setPassword(this.password);
			return _object;
		}

	}

}
