/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.graphql_java_generator.annotation.GraphQLIgnore;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLQuery;
import com.graphql_java_generator.annotation.GraphQLScalar;
import com.graphql_java_generator.annotation.RequestType;
import com.graphql_java_generator.client.GraphQLObjectMapper;

/**
 * Available mutations.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLQuery(name = "Mutation", type = RequestType.mutation)
@GraphQLObjectType("Mutation")
@JsonInclude(Include.NON_NULL)
public class Mutation implements com.graphql_java_generator.client.GraphQLRequestObject {

	private ObjectMapper mapper = null;
	private JsonNode extensions;
	private Map<String, JsonNode> extensionsAsMap = null;

	/**
	 * This map contains the deserialized values for the alias, as parsed from the JSON response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public Mutation() {
	}

	/**
	 * Creates a new claim.
	 */
	@JsonProperty("createClaim")
	@GraphQLInputParameters(names = { "claim" }, types = { "ClaimInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createClaim", graphQLTypeSimpleName = "Claim", javaClass = Claim.class,
		listDepth = 0)
	Claim createClaim;

	/**
	 * Updates an existing claim.
	 */
	@JsonProperty("updateClaim")
	@GraphQLInputParameters(names = { "claim" }, types = { "ClaimInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updateClaim", graphQLTypeSimpleName = "Claim", javaClass = Claim.class,
		listDepth = 0)
	Claim updateClaim;

	/**
	 * Deletes an existing claim.
	 */
	@JsonProperty("deleteClaim")
	@GraphQLInputParameters(names = { "claimId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deleteClaim", graphQLTypeSimpleName = "Claim", javaClass = Claim.class, listDepth = 0)
	Claim deleteClaim;

	/**
	 * Creates a new declaration.
	 */
	@JsonProperty("createDeclaration")
	@GraphQLInputParameters(names = { "declaration" }, types = { "DeclarationInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createDeclaration", graphQLTypeSimpleName = "Declaration",
		javaClass = Declaration.class, listDepth = 0)
	Declaration createDeclaration;

	/**
	 * Updates an existing declaration.
	 */
	@JsonProperty("updateDeclaration")
	@GraphQLInputParameters(names = { "declaration" }, types = { "DeclarationInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updateDeclaration", graphQLTypeSimpleName = "Declaration",
		javaClass = Declaration.class, listDepth = 0)
	Declaration updateDeclaration;

	/**
	 * Deletes an existing declaration.
	 */
	@JsonProperty("deleteDeclaration")
	@GraphQLInputParameters(names = { "declarationId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deleteDeclaration", graphQLTypeSimpleName = "Declaration",
		javaClass = Declaration.class, listDepth = 0)
	Declaration deleteDeclaration;

	/**
	 * Create a new journal.
	 */
	@JsonProperty("createJournal")
	@GraphQLInputParameters(names = { "journal" }, types = { "JournalInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createJournal", graphQLTypeSimpleName = "Journal", javaClass = Journal.class,
		listDepth = 0)
	Journal createJournal;

	/**
	 * Updates an existing journal.
	 */
	@JsonProperty("updateJournal")
	@GraphQLInputParameters(names = { "journal" }, types = { "JournalInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updateJournal", graphQLTypeSimpleName = "Journal", javaClass = Journal.class,
		listDepth = 0)
	Journal updateJournal;

	/**
	 * Deletes an existing journal.
	 */
	@JsonProperty("deleteJournal")
	@GraphQLInputParameters(names = { "journalId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deleteJournal", graphQLTypeSimpleName = "Journal", javaClass = Journal.class,
		listDepth = 0)
	Journal deleteJournal;

	/**
	 * Creates a new person.
	 */
	@JsonProperty("createPerson")
	@GraphQLInputParameters(names = { "person" }, types = { "PersonInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createPerson", graphQLTypeSimpleName = "Person", javaClass = Person.class,
		listDepth = 0)
	Person createPerson;

	/**
	 * Updates an existing person.
	 */
	@JsonProperty("updatePerson")
	@GraphQLInputParameters(names = { "person" }, types = { "PersonInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updatePerson", graphQLTypeSimpleName = "Person", javaClass = Person.class,
		listDepth = 0)
	Person updatePerson;

	/**
	 * Deletes an existing person.
	 */
	@JsonProperty("deletePerson")
	@GraphQLInputParameters(names = { "personId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deletePerson", graphQLTypeSimpleName = "Person", javaClass = Person.class,
		listDepth = 0)
	Person deletePerson;

	/**
	 * Creates a new publication.
	 */
	@JsonProperty("createPublication")
	@GraphQLInputParameters(names = { "publication" }, types = { "PublicationInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createPublication", graphQLTypeSimpleName = "Publication",
		javaClass = Publication.class, listDepth = 0)
	Publication createPublication;

	/**
	 * Updates an existing publication.
	 */
	@JsonProperty("updatePublication")
	@GraphQLInputParameters(names = { "publication" }, types = { "PublicationInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updatePublication", graphQLTypeSimpleName = "Publication",
		javaClass = Publication.class, listDepth = 0)
	Publication updatePublication;

	/**
	 * Deletes an existing publication.
	 */
	@JsonProperty("deletePublication")
	@GraphQLInputParameters(names = { "publicationId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deletePublication", graphQLTypeSimpleName = "Publication",
		javaClass = Publication.class, listDepth = 0)
	Publication deletePublication;

	/**
	 * Creates a new publisher.
	 */
	@JsonProperty("createPublisher")
	@GraphQLInputParameters(names = { "publisher" }, types = { "PublisherInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createPublisher", graphQLTypeSimpleName = "Publisher", javaClass = Publisher.class,
		listDepth = 0)
	Publisher createPublisher;

	/**
	 * Updates an existing publisher.
	 */
	@JsonProperty("updatePublisher")
	@GraphQLInputParameters(names = { "publisher" }, types = { "PublisherInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updatePublisher", graphQLTypeSimpleName = "Publisher", javaClass = Publisher.class,
		listDepth = 0)
	Publisher updatePublisher;

	/**
	 * Deletes an existing publisher.
	 */
	@JsonProperty("deletePublisher")
	@GraphQLInputParameters(names = { "publisherId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deletePublisher", graphQLTypeSimpleName = "Publisher", javaClass = Publisher.class,
		listDepth = 0)
	Publisher deletePublisher;

	/**
	 * Creates a new quotation.
	 */
	@JsonProperty("createQuotation")
	@GraphQLInputParameters(names = { "quotation" }, types = { "QuotationInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createQuotation", graphQLTypeSimpleName = "Quotation", javaClass = Quotation.class,
		listDepth = 0)
	Quotation createQuotation;

	/**
	 * Updates an existing quotation.
	 */
	@JsonProperty("updateQuotation")
	@GraphQLInputParameters(names = { "quotation" }, types = { "QuotationInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updateQuotation", graphQLTypeSimpleName = "Quotation", javaClass = Quotation.class,
		listDepth = 0)
	Quotation updateQuotation;

	/**
	 * Deletes an existing quotation.
	 */
	@JsonProperty("deleteQuotation")
	@GraphQLInputParameters(names = { "quotationId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deleteQuotation", graphQLTypeSimpleName = "Quotation", javaClass = Quotation.class,
		listDepth = 0)
	Quotation deleteQuotation;

	/**
	 * Creates a new topic.
	 */
	@JsonProperty("createTopic")
	@GraphQLInputParameters(names = { "topic" }, types = { "TopicInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createTopic", graphQLTypeSimpleName = "Topic", javaClass = Topic.class,
		listDepth = 0)
	Topic createTopic;

	/**
	 * Updates an existing topic.
	 */
	@JsonProperty("updateTopic")
	@GraphQLInputParameters(names = { "topic" }, types = { "TopicInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updateTopic", graphQLTypeSimpleName = "Topic", javaClass = Topic.class,
		listDepth = 0)
	Topic updateTopic;

	/**
	 * Deletes an existing topic.
	 */
	@JsonProperty("deleteTopic")
	@GraphQLInputParameters(names = { "topicId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deleteTopic", graphQLTypeSimpleName = "Topic", javaClass = Topic.class, listDepth = 0)
	Topic deleteTopic;

	/**
	 * Adds a new topic reference.
	 */
	@JsonProperty("addTopicRef")
	@GraphQLInputParameters(names = { "topicRef" }, types = { "TopicRefInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "addTopicRef", graphQLTypeSimpleName = "TopicRef", javaClass = TopicRef.class,
		listDepth = 0)
	TopicRef addTopicRef;

	/**
	 * Updates an existing topic reference.
	 */
	@JsonProperty("updateTopicRef")
	@GraphQLInputParameters(names = {"topicRef"}, types = {"TopicRefInput"}, mandatories = {true}, listDepths = {0}, itemsMandatory = {false})
	@GraphQLNonScalar( fieldName = "updateTopicRef", graphQLTypeSimpleName = "TopicRef", javaClass = TopicRef.class, listDepth = 0)
	TopicRef updateTopicRef;

	/**
	 * Removes a topic reference.
	 */
	@JsonProperty("removeTopicRef")
	@GraphQLInputParameters(names = { "topicRef" }, types = { "TopicRefInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLScalar(fieldName = "removeTopicRef", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class,
		listDepth = 0)
	Boolean removeTopicRef;

	/**
	 * Links two entities.
	 */
	@JsonProperty("linkEntities")
	@GraphQLInputParameters(names = { "link" }, types = { "LinkEntitiesInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLScalar(fieldName = "linkEntities", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class,
		listDepth = 0)
	Boolean linkEntities;

	/**
	 * Unlinks two linked entities.
	 */
	@JsonProperty("unlinkEntities")
	@GraphQLInputParameters(names = { "link" }, types = { "LinkEntitiesInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLScalar(fieldName = "unlinkEntities", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class,
		listDepth = 0)
	Boolean unlinkEntities;

	/**
	 * Sets entity status.
	 */
	@JsonProperty("setEntityStatus")
	@GraphQLInputParameters(names = { "entityKind", "entityId", "status" },
		types = { "EntityKind", "Long", "StatusKind" }, mandatories = { true, true, true }, listDepths = { 0, 0, 0 },
		itemsMandatory = { false, false, false })
	@GraphQLScalar(fieldName = "setEntityStatus", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class,
		listDepth = 0)
	Boolean setEntityStatus;

	/**
	 * Creates a new user.
	 */
	@JsonProperty("createUser")
	@GraphQLInputParameters(names = { "user" }, types = { "UserInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createUser", graphQLTypeSimpleName = "User", javaClass = User.class, listDepth = 0)
	User createUser;

	/**
	 * Updates an existing user.
	 */
	@JsonProperty("updateUser")
	@GraphQLInputParameters(names = { "user" }, types = { "UserInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updateUser", graphQLTypeSimpleName = "User", javaClass = User.class, listDepth = 0)
	User updateUser;

	/**
	 * Updates an existing user.
	 */
	@JsonProperty("deleteUser")
	@GraphQLInputParameters(names = { "userId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deleteUser", graphQLTypeSimpleName = "User", javaClass = User.class, listDepth = 0)
	User deleteUser;

	/**
	 * Grants permissions to a user. The specified permissions are added to any existing ones.
	 */
	@JsonProperty("grantUserPermissions")
	@GraphQLInputParameters(names = { "userId", "permissions" }, types = { "ID", "PermissionKind" },
		mandatories = { true, true }, listDepths = { 0, 1 }, itemsMandatory = { false, true })
	@GraphQLNonScalar(fieldName = "grantUserPermissions", graphQLTypeSimpleName = "User", javaClass = User.class,
		listDepth = 0)
	User grantUserPermissions;

	/**
	 * Revokes permissions from a user. The specified permissions are removed from the user; other permissions remain
	 * intact.
	 */
	@JsonProperty("revokeUserPermissions")
	@GraphQLInputParameters(names = { "userId", "permissions" }, types = { "ID", "PermissionKind" },
		mandatories = { true, true }, listDepths = { 0, 1 }, itemsMandatory = { false, true })
	@GraphQLNonScalar(fieldName = "revokeUserPermissions", graphQLTypeSimpleName = "User", javaClass = User.class,
		listDepth = 0)
	User revokeUserPermissions;

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String __typename;

	/**
	 * Creates a new claim.
	 */
	@JsonProperty("createClaim")
	public void setCreateClaim(Claim createClaim) {
		this.createClaim = createClaim;
	}

	/**
	 * Creates a new claim.
	 */
	@JsonProperty("createClaim")
	public Claim getCreateClaim() {
		return this.createClaim;
	}

	/**
	 * Updates an existing claim.
	 */
	@JsonProperty("updateClaim")
	public void setUpdateClaim(Claim updateClaim) {
		this.updateClaim = updateClaim;
	}

	/**
	 * Updates an existing claim.
	 */
	@JsonProperty("updateClaim")
	public Claim getUpdateClaim() {
		return this.updateClaim;
	}

	/**
	 * Deletes an existing claim.
	 */
	@JsonProperty("deleteClaim")
	public void setDeleteClaim(Claim deleteClaim) {
		this.deleteClaim = deleteClaim;
	}

	/**
	 * Deletes an existing claim.
	 */
	@JsonProperty("deleteClaim")
	public Claim getDeleteClaim() {
		return this.deleteClaim;
	}

	/**
	 * Creates a new declaration.
	 */
	@JsonProperty("createDeclaration")
	public void setCreateDeclaration(Declaration createDeclaration) {
		this.createDeclaration = createDeclaration;
	}

	/**
	 * Creates a new declaration.
	 */
	@JsonProperty("createDeclaration")
	public Declaration getCreateDeclaration() {
		return this.createDeclaration;
	}

	/**
	 * Updates an existing declaration.
	 */
	@JsonProperty("updateDeclaration")
	public void setUpdateDeclaration(Declaration updateDeclaration) {
		this.updateDeclaration = updateDeclaration;
	}

	/**
	 * Updates an existing declaration.
	 */
	@JsonProperty("updateDeclaration")
	public Declaration getUpdateDeclaration() {
		return this.updateDeclaration;
	}

	/**
	 * Deletes an existing declaration.
	 */
	@JsonProperty("deleteDeclaration")
	public void setDeleteDeclaration(Declaration deleteDeclaration) {
		this.deleteDeclaration = deleteDeclaration;
	}

	/**
	 * Deletes an existing declaration.
	 */
	@JsonProperty("deleteDeclaration")
	public Declaration getDeleteDeclaration() {
		return this.deleteDeclaration;
	}

	/**
	 * Create a new journal.
	 */
	@JsonProperty("createJournal")
	public void setCreateJournal(Journal createJournal) {
		this.createJournal = createJournal;
	}

	/**
	 * Create a new journal.
	 */
	@JsonProperty("createJournal")
	public Journal getCreateJournal() {
		return this.createJournal;
	}

	/**
	 * Updates an existing journal.
	 */
	@JsonProperty("updateJournal")
	public void setUpdateJournal(Journal updateJournal) {
		this.updateJournal = updateJournal;
	}

	/**
	 * Updates an existing journal.
	 */
	@JsonProperty("updateJournal")
	public Journal getUpdateJournal() {
		return this.updateJournal;
	}

	/**
	 * Deletes an existing journal.
	 */
	@JsonProperty("deleteJournal")
	public void setDeleteJournal(Journal deleteJournal) {
		this.deleteJournal = deleteJournal;
	}

	/**
	 * Deletes an existing journal.
	 */
	@JsonProperty("deleteJournal")
	public Journal getDeleteJournal() {
		return this.deleteJournal;
	}

	/**
	 * Creates a new person.
	 */
	@JsonProperty("createPerson")
	public void setCreatePerson(Person createPerson) {
		this.createPerson = createPerson;
	}

	/**
	 * Creates a new person.
	 */
	@JsonProperty("createPerson")
	public Person getCreatePerson() {
		return this.createPerson;
	}

	/**
	 * Updates an existing person.
	 */
	@JsonProperty("updatePerson")
	public void setUpdatePerson(Person updatePerson) {
		this.updatePerson = updatePerson;
	}

	/**
	 * Updates an existing person.
	 */
	@JsonProperty("updatePerson")
	public Person getUpdatePerson() {
		return this.updatePerson;
	}

	/**
	 * Deletes an existing person.
	 */
	@JsonProperty("deletePerson")
	public void setDeletePerson(Person deletePerson) {
		this.deletePerson = deletePerson;
	}

	/**
	 * Deletes an existing person.
	 */
	@JsonProperty("deletePerson")
	public Person getDeletePerson() {
		return this.deletePerson;
	}

	/**
	 * Creates a new publication.
	 */
	@JsonProperty("createPublication")
	public void setCreatePublication(Publication createPublication) {
		this.createPublication = createPublication;
	}

	/**
	 * Creates a new publication.
	 */
	@JsonProperty("createPublication")
	public Publication getCreatePublication() {
		return this.createPublication;
	}

	/**
	 * Updates an existing publication.
	 */
	@JsonProperty("updatePublication")
	public void setUpdatePublication(Publication updatePublication) {
		this.updatePublication = updatePublication;
	}

	/**
	 * Updates an existing publication.
	 */
	@JsonProperty("updatePublication")
	public Publication getUpdatePublication() {
		return this.updatePublication;
	}

	/**
	 * Deletes an existing publication.
	 */
	@JsonProperty("deletePublication")
	public void setDeletePublication(Publication deletePublication) {
		this.deletePublication = deletePublication;
	}

	/**
	 * Deletes an existing publication.
	 */
	@JsonProperty("deletePublication")
	public Publication getDeletePublication() {
		return this.deletePublication;
	}

	/**
	 * Creates a new publisher.
	 */
	@JsonProperty("createPublisher")
	public void setCreatePublisher(Publisher createPublisher) {
		this.createPublisher = createPublisher;
	}

	/**
	 * Creates a new publisher.
	 */
	@JsonProperty("createPublisher")
	public Publisher getCreatePublisher() {
		return this.createPublisher;
	}

	/**
	 * Updates an existing publisher.
	 */
	@JsonProperty("updatePublisher")
	public void setUpdatePublisher(Publisher updatePublisher) {
		this.updatePublisher = updatePublisher;
	}

	/**
	 * Updates an existing publisher.
	 */
	@JsonProperty("updatePublisher")
	public Publisher getUpdatePublisher() {
		return this.updatePublisher;
	}

	/**
	 * Deletes an existing publisher.
	 */
	@JsonProperty("deletePublisher")
	public void setDeletePublisher(Publisher deletePublisher) {
		this.deletePublisher = deletePublisher;
	}

	/**
	 * Deletes an existing publisher.
	 */
	@JsonProperty("deletePublisher")
	public Publisher getDeletePublisher() {
		return this.deletePublisher;
	}

	/**
	 * Creates a new quotation.
	 */
	@JsonProperty("createQuotation")
	public void setCreateQuotation(Quotation createQuotation) {
		this.createQuotation = createQuotation;
	}

	/**
	 * Creates a new quotation.
	 */
	@JsonProperty("createQuotation")
	public Quotation getCreateQuotation() {
		return this.createQuotation;
	}

	/**
	 * Updates an existing quotation.
	 */
	@JsonProperty("updateQuotation")
	public void setUpdateQuotation(Quotation updateQuotation) {
		this.updateQuotation = updateQuotation;
	}

	/**
	 * Updates an existing quotation.
	 */
	@JsonProperty("updateQuotation")
	public Quotation getUpdateQuotation() {
		return this.updateQuotation;
	}

	/**
	 * Deletes an existing quotation.
	 */
	@JsonProperty("deleteQuotation")
	public void setDeleteQuotation(Quotation deleteQuotation) {
		this.deleteQuotation = deleteQuotation;
	}

	/**
	 * Deletes an existing quotation.
	 */
	@JsonProperty("deleteQuotation")
	public Quotation getDeleteQuotation() {
		return this.deleteQuotation;
	}

	/**
	 * Creates a new topic.
	 */
	@JsonProperty("createTopic")
	public void setCreateTopic(Topic createTopic) {
		this.createTopic = createTopic;
	}

	/**
	 * Creates a new topic.
	 */
	@JsonProperty("createTopic")
	public Topic getCreateTopic() {
		return this.createTopic;
	}

	/**
	 * Updates an existing topic.
	 */
	@JsonProperty("updateTopic")
	public void setUpdateTopic(Topic updateTopic) {
		this.updateTopic = updateTopic;
	}

	/**
	 * Updates an existing topic.
	 */
	@JsonProperty("updateTopic")
	public Topic getUpdateTopic() {
		return this.updateTopic;
	}

	/**
	 * Deletes an existing topic.
	 */
	@JsonProperty("deleteTopic")
	public void setDeleteTopic(Topic deleteTopic) {
		this.deleteTopic = deleteTopic;
	}

	/**
	 * Deletes an existing topic.
	 */
	@JsonProperty("deleteTopic")
	public Topic getDeleteTopic() {
		return this.deleteTopic;
	}

	/**
	 * Adds a new topic reference.
	 */
	@JsonProperty("addTopicRef")
	public void setAddTopicRef(TopicRef addTopicRef) {
		this.addTopicRef = addTopicRef;
	}

	/**
	 * Adds a new topic reference.
	 */
	@JsonProperty("addTopicRef")
	public TopicRef getAddTopicRef() {
		return this.addTopicRef;
	}

	/**
	  * Updates an existing topic reference.
 	 */
	@JsonProperty("updateTopicRef")
	public void setUpdateTopicRef(TopicRef updateTopicRef) {
		this.updateTopicRef = updateTopicRef;
	}

	/**
	 * Updates an existing topic reference.
	 */
	@JsonProperty("updateTopicRef")
	public TopicRef getUpdateTopicRef() {
		return this.updateTopicRef;
	}
		  
	/**
	 * Removes a topic reference.
	 */
	@JsonProperty("removeTopicRef")
	public void setRemoveTopicRef(Boolean removeTopicRef) {
		this.removeTopicRef = removeTopicRef;
	}

	/**
	 * Removes a topic reference.
	 */
	@JsonProperty("removeTopicRef")
	public Boolean getRemoveTopicRef() {
		return this.removeTopicRef;
	}

	/**
	 * Links two entities.
	 */
	@JsonProperty("linkEntities")
	public void setLinkEntities(Boolean linkEntities) {
		this.linkEntities = linkEntities;
	}

	/**
	 * Links two entities.
	 */
	@JsonProperty("linkEntities")
	public Boolean getLinkEntities() {
		return this.linkEntities;
	}

	/**
	 * Unlinks two linked entities.
	 */
	@JsonProperty("unlinkEntities")
	public void setUnlinkEntities(Boolean unlinkEntities) {
		this.unlinkEntities = unlinkEntities;
	}

	/**
	 * Unlinks two linked entities.
	 */
	@JsonProperty("unlinkEntities")
	public Boolean getUnlinkEntities() {
		return this.unlinkEntities;
	}

	/**
	 * Sets entity status.
	 */
	@JsonProperty("setEntityStatus")
	public void setSetEntityStatus(Boolean setEntityStatus) {
		this.setEntityStatus = setEntityStatus;
	}

	/**
	 * Sets entity status.
	 */
	@JsonProperty("setEntityStatus")
	public Boolean getSetEntityStatus() {
		return this.setEntityStatus;
	}

	/**
	 * Creates a new user.
	 */
	@JsonProperty("createUser")
	public void setCreateUser(User createUser) {
		this.createUser = createUser;
	}

	/**
	 * Creates a new user.
	 */
	@JsonProperty("createUser")
	public User getCreateUser() {
		return this.createUser;
	}

	/**
	 * Updates an existing user.
	 */
	@JsonProperty("updateUser")
	public void setUpdateUser(User updateUser) {
		this.updateUser = updateUser;
	}

	/**
	 * Updates an existing user.
	 */
	@JsonProperty("updateUser")
	public User getUpdateUser() {
		return this.updateUser;
	}

	/**
	 * Updates an existing user.
	 */
	@JsonProperty("deleteUser")
	public void setDeleteUser(User deleteUser) {
		this.deleteUser = deleteUser;
	}

	/**
	 * Updates an existing user.
	 */
	@JsonProperty("deleteUser")
	public User getDeleteUser() {
		return this.deleteUser;
	}

	/**
	 * Grants permissions to a user. The specified permissions are added to any existing ones.
	 */
	@JsonProperty("grantUserPermissions")
	public void setGrantUserPermissions(User grantUserPermissions) {
		this.grantUserPermissions = grantUserPermissions;
	}

	/**
	 * Grants permissions to a user. The specified permissions are added to any existing ones.
	 */
	@JsonProperty("grantUserPermissions")
	public User getGrantUserPermissions() {
		return this.grantUserPermissions;
	}

	/**
	 * Revokes permissions from a user. The specified permissions are removed from the user; other permissions remain
	 * intact.
	 */
	@JsonProperty("revokeUserPermissions")
	public void setRevokeUserPermissions(User revokeUserPermissions) {
		this.revokeUserPermissions = revokeUserPermissions;
	}

	/**
	 * Revokes permissions from a user. The specified permissions are removed from the user; other permissions remain
	 * intact.
	 */
	@JsonProperty("revokeUserPermissions")
	public User getRevokeUserPermissions() {
		return this.revokeUserPermissions;
	}

	@JsonProperty("__typename")
	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	@JsonProperty("__typename")
	public String get__typename() {
		return this.__typename;
	}

	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		this.aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return this.aliasValues.get(alias);
	}

	public String toString() {
		return "Mutation {" //$NON-NLS-1$
			+ "createClaim: " + this.createClaim //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updateClaim: " + this.updateClaim //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "deleteClaim: " + this.deleteClaim //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "createDeclaration: " + this.createDeclaration //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updateDeclaration: " + this.updateDeclaration //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "deleteDeclaration: " + this.deleteDeclaration //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "createJournal: " + this.createJournal //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updateJournal: " + this.updateJournal //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "deleteJournal: " + this.deleteJournal //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "createPerson: " + this.createPerson //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updatePerson: " + this.updatePerson //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "deletePerson: " + this.deletePerson //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "createPublication: " + this.createPublication //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updatePublication: " + this.updatePublication //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "deletePublication: " + this.deletePublication //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "createPublisher: " + this.createPublisher //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updatePublisher: " + this.updatePublisher //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "deletePublisher: " + this.deletePublisher //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "createQuotation: " + this.createQuotation //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updateQuotation: " + this.updateQuotation //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "deleteQuotation: " + this.deleteQuotation //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "createTopic: " + this.createTopic //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updateTopic: " + this.updateTopic //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "deleteTopic: " + this.deleteTopic //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "addTopicRef: " + this.addTopicRef //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updateTopicRef: " + this.updateTopicRef //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "removeTopicRef: " + this.removeTopicRef //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "linkEntities: " + this.linkEntities //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "unlinkEntities: " + this.unlinkEntities //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "setEntityStatus: " + this.setEntityStatus //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "createUser: " + this.createUser //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updateUser: " + this.updateUser //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "deleteUser: " + this.deleteUser //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "grantUserPermissions: " + this.grantUserPermissions //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "revokeUserPermissions: " + this.revokeUserPermissions //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "__typename: " + this.__typename //$NON-NLS-1$
			+ "}"; //$NON-NLS-1$
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private Claim createClaim;
		private Claim updateClaim;
		private Claim deleteClaim;
		private Declaration createDeclaration;
		private Declaration updateDeclaration;
		private Declaration deleteDeclaration;
		private Journal createJournal;
		private Journal updateJournal;
		private Journal deleteJournal;
		private Person createPerson;
		private Person updatePerson;
		private Person deletePerson;
		private Publication createPublication;
		private Publication updatePublication;
		private Publication deletePublication;
		private Publisher createPublisher;
		private Publisher updatePublisher;
		private Publisher deletePublisher;
		private Quotation createQuotation;
		private Quotation updateQuotation;
		private Quotation deleteQuotation;
		private Topic createTopic;
		private Topic updateTopic;
		private Topic deleteTopic;
		private TopicRef addTopicRef;
		private TopicRef updateTopicRef;
		private Boolean removeTopicRef;
		private Boolean linkEntities;
		private Boolean unlinkEntities;
		private Boolean setEntityStatus;
		private User createUser;
		private User updateUser;
		private User deleteUser;
		private User grantUserPermissions;
		private User revokeUserPermissions;

		/**
		 * Creates a new claim.
		 */
		public Builder withCreateClaim(Claim createClaimParam) {
			this.createClaim = createClaimParam;
			return this;
		}

		/**
		 * Updates an existing claim.
		 */
		public Builder withUpdateClaim(Claim updateClaimParam) {
			this.updateClaim = updateClaimParam;
			return this;
		}

		/**
		 * Deletes an existing claim.
		 */
		public Builder withDeleteClaim(Claim deleteClaimParam) {
			this.deleteClaim = deleteClaimParam;
			return this;
		}

		/**
		 * Creates a new declaration.
		 */
		public Builder withCreateDeclaration(Declaration createDeclarationParam) {
			this.createDeclaration = createDeclarationParam;
			return this;
		}

		/**
		 * Updates an existing declaration.
		 */
		public Builder withUpdateDeclaration(Declaration updateDeclarationParam) {
			this.updateDeclaration = updateDeclarationParam;
			return this;
		}

		/**
		 * Deletes an existing declaration.
		 */
		public Builder withDeleteDeclaration(Declaration deleteDeclarationParam) {
			this.deleteDeclaration = deleteDeclarationParam;
			return this;
		}

		/**
		 * Create a new journal.
		 */
		public Builder withCreateJournal(Journal createJournalParam) {
			this.createJournal = createJournalParam;
			return this;
		}

		/**
		 * Updates an existing journal.
		 */
		public Builder withUpdateJournal(Journal updateJournalParam) {
			this.updateJournal = updateJournalParam;
			return this;
		}

		/**
		 * Deletes an existing journal.
		 */
		public Builder withDeleteJournal(Journal deleteJournalParam) {
			this.deleteJournal = deleteJournalParam;
			return this;
		}

		/**
		 * Creates a new person.
		 */
		public Builder withCreatePerson(Person createPersonParam) {
			this.createPerson = createPersonParam;
			return this;
		}

		/**
		 * Updates an existing person.
		 */
		public Builder withUpdatePerson(Person updatePersonParam) {
			this.updatePerson = updatePersonParam;
			return this;
		}

		/**
		 * Deletes an existing person.
		 */
		public Builder withDeletePerson(Person deletePersonParam) {
			this.deletePerson = deletePersonParam;
			return this;
		}

		/**
		 * Creates a new publication.
		 */
		public Builder withCreatePublication(Publication createPublicationParam) {
			this.createPublication = createPublicationParam;
			return this;
		}

		/**
		 * Updates an existing publication.
		 */
		public Builder withUpdatePublication(Publication updatePublicationParam) {
			this.updatePublication = updatePublicationParam;
			return this;
		}

		/**
		 * Deletes an existing publication.
		 */
		public Builder withDeletePublication(Publication deletePublicationParam) {
			this.deletePublication = deletePublicationParam;
			return this;
		}

		/**
		 * Creates a new publisher.
		 */
		public Builder withCreatePublisher(Publisher createPublisherParam) {
			this.createPublisher = createPublisherParam;
			return this;
		}

		/**
		 * Updates an existing publisher.
		 */
		public Builder withUpdatePublisher(Publisher updatePublisherParam) {
			this.updatePublisher = updatePublisherParam;
			return this;
		}

		/**
		 * Deletes an existing publisher.
		 */
		public Builder withDeletePublisher(Publisher deletePublisherParam) {
			this.deletePublisher = deletePublisherParam;
			return this;
		}

		/**
		 * Creates a new quotation.
		 */
		public Builder withCreateQuotation(Quotation createQuotationParam) {
			this.createQuotation = createQuotationParam;
			return this;
		}

		/**
		 * Updates an existing quotation.
		 */
		public Builder withUpdateQuotation(Quotation updateQuotationParam) {
			this.updateQuotation = updateQuotationParam;
			return this;
		}

		/**
		 * Deletes an existing quotation.
		 */
		public Builder withDeleteQuotation(Quotation deleteQuotationParam) {
			this.deleteQuotation = deleteQuotationParam;
			return this;
		}

		/**
		 * Creates a new topic.
		 */
		public Builder withCreateTopic(Topic createTopicParam) {
			this.createTopic = createTopicParam;
			return this;
		}

		/**
		 * Updates an existing topic.
		 */
		public Builder withUpdateTopic(Topic updateTopicParam) {
			this.updateTopic = updateTopicParam;
			return this;
		}

		/**
		 * Deletes an existing topic.
		 */
		public Builder withDeleteTopic(Topic deleteTopicParam) {
			this.deleteTopic = deleteTopicParam;
			return this;
		}

		/**
		 * Adds a new topic reference.
		 */
		public Builder withAddTopicRef(TopicRef addTopicRefParam) {
			this.addTopicRef = addTopicRefParam;
			return this;
		}

		/**
		 * Updates an existing topic reference.
		 */
		public Builder withUpdateTopicRef(TopicRef updateTopicRefParam) {
			this.updateTopicRef = updateTopicRefParam;
			return this;
		}

		/**
		 * Removes a topic reference.
		 */
		public Builder withRemoveTopicRef(Boolean removeTopicRefParam) {
			this.removeTopicRef = removeTopicRefParam;
			return this;
		}

		/**
		 * Links two entities.
		 */
		public Builder withLinkEntities(Boolean linkEntitiesParam) {
			this.linkEntities = linkEntitiesParam;
			return this;
		}

		/**
		 * Unlinks two linked entities.
		 */
		public Builder withUnlinkEntities(Boolean unlinkEntitiesParam) {
			this.unlinkEntities = unlinkEntitiesParam;
			return this;
		}

		/**
		 * Sets entity status.
		 */
		public Builder withSetEntityStatus(Boolean setEntityStatusParam) {
			this.setEntityStatus = setEntityStatusParam;
			return this;
		}

		/**
		 * Creates a new user.
		 */
		public Builder withCreateUser(User createUserParam) {
			this.createUser = createUserParam;
			return this;
		}

		/**
		 * Updates an existing user.
		 */
		public Builder withUpdateUser(User updateUserParam) {
			this.updateUser = updateUserParam;
			return this;
		}

		/**
		 * Updates an existing user.
		 */
		public Builder withDeleteUser(User deleteUserParam) {
			this.deleteUser = deleteUserParam;
			return this;
		}

		/**
		 * Grants permissions to a user. The specified permissions are added to any existing ones.
		 */
		public Builder withGrantUserPermissions(User grantUserPermissionsParam) {
			this.grantUserPermissions = grantUserPermissionsParam;
			return this;
		}

		/**
		 * Revokes permissions from a user. The specified permissions are removed from the user; other permissions
		 * remain intact.
		 */
		public Builder withRevokeUserPermissions(User revokeUserPermissionsParam) {
			this.revokeUserPermissions = revokeUserPermissionsParam;
			return this;
		}

		public Mutation build() {
			Mutation _object = new Mutation();
			_object.setCreateClaim(this.createClaim);
			_object.setUpdateClaim(this.updateClaim);
			_object.setDeleteClaim(this.deleteClaim);
			_object.setCreateDeclaration(this.createDeclaration);
			_object.setUpdateDeclaration(this.updateDeclaration);
			_object.setDeleteDeclaration(this.deleteDeclaration);
			_object.setCreateJournal(this.createJournal);
			_object.setUpdateJournal(this.updateJournal);
			_object.setDeleteJournal(this.deleteJournal);
			_object.setCreatePerson(this.createPerson);
			_object.setUpdatePerson(this.updatePerson);
			_object.setDeletePerson(this.deletePerson);
			_object.setCreatePublication(this.createPublication);
			_object.setUpdatePublication(this.updatePublication);
			_object.setDeletePublication(this.deletePublication);
			_object.setCreatePublisher(this.createPublisher);
			_object.setUpdatePublisher(this.updatePublisher);
			_object.setDeletePublisher(this.deletePublisher);
			_object.setCreateQuotation(this.createQuotation);
			_object.setUpdateQuotation(this.updateQuotation);
			_object.setDeleteQuotation(this.deleteQuotation);
			_object.setCreateTopic(this.createTopic);
			_object.setUpdateTopic(this.updateTopic);
			_object.setDeleteTopic(this.deleteTopic);
			_object.setAddTopicRef(this.addTopicRef);
			_object.setUpdateTopicRef(this.updateTopicRef);
			_object.setRemoveTopicRef(this.removeTopicRef);
			_object.setLinkEntities(this.linkEntities);
			_object.setUnlinkEntities(this.unlinkEntities);
			_object.setSetEntityStatus(this.setEntityStatus);
			_object.setCreateUser(this.createUser);
			_object.setUpdateUser(this.updateUser);
			_object.setDeleteUser(this.deleteUser);
			_object.setGrantUserPermissions(this.grantUserPermissions);
			_object.setRevokeUserPermissions(this.revokeUserPermissions);
			_object.set__typename("Mutation"); //$NON-NLS-1$
			return _object;
		}
	}
	private ObjectMapper getMapper() {
		if (this.mapper == null) {
			this.mapper = new ObjectMapper();
		}
		return this.mapper;
	}

	public JsonNode getExtensions() {
		return this.extensions;
	}

	public void setExtensions(JsonNode extensionsParam) {
		this.extensions = extensionsParam;
	}

	/**
	 * Returns the extensions as a map. The values can't be deserialized, as their type is unknown.
	 * @return
	 */
	public Map<String, JsonNode> getExtensionsAsMap() {
		if (this.extensionsAsMap == null) {
			this.extensionsAsMap =
				new ObjectMapper().convertValue(this.extensions, new TypeReference<Map<String, JsonNode>>() {
					// Empty bloc
				});
		}
		return this.extensionsAsMap;
	}

	/**
	 * Parse the value for the given _key_, as found in the <I>extensions</I> field of the GraphQL server's response,
	 * into the given _t_ class.
	 * @param <T>
	 * @param key
	 * @param t
	 * @return null if the key is not in the <I>extensions</I> map. Otherwise: the value for this _key_, as a _t_
	 * instance
	 * @throws JsonProcessingException When there is an error when converting the key's value into the _t_ class
	 */
	public <T> T getExtensionsField(String key, Class<T> t) throws JsonProcessingException {
		JsonNode node = getExtensionsAsMap().get(key);
		return (node == null) ? null : getMapper().treeToValue(node, t);
	}

}
