/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.graphql_java_generator.annotation.GraphQLDirective;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLQuery;
import com.graphql_java_generator.annotation.GraphQLScalar;
import com.graphql_java_generator.annotation.RequestType;
import com.graphql_java_generator.client.GraphQLRequestObject;

/**
 * Available mutations.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLQuery(name = "Mutation", type = RequestType.mutation)
@GraphQLObjectType("Mutation")
@JsonInclude(Include.NON_NULL)
public class Mutation extends AbstractGraphQLEntity implements GraphQLRequestObject {

	private ObjectMapper mapper = null;
	private JsonNode extensions;
	private Map<String, JsonNode> extensionsAsMap = null;

	public Mutation() {
	}

	/**
	 * Creates a new claim.
	 */
	@JsonProperty("createClaim")
	@GraphQLInputParameters(names = { "claim" }, types = { "ClaimInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createClaim", graphQLTypeSimpleName = "Claim", javaClass = Claim.class,
		listDepth = 0)
	Claim createClaim;

	/**
	 * Updates an existing claim.
	 */
	@JsonProperty("updateClaim")
	@GraphQLInputParameters(names = { "claim" }, types = { "ClaimInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updateClaim", graphQLTypeSimpleName = "Claim", javaClass = Claim.class,
		listDepth = 0)
	Claim updateClaim;

	/**
	 * Deletes an existing claim.
	 */
	@JsonProperty("deleteClaim")
	@GraphQLInputParameters(names = { "claimId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deleteClaim", graphQLTypeSimpleName = "Claim", javaClass = Claim.class, listDepth = 0)
	Claim deleteClaim;

	/**
	 * Creates a new declaration.
	 */
	@JsonProperty("createDeclaration")
	@GraphQLInputParameters(names = { "declaration" }, types = { "DeclarationInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createDeclaration", graphQLTypeSimpleName = "Declaration",
		javaClass = Declaration.class, listDepth = 0)
	Declaration createDeclaration;

	/**
	 * Updates an existing declaration.
	 */
	@JsonProperty("updateDeclaration")
	@GraphQLInputParameters(names = { "declaration" }, types = { "DeclarationInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updateDeclaration", graphQLTypeSimpleName = "Declaration",
		javaClass = Declaration.class, listDepth = 0)
	Declaration updateDeclaration;

	/**
	 * Deletes an existing declaration.
	 */
	@JsonProperty("deleteDeclaration")
	@GraphQLInputParameters(names = { "declarationId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deleteDeclaration", graphQLTypeSimpleName = "Declaration",
		javaClass = Declaration.class, listDepth = 0)
	Declaration deleteDeclaration;

	/**
	 * Creates an entity link.
	 */
	@JsonProperty("createEntityLink")
	@GraphQLInputParameters(names = { "entityLink" }, types = { "EntityLinkInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createEntityLink", graphQLTypeSimpleName = "EntityLink",
		javaClass = EntityLink.class, listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[LNK]" })
	EntityLink createEntityLink;

	/**
	 * Updates an existing entity link.
	 */
	@JsonProperty("updateEntityLink")
	@GraphQLInputParameters(names = { "entityLink" }, types = { "EntityLinkInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updateEntityLink", graphQLTypeSimpleName = "EntityLink",
		javaClass = EntityLink.class, listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[LNK]" })
	EntityLink updateEntityLink;

	/**
	 * Deletes an entity link.
	 */
	@JsonProperty("deleteEntityLink")
	@GraphQLInputParameters(names = { "entityLinkId" }, types = { "Long" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "deleteEntityLink", graphQLTypeSimpleName = "EntityLink",
		javaClass = EntityLink.class, listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[LNK]" })
	EntityLink deleteEntityLink;

	/**
	 * Create a new journal.
	 */
	@JsonProperty("createJournal")
	@GraphQLInputParameters(names = { "journal" }, types = { "JournalInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createJournal", graphQLTypeSimpleName = "Journal", javaClass = Journal.class,
		listDepth = 0)
	Journal createJournal;

	/**
	 * Updates an existing journal.
	 */
	@JsonProperty("updateJournal")
	@GraphQLInputParameters(names = { "journal" }, types = { "JournalInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updateJournal", graphQLTypeSimpleName = "Journal", javaClass = Journal.class,
		listDepth = 0)
	Journal updateJournal;

	/**
	 * Deletes an existing journal.
	 */
	@JsonProperty("deleteJournal")
	@GraphQLInputParameters(names = { "journalId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deleteJournal", graphQLTypeSimpleName = "Journal", javaClass = Journal.class,
		listDepth = 0)
	Journal deleteJournal;

	/**
	 * Creates a new person.
	 */
	@JsonProperty("createPerson")
	@GraphQLInputParameters(names = { "person" }, types = { "PersonInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createPerson", graphQLTypeSimpleName = "Person", javaClass = Person.class,
		listDepth = 0)
	Person createPerson;

	/**
	 * Updates an existing person.
	 */
	@JsonProperty("updatePerson")
	@GraphQLInputParameters(names = { "person" }, types = { "PersonInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updatePerson", graphQLTypeSimpleName = "Person", javaClass = Person.class,
		listDepth = 0)
	Person updatePerson;

	/**
	 * Deletes an existing person.
	 */
	@JsonProperty("deletePerson")
	@GraphQLInputParameters(names = { "personId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deletePerson", graphQLTypeSimpleName = "Person", javaClass = Person.class,
		listDepth = 0)
	Person deletePerson;

	/**
	 * Creates a new publication.
	 */
	@JsonProperty("createPublication")
	@GraphQLInputParameters(names = { "publication" }, types = { "PublicationInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createPublication", graphQLTypeSimpleName = "Publication",
		javaClass = Publication.class, listDepth = 0)
	Publication createPublication;

	/**
	 * Updates an existing publication.
	 */
	@JsonProperty("updatePublication")
	@GraphQLInputParameters(names = { "publication" }, types = { "PublicationInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updatePublication", graphQLTypeSimpleName = "Publication",
		javaClass = Publication.class, listDepth = 0)
	Publication updatePublication;

	/**
	 * Deletes an existing publication.
	 */
	@JsonProperty("deletePublication")
	@GraphQLInputParameters(names = { "publicationId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deletePublication", graphQLTypeSimpleName = "Publication",
		javaClass = Publication.class, listDepth = 0)
	Publication deletePublication;

	/**
	 * Creates a new publisher.
	 */
	@JsonProperty("createPublisher")
	@GraphQLInputParameters(names = { "publisher" }, types = { "PublisherInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createPublisher", graphQLTypeSimpleName = "Publisher", javaClass = Publisher.class,
		listDepth = 0)
	Publisher createPublisher;

	/**
	 * Updates an existing publisher.
	 */
	@JsonProperty("updatePublisher")
	@GraphQLInputParameters(names = { "publisher" }, types = { "PublisherInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updatePublisher", graphQLTypeSimpleName = "Publisher", javaClass = Publisher.class,
		listDepth = 0)
	Publisher updatePublisher;

	/**
	 * Deletes an existing publisher.
	 */
	@JsonProperty("deletePublisher")
	@GraphQLInputParameters(names = { "publisherId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deletePublisher", graphQLTypeSimpleName = "Publisher", javaClass = Publisher.class,
		listDepth = 0)
	Publisher deletePublisher;

	/**
	 * Creates a new quotation.
	 */
	@JsonProperty("createQuotation")
	@GraphQLInputParameters(names = { "quotation" }, types = { "QuotationInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createQuotation", graphQLTypeSimpleName = "Quotation", javaClass = Quotation.class,
		listDepth = 0)
	Quotation createQuotation;

	/**
	 * Updates an existing quotation.
	 */
	@JsonProperty("updateQuotation")
	@GraphQLInputParameters(names = { "quotation" }, types = { "QuotationInput" }, mandatories = { true },
		listDepths = { 0 }, itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updateQuotation", graphQLTypeSimpleName = "Quotation", javaClass = Quotation.class,
		listDepth = 0)
	Quotation updateQuotation;

	/**
	 * Deletes an existing quotation.
	 */
	@JsonProperty("deleteQuotation")
	@GraphQLInputParameters(names = { "quotationId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deleteQuotation", graphQLTypeSimpleName = "Quotation", javaClass = Quotation.class,
		listDepth = 0)
	Quotation deleteQuotation;

	/**
	 * Creates a new topic.
	 */
	@JsonProperty("createTopic")
	@GraphQLInputParameters(names = { "topic" }, types = { "TopicInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createTopic", graphQLTypeSimpleName = "Topic", javaClass = Topic.class,
		listDepth = 0)
	Topic createTopic;

	/**
	 * Updates an existing topic.
	 */
	@JsonProperty("updateTopic")
	@GraphQLInputParameters(names = { "topic" }, types = { "TopicInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updateTopic", graphQLTypeSimpleName = "Topic", javaClass = Topic.class,
		listDepth = 0)
	Topic updateTopic;

	/**
	 * Deletes an existing topic.
	 */
	@JsonProperty("deleteTopic")
	@GraphQLInputParameters(names = { "topicId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deleteTopic", graphQLTypeSimpleName = "Topic", javaClass = Topic.class, listDepth = 0)
	Topic deleteTopic;

	/**
	 * Sets entity status.
	 */
	@JsonProperty("setEntityStatus")
	@GraphQLInputParameters(names = { "entityKind", "entityId", "status" },
		types = { "EntityKind", "Long", "StatusKind" }, mandatories = { true, true, true }, listDepths = { 0, 0, 0 },
		itemsMandatory = { false, false, false })
	@GraphQLScalar(fieldName = "setEntityStatus", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class,
		listDepth = 0)
	Boolean setEntityStatus;

	/**
	 * Creates a new user.
	 */
	@JsonProperty("createUser")
	@GraphQLInputParameters(names = { "user" }, types = { "UserInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createUser", graphQLTypeSimpleName = "User", javaClass = User.class, listDepth = 0)
	User createUser;

	/**
	 * Updates an existing user.
	 */
	@JsonProperty("updateUser")
	@GraphQLInputParameters(names = { "user" }, types = { "UserInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updateUser", graphQLTypeSimpleName = "User", javaClass = User.class, listDepth = 0)
	User updateUser;

	/**
	 * Deletes an existing user.
	 */
	@JsonProperty("deleteUser")
	@GraphQLInputParameters(names = { "userId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deleteUser", graphQLTypeSimpleName = "User", javaClass = User.class, listDepth = 0)
	User deleteUser;

	/**
	 * Grants authorities to a user. The specified authorities are added to any existing ones.
	 */
	@JsonProperty("grantUserAuthorities")
	@GraphQLInputParameters(names = { "userId", "authorities" }, types = { "ID", "AuthorityKind" },
		mandatories = { true, true }, listDepths = { 0, 1 }, itemsMandatory = { false, true })
	@GraphQLNonScalar(fieldName = "grantUserAuthorities", graphQLTypeSimpleName = "User", javaClass = User.class,
		listDepth = 0)
	User grantUserAuthorities;

	/**
	 * Revokes authorities from a user. The specified authorities are removed from the user; other authorities remain
	 * intact.
	 */
	@JsonProperty("revokeUserAuthorities")
	@GraphQLInputParameters(names = { "userId", "authorities" }, types = { "ID", "AuthorityKind" },
		mandatories = { true, true }, listDepths = { 0, 1 }, itemsMandatory = { false, true })
	@GraphQLNonScalar(fieldName = "revokeUserAuthorities", graphQLTypeSimpleName = "User", javaClass = User.class,
		listDepth = 0)
	User revokeUserAuthorities;

	/**
	 * Creates a new group.
	 */
	@JsonProperty("createGroup")
	@GraphQLInputParameters(names = { "group" }, types = { "GroupInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "createGroup", graphQLTypeSimpleName = "Group", javaClass = Group.class, listDepth = 0)
	Group createGroup;

	/**
	 * Updates an existing group.
	 */
	@JsonProperty("updateGroup")
	@GraphQLInputParameters(names = { "group" }, types = { "GroupInput" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLNonScalar(fieldName = "updateGroup", graphQLTypeSimpleName = "Group", javaClass = Group.class, listDepth = 0)
	Group updateGroup;

	/**
	 * Deletes an existing group.
	 */
	@JsonProperty("deleteGroup")
	@GraphQLInputParameters(names = { "groupId" }, types = { "ID" }, mandatories = { true }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "deleteGroup", graphQLTypeSimpleName = "Group", javaClass = Group.class, listDepth = 0)
	Group deleteGroup;

	/**
	 * Adds a user to a group.
	 */
	@JsonProperty("addGroupMember")
	@GraphQLInputParameters(names = {"groupId", "userId"}, types = {"ID", "ID"}, mandatories = {true, true}, listDepths = {0, 0}, itemsMandatory = {false, false})
	@GraphQLNonScalar( fieldName = "addGroupMember", graphQLTypeSimpleName = "Group", javaClass = Group.class, listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	Group addGroupMember;

	/**
	 * Removes a user from a group.
	 */
	@JsonProperty("removeGroupMember")
	@GraphQLInputParameters(names = {"groupId", "userId"}, types = {"ID", "ID"}, mandatories = {true, true}, listDepths = {0, 0}, itemsMandatory = {false, false})
	@GraphQLNonScalar( fieldName = "removeGroupMember", graphQLTypeSimpleName = "Group", javaClass = Group.class, listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	Group removeGroupMember;

	/**
	 * Grants authorities to a group. The specified authorities are added to any existing ones.
	 */
	@JsonProperty("grantGroupAuthorities")
	@GraphQLInputParameters(names = { "groupId", "authorities" }, types = { "ID", "AuthorityKind" },
		mandatories = { true, true }, listDepths = { 0, 1 }, itemsMandatory = { false, true })
	@GraphQLNonScalar(fieldName = "grantGroupAuthorities", graphQLTypeSimpleName = "Group", javaClass = Group.class,
		listDepth = 0)
	Group grantGroupAuthorities;

	/**
	 * Revokes authorities from a group. The specified authorities are removed from the group; other authorities remain
	 * intact.
	 */
	@JsonProperty("revokeGroupAuthorities")
	@GraphQLInputParameters(names = { "groupId", "authorities" }, types = { "ID", "AuthorityKind" },
		mandatories = { true, true }, listDepths = { 0, 1 }, itemsMandatory = { false, true })
	@GraphQLNonScalar(fieldName = "revokeGroupAuthorities", graphQLTypeSimpleName = "Group", javaClass = Group.class,
		listDepth = 0)
	Group revokeGroupAuthorities;

	/**
	 * Creates a new claim.
	 */
	@JsonProperty("createClaim")
	public void setCreateClaim(Claim createClaim) {
		this.createClaim = createClaim;
	}

	/**
	 * Creates a new claim.
	 */
	@JsonProperty("createClaim")
	public Claim getCreateClaim() {
		return this.createClaim;
	}

	/**
	 * Updates an existing claim.
	 */
	@JsonProperty("updateClaim")
	public void setUpdateClaim(Claim updateClaim) {
		this.updateClaim = updateClaim;
	}

	/**
	 * Updates an existing claim.
	 */
	@JsonProperty("updateClaim")
	public Claim getUpdateClaim() {
		return this.updateClaim;
	}

	/**
	 * Deletes an existing claim.
	 */
	@JsonProperty("deleteClaim")
	public void setDeleteClaim(Claim deleteClaim) {
		this.deleteClaim = deleteClaim;
	}

	/**
	 * Deletes an existing claim.
	 */
	@JsonProperty("deleteClaim")
	public Claim getDeleteClaim() {
		return this.deleteClaim;
	}

	/**
	 * Creates a new declaration.
	 */
	@JsonProperty("createDeclaration")
	public void setCreateDeclaration(Declaration createDeclaration) {
		this.createDeclaration = createDeclaration;
	}

	/**
	 * Creates a new declaration.
	 */
	@JsonProperty("createDeclaration")
	public Declaration getCreateDeclaration() {
		return this.createDeclaration;
	}

	/**
	 * Updates an existing declaration.
	 */
	@JsonProperty("updateDeclaration")
	public void setUpdateDeclaration(Declaration updateDeclaration) {
		this.updateDeclaration = updateDeclaration;
	}

	/**
	 * Updates an existing declaration.
	 */
	@JsonProperty("updateDeclaration")
	public Declaration getUpdateDeclaration() {
		return this.updateDeclaration;
	}

	/**
	 * Deletes an existing declaration.
	 */
	@JsonProperty("deleteDeclaration")
	public void setDeleteDeclaration(Declaration deleteDeclaration) {
		this.deleteDeclaration = deleteDeclaration;
	}

	/**
	 * Deletes an existing declaration.
	 */
	@JsonProperty("deleteDeclaration")
	public Declaration getDeleteDeclaration() {
		return this.deleteDeclaration;
	}

	/**
	 * Creates an entity link.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[LNK]" })
	@JsonProperty("createEntityLink")
	public void setCreateEntityLink(EntityLink createEntityLink) {
		this.createEntityLink = createEntityLink;
	}

	/**
	 * Creates an entity link.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[LNK]" })
	@JsonProperty("createEntityLink")
	public EntityLink getCreateEntityLink() {
		return this.createEntityLink;
	}

	/**
	 * Updates an existing entity link.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[LNK]" })
	@JsonProperty("updateEntityLink")
	public void setUpdateEntityLink(EntityLink updateEntityLink) {
		this.updateEntityLink = updateEntityLink;
	}

	/**
	 * Updates an existing entity link.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[LNK]" })
	@JsonProperty("updateEntityLink")
	public EntityLink getUpdateEntityLink() {
		return this.updateEntityLink;
	}

	/**
	 * Deletes an entity link.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[LNK]" })
	@JsonProperty("deleteEntityLink")
	public void setDeleteEntityLink(EntityLink deleteEntityLink) {
		this.deleteEntityLink = deleteEntityLink;
	}

	/**
	 * Deletes an entity link.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[LNK]" })
	@JsonProperty("deleteEntityLink")
	public EntityLink getDeleteEntityLink() {
		return this.deleteEntityLink;
	}

	/**
	 * Create a new journal.
	 */
	@JsonProperty("createJournal")
	public void setCreateJournal(Journal createJournal) {
		this.createJournal = createJournal;
	}

	/**
	 * Create a new journal.
	 */
	@JsonProperty("createJournal")
	public Journal getCreateJournal() {
		return this.createJournal;
	}

	/**
	 * Updates an existing journal.
	 */
	@JsonProperty("updateJournal")
	public void setUpdateJournal(Journal updateJournal) {
		this.updateJournal = updateJournal;
	}

	/**
	 * Updates an existing journal.
	 */
	@JsonProperty("updateJournal")
	public Journal getUpdateJournal() {
		return this.updateJournal;
	}

	/**
	 * Deletes an existing journal.
	 */
	@JsonProperty("deleteJournal")
	public void setDeleteJournal(Journal deleteJournal) {
		this.deleteJournal = deleteJournal;
	}

	/**
	 * Deletes an existing journal.
	 */
	@JsonProperty("deleteJournal")
	public Journal getDeleteJournal() {
		return this.deleteJournal;
	}

	/**
	 * Creates a new person.
	 */
	@JsonProperty("createPerson")
	public void setCreatePerson(Person createPerson) {
		this.createPerson = createPerson;
	}

	/**
	 * Creates a new person.
	 */
	@JsonProperty("createPerson")
	public Person getCreatePerson() {
		return this.createPerson;
	}

	/**
	 * Updates an existing person.
	 */
	@JsonProperty("updatePerson")
	public void setUpdatePerson(Person updatePerson) {
		this.updatePerson = updatePerson;
	}

	/**
	 * Updates an existing person.
	 */
	@JsonProperty("updatePerson")
	public Person getUpdatePerson() {
		return this.updatePerson;
	}

	/**
	 * Deletes an existing person.
	 */
	@JsonProperty("deletePerson")
	public void setDeletePerson(Person deletePerson) {
		this.deletePerson = deletePerson;
	}

	/**
	 * Deletes an existing person.
	 */
	@JsonProperty("deletePerson")
	public Person getDeletePerson() {
		return this.deletePerson;
	}

	/**
	 * Creates a new publication.
	 */
	@JsonProperty("createPublication")
	public void setCreatePublication(Publication createPublication) {
		this.createPublication = createPublication;
	}

	/**
	 * Creates a new publication.
	 */
	@JsonProperty("createPublication")
	public Publication getCreatePublication() {
		return this.createPublication;
	}

	/**
	 * Updates an existing publication.
	 */
	@JsonProperty("updatePublication")
	public void setUpdatePublication(Publication updatePublication) {
		this.updatePublication = updatePublication;
	}

	/**
	 * Updates an existing publication.
	 */
	@JsonProperty("updatePublication")
	public Publication getUpdatePublication() {
		return this.updatePublication;
	}

	/**
	 * Deletes an existing publication.
	 */
	@JsonProperty("deletePublication")
	public void setDeletePublication(Publication deletePublication) {
		this.deletePublication = deletePublication;
	}

	/**
	 * Deletes an existing publication.
	 */
	@JsonProperty("deletePublication")
	public Publication getDeletePublication() {
		return this.deletePublication;
	}

	/**
	 * Creates a new publisher.
	 */
	@JsonProperty("createPublisher")
	public void setCreatePublisher(Publisher createPublisher) {
		this.createPublisher = createPublisher;
	}

	/**
	 * Creates a new publisher.
	 */
	@JsonProperty("createPublisher")
	public Publisher getCreatePublisher() {
		return this.createPublisher;
	}

	/**
	 * Updates an existing publisher.
	 */
	@JsonProperty("updatePublisher")
	public void setUpdatePublisher(Publisher updatePublisher) {
		this.updatePublisher = updatePublisher;
	}

	/**
	 * Updates an existing publisher.
	 */
	@JsonProperty("updatePublisher")
	public Publisher getUpdatePublisher() {
		return this.updatePublisher;
	}

	/**
	 * Deletes an existing publisher.
	 */
	@JsonProperty("deletePublisher")
	public void setDeletePublisher(Publisher deletePublisher) {
		this.deletePublisher = deletePublisher;
	}

	/**
	 * Deletes an existing publisher.
	 */
	@JsonProperty("deletePublisher")
	public Publisher getDeletePublisher() {
		return this.deletePublisher;
	}

	/**
	 * Creates a new quotation.
	 */
	@JsonProperty("createQuotation")
	public void setCreateQuotation(Quotation createQuotation) {
		this.createQuotation = createQuotation;
	}

	/**
	 * Creates a new quotation.
	 */
	@JsonProperty("createQuotation")
	public Quotation getCreateQuotation() {
		return this.createQuotation;
	}

	/**
	 * Updates an existing quotation.
	 */
	@JsonProperty("updateQuotation")
	public void setUpdateQuotation(Quotation updateQuotation) {
		this.updateQuotation = updateQuotation;
	}

	/**
	 * Updates an existing quotation.
	 */
	@JsonProperty("updateQuotation")
	public Quotation getUpdateQuotation() {
		return this.updateQuotation;
	}

	/**
	 * Deletes an existing quotation.
	 */
	@JsonProperty("deleteQuotation")
	public void setDeleteQuotation(Quotation deleteQuotation) {
		this.deleteQuotation = deleteQuotation;
	}

	/**
	 * Deletes an existing quotation.
	 */
	@JsonProperty("deleteQuotation")
	public Quotation getDeleteQuotation() {
		return this.deleteQuotation;
	}

	/**
	 * Creates a new topic.
	 */
	@JsonProperty("createTopic")
	public void setCreateTopic(Topic createTopic) {
		this.createTopic = createTopic;
	}

	/**
	 * Creates a new topic.
	 */
	@JsonProperty("createTopic")
	public Topic getCreateTopic() {
		return this.createTopic;
	}

	/**
	 * Updates an existing topic.
	 */
	@JsonProperty("updateTopic")
	public void setUpdateTopic(Topic updateTopic) {
		this.updateTopic = updateTopic;
	}

	/**
	 * Updates an existing topic.
	 */
	@JsonProperty("updateTopic")
	public Topic getUpdateTopic() {
		return this.updateTopic;
	}

	/**
	 * Deletes an existing topic.
	 */
	@JsonProperty("deleteTopic")
	public void setDeleteTopic(Topic deleteTopic) {
		this.deleteTopic = deleteTopic;
	}

	/**
	 * Deletes an existing topic.
	 */
	@JsonProperty("deleteTopic")
	public Topic getDeleteTopic() {
		return this.deleteTopic;
	}

	/**
	 * Sets entity status.
	 */
	@JsonProperty("setEntityStatus")
	public void setSetEntityStatus(Boolean setEntityStatus) {
		this.setEntityStatus = setEntityStatus;
	}

	/**
	 * Sets entity status.
	 */
	@JsonProperty("setEntityStatus")
	public Boolean getSetEntityStatus() {
		return this.setEntityStatus;
	}

	/**
	 * Creates a new user.
	 */
	@JsonProperty("createUser")
	public void setCreateUser(User createUser) {
		this.createUser = createUser;
	}

	/**
	 * Creates a new user.
	 */
	@JsonProperty("createUser")
	public User getCreateUser() {
		return this.createUser;
	}

	/**
	 * Updates an existing user.
	 */
	@JsonProperty("updateUser")
	public void setUpdateUser(User updateUser) {
		this.updateUser = updateUser;
	}

	/**
	 * Updates an existing user.
	 */
	@JsonProperty("updateUser")
	public User getUpdateUser() {
		return this.updateUser;
	}

	/**
	 * Updates an existing user.
	 */
	@JsonProperty("deleteUser")
	public void setDeleteUser(User deleteUser) {
		this.deleteUser = deleteUser;
	}

	/**
	 * Updates an existing user.
	 */
	@JsonProperty("deleteUser")
	public User getDeleteUser() {
		return this.deleteUser;
	}

	/**
	 * Grants authorities to a user. The specified authorities are added to any existing ones.
	 */
	@JsonProperty("grantUserAuthorities")
	public void setGrantUserAuthorities(User grantUserAuthorities) {
		this.grantUserAuthorities = grantUserAuthorities;
	}

	/**
	 * Grants authorities to a user. The specified authorities are added to any existing ones.
	 */
	@JsonProperty("grantUserAuthorities")
	public User getGrantUserAuthorities() {
		return this.grantUserAuthorities;
	}

	/**
	 * Revokes authorities from a user. The specified authorities are removed from the user; other authorities remain
	 * intact.
	 */
	@JsonProperty("revokeUserAuthorities")
	public void setRevokeUserAuthorities(User revokeUserAuthorities) {
		this.revokeUserAuthorities = revokeUserAuthorities;
	}

	/**
	 * Revokes authorities from a user. The specified authorities are removed from the user; other authorities remain
	 * intact.
	 */
	@JsonProperty("revokeUserAuthorities")
	public User getRevokeUserAuthorities() {
		return this.revokeUserAuthorities;
	}

	/**
	 * Creates a new group.
	 */
	@JsonProperty("createGroup")
	public void setCreateGroup(Group createGroup) {
		this.createGroup = createGroup;
	}

	/**
	 * Creates a new group.
	 */
	@JsonProperty("createGroup")
	public Group getCreateGroup() {
		return this.createGroup;
	}

	/**
	 * Updates an existing group.
	 */
	@JsonProperty("updateGroup")
	public void setUpdateGroup(Group updateGroup) {
		this.updateGroup = updateGroup;
	}

	/**
	 * Updates an existing group.
	 */
	@JsonProperty("updateGroup")
	public Group getUpdateGroup() {
		return this.updateGroup;
	}

	/**
	 * Updates an existing group.
	 */
	@JsonProperty("deleteGroup")
	public void setDeleteGroup(Group deleteGroup) {
		this.deleteGroup = deleteGroup;
	}

	/**
	 * Updates an existing group.
	 */
	@JsonProperty("deleteGroup")
	public Group getDeleteGroup() {
		return this.deleteGroup;
	}

	/**
	  * Adds a user to a group.
 	 */
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	@JsonProperty("addGroupMember")
	public void setAddGroupMember(Group addGroupMember) {
		this.addGroupMember = addGroupMember;
	}

	/**
	 * Adds a user to a group.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	@JsonProperty("addGroupMember")
	public Group getAddGroupMember() {
		return this.addGroupMember;
	}
		
	/**
	  * Removes a user from a group.
 	 */
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	@JsonProperty("removeGroupMember")
	public void setRemoveGroupMember(Group removeGroupMember) {
		this.removeGroupMember = removeGroupMember;
	}

	/**
	 * Removes a user from a group.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	@JsonProperty("removeGroupMember")
	public Group getRemoveGroupMember() {
		return this.removeGroupMember;
	}

	/**
	 * Grants authorities to a group. The specified authorities are added to any existing ones.
	 */
	@JsonProperty("grantGroupAuthorities")
	public void setGrantGroupAuthorities(Group grantGroupAuthorities) {
		this.grantGroupAuthorities = grantGroupAuthorities;
	}

	/**
	 * Grants authorities to a group. The specified authorities are added to any existing ones.
	 */
	@JsonProperty("grantGroupAuthorities")
	public Group getGrantGroupAuthorities() {
		return this.grantGroupAuthorities;
	}

	/**
	 * Revokes authorities from a group. The specified authorities are removed from the group; other authorities remain
	 * intact.
	 */
	@JsonProperty("revokeGroupAuthorities")
	public void setRevokeGroupAuthorities(Group revokeGroupAuthorities) {
		this.revokeGroupAuthorities = revokeGroupAuthorities;
	}

	/**
	 * Revokes authorities from a group. The specified authorities are removed from the group; other authorities remain
	 * intact.
	 */
	@JsonProperty("revokeGroupAuthorities")
	public Group getRevokeGroupAuthorities() {
		return this.revokeGroupAuthorities;
	}

	public String toString() {
		return "Mutation {" //
			+ "createClaim: " + this.createClaim //
			+ ", " //
			+ "updateClaim: " + this.updateClaim //
			+ ", " //
			+ "deleteClaim: " + this.deleteClaim //
			+ ", " //
			+ "createDeclaration: " + this.createDeclaration //
			+ ", " //
			+ "updateDeclaration: " + this.updateDeclaration //
			+ ", " //
			+ "deleteDeclaration: " + this.deleteDeclaration //
			+ ", " //
			+ "createEntityLink: " + this.createEntityLink //
			+ ", " //
			+ "updateEntityLink: " + this.updateEntityLink //
			+ ", " //
			+ "deleteEntityLink: " + this.deleteEntityLink //
			+ ", " //
			+ "createJournal: " + this.createJournal //
			+ ", " //
			+ "updateJournal: " + this.updateJournal //
			+ ", " //
			+ "deleteJournal: " + this.deleteJournal //
			+ ", " //
			+ "createPerson: " + this.createPerson //
			+ ", " //
			+ "updatePerson: " + this.updatePerson //
			+ ", " //
			+ "deletePerson: " + this.deletePerson //
			+ ", " //
			+ "createPublication: " + this.createPublication //
			+ ", " //
			+ "updatePublication: " + this.updatePublication //
			+ ", " //
			+ "deletePublication: " + this.deletePublication //
			+ ", " //
			+ "createPublisher: " + this.createPublisher //
			+ ", " //
			+ "updatePublisher: " + this.updatePublisher //
			+ ", " //
			+ "deletePublisher: " + this.deletePublisher //
			+ ", " //
			+ "createQuotation: " + this.createQuotation //
			+ ", " //
			+ "updateQuotation: " + this.updateQuotation //
			+ ", " //
			+ "deleteQuotation: " + this.deleteQuotation //
			+ ", " //
			+ "createTopic: " + this.createTopic //
			+ ", " //
			+ "updateTopic: " + this.updateTopic //
			+ ", " //
			+ "deleteTopic: " + this.deleteTopic //
			+ ", " //
			+ "setEntityStatus: " + this.setEntityStatus //
			+ ", " //
			+ "createUser: " + this.createUser //
			+ ", " //
			+ "updateUser: " + this.updateUser //
			+ ", " //
			+ "deleteUser: " + this.deleteUser //
			+ ", " //
			+ "grantUserAuthorities: " + this.grantUserAuthorities //
			+ ", " //
			+ "revokeUserAuthorities: " + this.revokeUserAuthorities //
			+ ", " //
			+ "createGroup: " + this.createGroup //
			+ ", " //
			+ "updateGroup: " + this.updateGroup //
			+ ", " //
			+ "deleteGroup: " + this.deleteGroup //
			+ ", " //
			+ "grantGroupAuthorities: " + this.grantGroupAuthorities //
			+ ", " //
			+ "revokeGroupAuthorities: " + this.revokeGroupAuthorities //
			+ ", " //
			+ "__typename: " + this.__typename //
			+ "}";
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractGraphQLEntity.Builder<Builder, Mutation> {

		private Claim createClaim;
		private Claim updateClaim;
		private Claim deleteClaim;
		private Declaration createDeclaration;
		private Declaration updateDeclaration;
		private Declaration deleteDeclaration;
		private EntityLink createEntityLink;
		private EntityLink updateEntityLink;
		private EntityLink deleteEntityLink;
		private Journal createJournal;
		private Journal updateJournal;
		private Journal deleteJournal;
		private Person createPerson;
		private Person updatePerson;
		private Person deletePerson;
		private Publication createPublication;
		private Publication updatePublication;
		private Publication deletePublication;
		private Publisher createPublisher;
		private Publisher updatePublisher;
		private Publisher deletePublisher;
		private Quotation createQuotation;
		private Quotation updateQuotation;
		private Quotation deleteQuotation;
		private Topic createTopic;
		private Topic updateTopic;
		private Topic deleteTopic;
		private Boolean setEntityStatus;
		private User createUser;
		private User updateUser;
		private User deleteUser;
		private User grantUserAuthorities;
		private User revokeUserAuthorities;
		private Group createGroup;
		private Group updateGroup;
		private Group deleteGroup;
		private Group addGroupMember;
		private Group removeGroupMember;
		private Group grantGroupAuthorities;
		private Group revokeGroupAuthorities;

		/**
		 * Creates a new claim.
		 */
		public Builder withCreateClaim(Claim createClaimParam) {
			this.createClaim = createClaimParam;
			return this;
		}

		/**
		 * Updates an existing claim.
		 */
		public Builder withUpdateClaim(Claim updateClaimParam) {
			this.updateClaim = updateClaimParam;
			return this;
		}

		/**
		 * Deletes an existing claim.
		 */
		public Builder withDeleteClaim(Claim deleteClaimParam) {
			this.deleteClaim = deleteClaimParam;
			return this;
		}

		/**
		 * Creates a new declaration.
		 */
		public Builder withCreateDeclaration(Declaration createDeclarationParam) {
			this.createDeclaration = createDeclarationParam;
			return this;
		}

		/**
		 * Updates an existing declaration.
		 */
		public Builder withUpdateDeclaration(Declaration updateDeclarationParam) {
			this.updateDeclaration = updateDeclarationParam;
			return this;
		}

		/**
		 * Deletes an existing declaration.
		 */
		public Builder withDeleteDeclaration(Declaration deleteDeclarationParam) {
			this.deleteDeclaration = deleteDeclarationParam;
			return this;
		}

		/**
		 * Creates an entity link.
		 */
		public Builder withCreateEntityLink(EntityLink createEntityLinkParam) {
			this.createEntityLink = createEntityLinkParam;
			return this;
		}

		/**
		 * Updates an existing entity link.
		 */
		public Builder withUpdateEntityLink(EntityLink updateEntityLinkParam) {
			this.updateEntityLink = updateEntityLinkParam;
			return this;
		}

		/**
		 * Deletes an entity link.
		 */
		public Builder withDeleteEntityLink(EntityLink deleteEntityLinkParam) {
			this.deleteEntityLink = deleteEntityLinkParam;
			return this;
		}

		/**
		 * Create a new journal.
		 */
		public Builder withCreateJournal(Journal createJournalParam) {
			this.createJournal = createJournalParam;
			return this;
		}

		/**
		 * Updates an existing journal.
		 */
		public Builder withUpdateJournal(Journal updateJournalParam) {
			this.updateJournal = updateJournalParam;
			return this;
		}

		/**
		 * Deletes an existing journal.
		 */
		public Builder withDeleteJournal(Journal deleteJournalParam) {
			this.deleteJournal = deleteJournalParam;
			return this;
		}

		/**
		 * Creates a new person.
		 */
		public Builder withCreatePerson(Person createPersonParam) {
			this.createPerson = createPersonParam;
			return this;
		}

		/**
		 * Updates an existing person.
		 */
		public Builder withUpdatePerson(Person updatePersonParam) {
			this.updatePerson = updatePersonParam;
			return this;
		}

		/**
		 * Deletes an existing person.
		 */
		public Builder withDeletePerson(Person deletePersonParam) {
			this.deletePerson = deletePersonParam;
			return this;
		}

		/**
		 * Creates a new publication.
		 */
		public Builder withCreatePublication(Publication createPublicationParam) {
			this.createPublication = createPublicationParam;
			return this;
		}

		/**
		 * Updates an existing publication.
		 */
		public Builder withUpdatePublication(Publication updatePublicationParam) {
			this.updatePublication = updatePublicationParam;
			return this;
		}

		/**
		 * Deletes an existing publication.
		 */
		public Builder withDeletePublication(Publication deletePublicationParam) {
			this.deletePublication = deletePublicationParam;
			return this;
		}

		/**
		 * Creates a new publisher.
		 */
		public Builder withCreatePublisher(Publisher createPublisherParam) {
			this.createPublisher = createPublisherParam;
			return this;
		}

		/**
		 * Updates an existing publisher.
		 */
		public Builder withUpdatePublisher(Publisher updatePublisherParam) {
			this.updatePublisher = updatePublisherParam;
			return this;
		}

		/**
		 * Deletes an existing publisher.
		 */
		public Builder withDeletePublisher(Publisher deletePublisherParam) {
			this.deletePublisher = deletePublisherParam;
			return this;
		}

		/**
		 * Creates a new quotation.
		 */
		public Builder withCreateQuotation(Quotation createQuotationParam) {
			this.createQuotation = createQuotationParam;
			return this;
		}

		/**
		 * Updates an existing quotation.
		 */
		public Builder withUpdateQuotation(Quotation updateQuotationParam) {
			this.updateQuotation = updateQuotationParam;
			return this;
		}

		/**
		 * Deletes an existing quotation.
		 */
		public Builder withDeleteQuotation(Quotation deleteQuotationParam) {
			this.deleteQuotation = deleteQuotationParam;
			return this;
		}

		/**
		 * Creates a new topic.
		 */
		public Builder withCreateTopic(Topic createTopicParam) {
			this.createTopic = createTopicParam;
			return this;
		}

		/**
		 * Updates an existing topic.
		 */
		public Builder withUpdateTopic(Topic updateTopicParam) {
			this.updateTopic = updateTopicParam;
			return this;
		}

		/**
		 * Deletes an existing topic.
		 */
		public Builder withDeleteTopic(Topic deleteTopicParam) {
			this.deleteTopic = deleteTopicParam;
			return this;
		}

		/**
		 * Sets entity status.
		 */
		public Builder withSetEntityStatus(Boolean setEntityStatusParam) {
			this.setEntityStatus = setEntityStatusParam;
			return this;
		}

		/**
		 * Creates a new user.
		 */
		public Builder withCreateUser(User createUserParam) {
			this.createUser = createUserParam;
			return this;
		}

		/**
		 * Updates an existing user.
		 */
		public Builder withUpdateUser(User updateUserParam) {
			this.updateUser = updateUserParam;
			return this;
		}

		/**
		 * Updates an existing user.
		 */
		public Builder withDeleteUser(User deleteUserParam) {
			this.deleteUser = deleteUserParam;
			return this;
		}

		/**
		 * Grants authorities to a user. The specified authorities are added to any existing ones.
		 */
		public Builder withGrantUserAuthorities(User grantUserAuthoritiesParam) {
			this.grantUserAuthorities = grantUserAuthoritiesParam;
			return this;
		}

		/**
		 * Revokes authorities from a user. The specified authorities are removed from the user; other authorities
		 * remain intact.
		 */
		public Builder withRevokeUserAuthorities(User revokeUserAuthoritiesParam) {
			this.revokeUserAuthorities = revokeUserAuthoritiesParam;
			return this;
		}

		/**
		 * Creates a new group.
		 */
		public Builder withCreateGroup(Group createGroupParam) {
			this.createGroup = createGroupParam;
			return this;
		}

		/**
		 * Updates an existing group.
		 */
		public Builder withUpdateGroup(Group updateGroupParam) {
			this.updateGroup = updateGroupParam;
			return this;
		}

		/**
		 * Deletes an existing group.
		 */
		public Builder withDeleteGroup(Group deleteGroupParam) {
			this.deleteGroup = deleteGroupParam;
			return this;
		}

		/**
		 * Adds a user to a group.
		 */
		public Builder withAddGroupMember(Group addGroupMemberParam) {
			this.addGroupMember = addGroupMemberParam;
			return this;
		}

		/**
		 * Removes a user from a group.
		 */
		public Builder withRemoveGroupMember(Group removeGroupMemberParam) {
			this.removeGroupMember = removeGroupMemberParam;
			return this;
		}

		/**
		 * Grants authorities to a group. The specified authorities are added to any
		 * existing ones.
		 */
		public Builder withGrantGroupAuthorities(Group grantGroupAuthoritiesParam) {
			this.grantGroupAuthorities = grantGroupAuthoritiesParam;
			return this;
		}

		/**
		 * Revokes authorities from a group. The specified authorities are removed from
		 * the group; other authorities remain intact.
		 */
		public Builder withRevokeGroupAuthorities(Group revokeGroupAuthoritiesParam) {
			this.revokeGroupAuthorities = revokeGroupAuthoritiesParam;
			return this;
		}

		public Mutation build() {
			Mutation _object = build(new Mutation());
			_object.setCreateClaim(this.createClaim);
			_object.setUpdateClaim(this.updateClaim);
			_object.setDeleteClaim(this.deleteClaim);
			_object.setCreateDeclaration(this.createDeclaration);
			_object.setUpdateDeclaration(this.updateDeclaration);
			_object.setDeleteDeclaration(this.deleteDeclaration);
			_object.setCreateEntityLink(this.createEntityLink);
			_object.setUpdateEntityLink(this.updateEntityLink);
			_object.setDeleteEntityLink(this.deleteEntityLink);
			_object.setCreateJournal(this.createJournal);
			_object.setUpdateJournal(this.updateJournal);
			_object.setDeleteJournal(this.deleteJournal);
			_object.setCreatePerson(this.createPerson);
			_object.setUpdatePerson(this.updatePerson);
			_object.setDeletePerson(this.deletePerson);
			_object.setCreatePublication(this.createPublication);
			_object.setUpdatePublication(this.updatePublication);
			_object.setDeletePublication(this.deletePublication);
			_object.setCreatePublisher(this.createPublisher);
			_object.setUpdatePublisher(this.updatePublisher);
			_object.setDeletePublisher(this.deletePublisher);
			_object.setCreateQuotation(this.createQuotation);
			_object.setUpdateQuotation(this.updateQuotation);
			_object.setDeleteQuotation(this.deleteQuotation);
			_object.setCreateTopic(this.createTopic);
			_object.setUpdateTopic(this.updateTopic);
			_object.setDeleteTopic(this.deleteTopic);
			_object.setSetEntityStatus(this.setEntityStatus);
			_object.setCreateUser(this.createUser);
			_object.setUpdateUser(this.updateUser);
			_object.setDeleteUser(this.deleteUser);
			_object.setGrantUserAuthorities(this.grantUserAuthorities);
			_object.setRevokeUserAuthorities(this.revokeUserAuthorities);
			_object.setCreateGroup(this.createGroup);
			_object.setUpdateGroup(this.updateGroup);
			_object.setDeleteGroup(this.deleteGroup);
			_object.setAddGroupMember(this.addGroupMember);
			_object.setRemoveGroupMember(this.removeGroupMember);
			_object.setGrantGroupAuthorities(this.grantGroupAuthorities);
			_object.setRevokeGroupAuthorities(this.revokeGroupAuthorities);
			return _object;
		}

		@Override
		String getTypeName() {
			return "Mutation";
		}

	}

	private ObjectMapper getMapper() {
		if (this.mapper == null) {
			this.mapper = new ObjectMapper();
		}
		return this.mapper;
	}

	public JsonNode getExtensions() {
		return this.extensions;
	}

	public void setExtensions(JsonNode extensionsParam) {
		this.extensions = extensionsParam;
	}

	/**
	 * Returns the extensions as a map. The values can't be deserialized, as their type is unknown.
	 * @return
	 */
	public Map<String, JsonNode> getExtensionsAsMap() {
		if (this.extensionsAsMap == null) {
			this.extensionsAsMap =
				new ObjectMapper().convertValue(this.extensions, new TypeReference<Map<String, JsonNode>>() {
				});
		}
		return this.extensionsAsMap;
	}

	/**
	 * Parse the value for the given _key_, as found in the <I>extensions</I> field of the GraphQL server's response,
	 * into the given _t_ class.
	 * @param <T>
	 * @param key
	 * @param t
	 * @return null if the key is not in the <I>extensions</I> map. Otherwise: the value for this _key_, as a _t_
	 * instance
	 * @throws JsonProcessingException When there is an error when converting the key's value into the _t_ class
	 */
	public <T> T getExtensionsField(String key, Class<T> t) throws JsonProcessingException {
		JsonNode node = getExtensionsAsMap().get(key);
		return (node == null) ? null : getMapper().treeToValue(node, t);
	}

}
