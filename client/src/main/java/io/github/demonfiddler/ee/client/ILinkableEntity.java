/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLInterfaceType;
import com.graphql_java_generator.annotation.GraphQLNonScalar;

/**
 * Interface for entities with associated topics.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@JsonTypeInfo(use = Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "__typename", visible = true)
@JsonSubTypes({ @Type(value = Claim.class, name = "Claim"), @Type(value = Declaration.class, name = "Declaration"),
	@Type(value = Person.class, name = "Person"), @Type(value = Publication.class, name = "Publication"),
	@Type(value = Quotation.class, name = "Quotation"), @Type(value = Topic.class, name = "Topic") })
@GraphQLInterfaceType("ILinkableEntity")
public interface ILinkableEntity extends ITrackedEntity {

	@JsonProperty("fromEntityLinks")
	@GraphQLInputParameters(names = { "filter", "pageSort" }, types = { "LinkableEntityQueryFilter", "PageableInput" },
		mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "fromEntityLinks", graphQLTypeSimpleName = "EntityLinkPage",
		javaClass = EntityLinkPage.class, listDepth = 0)
	public void setFromEntityLinks(EntityLinkPage fromEntityLinks);

	@JsonProperty("fromEntityLinks")
	@GraphQLInputParameters(names = { "filter", "pageSort" }, types = { "LinkableEntityQueryFilter", "PageableInput" },
		mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "fromEntityLinks", graphQLTypeSimpleName = "EntityLinkPage",
		javaClass = EntityLinkPage.class, listDepth = 0)
	public EntityLinkPage getFromEntityLinks();

	@JsonProperty("toEntityLinks")
	@GraphQLInputParameters(names = { "filter", "pageSort" }, types = { "LinkableEntityQueryFilter", "PageableInput" },
		mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "toEntityLinks", graphQLTypeSimpleName = "EntityLinkPage",
		javaClass = EntityLinkPage.class, listDepth = 0)
	public void setToEntityLinks(EntityLinkPage toEntityLinks);

	@JsonProperty("toEntityLinks")
	@GraphQLInputParameters(names = { "filter", "pageSort" }, types = { "LinkableEntityQueryFilter", "PageableInput" },
		mandatories = { false, false }, listDepths = { 0, 0 }, itemsMandatory = { false, false })
	@GraphQLNonScalar(fieldName = "toEntityLinks", graphQLTypeSimpleName = "EntityLinkPage",
		javaClass = EntityLinkPage.class, listDepth = 0)
	public EntityLinkPage getToEntityLinks();

}
