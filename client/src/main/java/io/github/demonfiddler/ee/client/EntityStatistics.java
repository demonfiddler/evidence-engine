/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

import org.dataloader.DataLoader;

import graphql.schema.DataFetchingEnvironment;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import com.graphql_java_generator.client.GraphQLObjectMapper;
import com.graphql_java_generator.annotation.GraphQLDirective;
import com.graphql_java_generator.annotation.GraphQLIgnore;
import com.graphql_java_generator.annotation.GraphQLInputParameters;

/**
 * Statistics about a given entity kind.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("EntityStatistics")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class EntityStatistics {

	/**
	 * This map contains the deserialized values for the alias, as parsed from the JSON response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	/**
	 * The entity kind.
	 */
	@JsonProperty("entityKind")
	@GraphQLInputParameters(names = {"format"}, types = {"FormatKind"}, mandatories = {false}, listDepths = {0}, itemsMandatory = {false})
	@GraphQLScalar( fieldName = "entityKind", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String entityKind;

	/**
	 * The number of entities of that kind.
	 */
	@JsonProperty("count")
	@GraphQLScalar(fieldName = "count", graphQLTypeSimpleName = "Long", javaClass = Long.class, listDepth = 0)
	Long count;

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String __typename;

	/**
	 * The entity kind.
	 */
	@JsonProperty("entityKind")
	public void setEntityKind(String entityKind) {
		this.entityKind = entityKind;
	}

	/**
	 * The entity kind.
	 */
	@JsonProperty("entityKind")
	public String getEntityKind() {
		return this.entityKind;
	}

	/**
	 * The number of entities of that kind.
	 */
	@JsonProperty("count")
	public void setCount(Long count) {
		this.count = count;
	}

	/**
	 * The number of entities of that kind.
	 */
	@JsonProperty("count")
	public Long getCount() {
		return this.count;
	}

	@JsonProperty("__typename")
	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	@JsonProperty("__typename")
	public String get__typename() {
		return this.__typename;
	}

	/**
	 * This method is called during the JSON deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the JSON.
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		this.aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis JSON deserialization, but this value won't be the proper custom scalar value.
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return this.aliasValues.get(alias);
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((entityKind == null) ? 0 : entityKind.hashCode());
		result = prime * result + ((count == null) ? 0 : count.hashCode());
		result = prime * result + ((__typename == null) ? 0 : __typename.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		EntityStatistics other = (EntityStatistics)obj;
		if (entityKind == null) {
			if (other.entityKind != null)
				return false;
		} else if (!entityKind.equals(other.entityKind))
			return false;
		if (count == null) {
			if (other.count != null)
				return false;
		} else if (!count.equals(other.count))
			return false;
		if (__typename == null) {
			if (other.__typename != null)
				return false;
		} else if (!__typename.equals(other.__typename))
			return false;
		return true;
	}

	public String toString() {
		return "EntityStatistics {" //
			+ "entityKind: " + this.entityKind //
			+ ", " //
			+ "count: " + this.count //
			+ ", " //
			+ "__typename: " + this.__typename //
			+ "}"; //
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {

		private String entityKind;
		private Long count;

		/**
		 * The entity kind.
		 */
		public Builder withEntityKind(String entityKindParam) {
			this.entityKind = entityKindParam;
			return this;
		}

		/**
		 * The number of entities of that kind.
		 */
		public Builder withCount(Long countParam) {
			this.count = countParam;
			return this;
		}

		public EntityStatistics build() {
			EntityStatistics _object = new EntityStatistics();
			_object.setEntityKind(this.entityKind);
			_object.setCount(this.count);
			_object.set__typename("EntityStatistics"); //
			return _object;
		}

	}

}
