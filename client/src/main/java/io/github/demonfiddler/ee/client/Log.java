/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server and web client.
 * Copyright Â© 2024 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLIgnore;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import com.graphql_java_generator.client.GraphQLObjectMapper;

import io.github.demonfiddler.ee.client.util.CustomJacksonDeserializers;

/**
 * A log entry to show who changed what and when
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("Log")
@JsonInclude(Include.NON_NULL)
public class Log implements IBaseEntity {

	/**
	 * This map contains the deserialized values for the alias, as parsed from the JSON response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public Log() {
	}

	/**
	 * The unique identifier for the log entry.
	 */
	@JsonProperty("id")
	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long id;

	/**
	 * The date-time stamp.
	 */
	@JsonProperty("timestamp")
	@JsonDeserialize(using = CustomJacksonDeserializers.DateTime.class)
	@GraphQLScalar(fieldName = "timestamp", graphQLTypeSimpleName = "DateTime", javaClass = OffsetDateTime.class,
		listDepth = 0)
	OffsetDateTime timestamp;

	/**
	 * The user who made the change.
	 */
	@JsonProperty("user")
	@GraphQLNonScalar(fieldName = "user", graphQLTypeSimpleName = "User", javaClass = User.class, listDepth = 0)
	io.github.demonfiddler.ee.client.User user;

	/**
	 * The kind of transaction.
	 */
	@JsonProperty("transactionKind")
	@GraphQLInputParameters(names = { "format" }, types = { "FormatKind" }, mandatories = { false }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "transactionKind", graphQLTypeSimpleName = "String", javaClass = String.class,
		listDepth = 0)
	String transactionKind;

	/**
	 * The kind of entity affected.
	 */
	@JsonProperty("entityKind")
	@GraphQLInputParameters(names = { "format" }, types = { "FormatKind" }, mandatories = { false }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "entityKind", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String entityKind;

	/**
	 * The ID of the entity affected.
	 */
	@JsonProperty("entityId")
	@JsonDeserialize(using = CustomJacksonDeserializers.Long.class)
	@GraphQLScalar(fieldName = "entityId", graphQLTypeSimpleName = "Long", javaClass = Long.class, listDepth = 0)
	Long entityId;

	/**
	 * The kind of entity linked/unlinked (where applicable).
	 */
	@JsonProperty("linkedEntityKind")
	@GraphQLInputParameters(names = { "format" }, types = { "FormatKind" }, mandatories = { false }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "linkedEntityKind", graphQLTypeSimpleName = "String", javaClass = String.class,
		listDepth = 0)
	String linkedEntityKind;

	/**
	 * The ID of the entity linked/unlinked (where applicable).
	 */
	@JsonProperty("linkedEntityId")
	@JsonDeserialize(using = CustomJacksonDeserializers.Long.class)
	@GraphQLScalar(fieldName = "linkedEntityId", graphQLTypeSimpleName = "Long", javaClass = Long.class, listDepth = 0)
	Long linkedEntityId;

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String __typename;

	/**
	 * The unique identifier for the log entry.
	 */
	@Override
	@JsonIgnore
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * The unique identifier for the log entry.
	 */
	@Override
	@JsonIgnore
	public Long getId() {
		return this.id;
	}

	/**
	 * The date-time stamp.
	 */
	@JsonProperty("timestamp")
	public void setTimestamp(OffsetDateTime timestamp) {
		this.timestamp = timestamp;
	}

	/**
	 * The date-time stamp.
	 */
	@JsonProperty("timestamp")
	public OffsetDateTime getTimestamp() {
		return this.timestamp;
	}

	/**
	 * The user who made the change.
	 */
	@JsonProperty("user")
	public void setUser(io.github.demonfiddler.ee.client.User user) {
		this.user = user;
	}

	/**
	 * The user who made the change.
	 */
	@JsonProperty("user")
	public io.github.demonfiddler.ee.client.User getUser() {
		return this.user;
	}

	/**
	 * The kind of transaction.
	 */
	@JsonProperty("transactionKind")
	public void setTransactionKind(String transactionKind) {
		this.transactionKind = transactionKind;
	}

	/**
	 * The kind of transaction.
	 */
	@JsonProperty("transactionKind")
	public String getTransactionKind() {
		return this.transactionKind;
	}

	/**
	 * The kind of entity affected.
	 */
	@JsonProperty("entityKind")
	public void setEntityKind(String entityKind) {
		this.entityKind = entityKind;
	}

	/**
	 * The kind of entity affected.
	 */
	@JsonProperty("entityKind")
	public String getEntityKind() {
		return this.entityKind;
	}

	/**
	 * The ID of the entity affected.
	 */
	@JsonProperty("entityId")
	public void setEntityId(Long entityId) {
		this.entityId = entityId;
	}

	/**
	 * The ID of the entity affected.
	 */
	@JsonProperty("entityId")
	public Long getEntityId() {
		return this.entityId;
	}

	/**
	 * The kind of entity linked/unlinked (where applicable).
	 */
	@JsonProperty("linkedEntityKind")
	public void setLinkedEntityKind(String linkedEntityKind) {
		this.linkedEntityKind = linkedEntityKind;
	}

	/**
	 * The kind of entity linked/unlinked (where applicable).
	 */
	@JsonProperty("linkedEntityKind")
	public String getLinkedEntityKind() {
		return this.linkedEntityKind;
	}

	/**
	 * The ID of the entity linked/unlinked (where applicable).
	 */
	@JsonProperty("linkedEntityId")
	public void setLinkedEntityId(Long linkedEntityId) {
		this.linkedEntityId = linkedEntityId;
	}

	/**
	 * The ID of the entity linked/unlinked (where applicable).
	 */
	@JsonProperty("linkedEntityId")
	public Long getLinkedEntityId() {
		return this.linkedEntityId;
	}

	@Override
	@JsonIgnore
	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	@Override
	@JsonIgnore
	public String get__typename() {
		return this.__typename;
	}

	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		this.aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return this.aliasValues.get(alias);
	}

	public String toString() {
		return "Log {" //$NON-NLS-1$
			+ "id: " + this.id //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "timestamp: " + this.timestamp //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "user: " + this.user //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "transactionKind: " + this.transactionKind //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "entityKind: " + this.entityKind //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "entityId: " + this.entityId //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "linkedEntityKind: " + this.linkedEntityKind //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "linkedEntityId: " + this.linkedEntityId //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "__typename: " + this.__typename //$NON-NLS-1$
			+ "}"; //$NON-NLS-1$
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((aliasValues == null) ? 0 : aliasValues.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((timestamp == null) ? 0 : timestamp.hashCode());
		result = prime * result + ((user == null) ? 0 : user.hashCode());
		result = prime * result + ((transactionKind == null) ? 0 : transactionKind.hashCode());
		result = prime * result + ((entityKind == null) ? 0 : entityKind.hashCode());
		result = prime * result + ((entityId == null) ? 0 : entityId.hashCode());
		result = prime * result + ((linkedEntityKind == null) ? 0 : linkedEntityKind.hashCode());
		result = prime * result + ((linkedEntityId == null) ? 0 : linkedEntityId.hashCode());
		result = prime * result + ((__typename == null) ? 0 : __typename.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Log other = (Log)obj;
		if (aliasValues == null) {
			if (other.aliasValues != null)
				return false;
		} else if (!aliasValues.equals(other.aliasValues))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (timestamp == null) {
			if (other.timestamp != null)
				return false;
		} else if (!timestamp.equals(other.timestamp))
			return false;
		if (user == null) {
			if (other.user != null)
				return false;
		} else if (!user.equals(other.user))
			return false;
		if (transactionKind == null) {
			if (other.transactionKind != null)
				return false;
		} else if (!transactionKind.equals(other.transactionKind))
			return false;
		if (entityKind == null) {
			if (other.entityKind != null)
				return false;
		} else if (!entityKind.equals(other.entityKind))
			return false;
		if (entityId == null) {
			if (other.entityId != null)
				return false;
		} else if (!entityId.equals(other.entityId))
			return false;
		if (linkedEntityKind == null) {
			if (other.linkedEntityKind != null)
				return false;
		} else if (!linkedEntityKind.equals(other.linkedEntityKind))
			return false;
		if (linkedEntityId == null) {
			if (other.linkedEntityId != null)
				return false;
		} else if (!linkedEntityId.equals(other.linkedEntityId))
			return false;
		if (__typename == null) {
			if (other.__typename != null)
				return false;
		} else if (!__typename.equals(other.__typename))
			return false;
		return true;
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {

		private Long id;
		private OffsetDateTime timestamp;
		private io.github.demonfiddler.ee.client.User user;
		private String transactionKind;
		private String entityKind;
		private Long entityId;
		private String linkedEntityKind;
		private Long linkedEntityId;

		/**
		 * The unique identifier for the log entry.
		 */
		public Builder withId(Long idParam) {
			this.id = idParam;
			return this;
		}

		/**
		 * The date-time stamp.
		 */
		public Builder withTimestamp(OffsetDateTime timestampParam) {
			this.timestamp = timestampParam;
			return this;
		}

		/**
		 * The user who made the change.
		 */
		public Builder withUser(io.github.demonfiddler.ee.client.User userParam) {
			this.user = userParam;
			return this;
		}

		/**
		 * The kind of transaction.
		 */
		public Builder withTransactionKind(String transactionKindParam) {
			this.transactionKind = transactionKindParam;
			return this;
		}

		/**
		 * The kind of entity affected.
		 */
		public Builder withEntityKind(String entityKindParam) {
			this.entityKind = entityKindParam;
			return this;
		}

		/**
		 * The ID of the entity affected.
		 */
		public Builder withEntityId(Long entityIdParam) {
			this.entityId = entityIdParam;
			return this;
		}

		/**
		 * The kind of entity linked/unlinked (where applicable).
		 */
		public Builder withLinkedEntityKind(String linkedEntityKindParam) {
			this.linkedEntityKind = linkedEntityKindParam;
			return this;
		}

		/**
		 * The ID of the entity linked/unlinked (where applicable).
		 */
		public Builder withLinkedEntityId(Long linkedEntityIdParam) {
			this.linkedEntityId = linkedEntityIdParam;
			return this;
		}

		public Log build() {
			Log _object = new Log();
			_object.setId(this.id);
			_object.setTimestamp(this.timestamp);
			_object.setUser(this.user);
			_object.setTransactionKind(this.transactionKind);
			_object.setEntityKind(this.entityKind);
			_object.setEntityId(this.entityId);
			_object.setLinkedEntityKind(this.linkedEntityKind);
			_object.setLinkedEntityId(this.linkedEntityId);
			_object.set__typename("Log"); //$NON-NLS-1$
			return _object;
		}

	}

}
