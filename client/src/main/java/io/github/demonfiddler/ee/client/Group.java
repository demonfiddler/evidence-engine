/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLDirective;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import io.github.demonfiddler.ee.client.util.CustomJacksonDeserializers;

/**
 * Describes a group of users of the system.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("Group")
@JsonInclude(Include.NON_NULL)
@GraphQLDirective(name = "@auth", parameterNames = {}, parameterTypes = {}, parameterValues = {})
public class Group extends AbstractTrackedEntity {

	public Group() {
	}

	/**
	 * The (mutable?) unique group name (user-assigned).
	 */
	@JsonProperty("groupname")
	@GraphQLScalar(fieldName = "groupname", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String groupname;

	/**
	 * The authorities granted to the group.
	 */
	@JsonProperty("authorities")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListString.class)
	@GraphQLInputParameters(names = {"format"}, types = {"FormatKind"}, mandatories = {false}, listDepths = {0}, itemsMandatory = {false})
	@GraphQLScalar( fieldName = "authorities", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 1)
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	List<String> authorities;

	/**
	 * The members of the group.
	 */
	@JsonProperty("members")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListUser.class)
	@GraphQLNonScalar( fieldName = "members", graphQLTypeSimpleName = "User", javaClass = User.class, listDepth = 1)
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	List<User> members;

	/**
	 * The (mutable?) unique group name (user-assigned).
	 */
	@JsonProperty("groupname")
	public void setGroupname(String groupname) {
		this.groupname = groupname;
	}

	/**
	 * The (mutable?) unique group name (user-assigned).
	 */
	@JsonProperty("groupname")
	public String getGroupname() {
		return this.groupname;
	}

	/**
	 * The authorities granted to the group.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	@JsonProperty("authorities")
	public void setAuthorities(List<String> authorities) {
		this.authorities = authorities;
	}

	/**
	 * The authorities granted to the group.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	@JsonProperty("authorities")
	public List<String> getAuthorities() {
		return this.authorities;
	}

	/**
	 * The members of the group.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	@JsonProperty("members")
	public void setMembers(List<User> members) {
		this.members = members;
	}

	/**
	 * The members of the group.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	@JsonProperty("members")
	public List<User> getMembers() {
		return this.members;
	}

	public String toString() {
		return "Group {" //
			+ "id: " + this.id //
			+ ", " //
			+ "entityKind: " + this.entityKind //
			+ ", " //
			+ "status: " + this.status //
			+ ", " //
			+ "rating: " + this.rating //
			+ ", " //
			+ "created: " + this.created //
			+ ", " //
			+ "createdByUser.id: " + (this.createdByUser == null ? null : this.createdByUser.getId()) //
			+ ", " //
			+ "updated: " + this.updated //
			+ ", " //
			+ "updatedByUser.id: " + (this.updatedByUser == null ? null : this.updatedByUser.getId()) //
			+ ", " //
			+ "log: " + this.log //
			+ ", " //
			+ "groupname: " + this.groupname //
			+ ", " //
			+ "authorities: " + this.authorities //
			+ ", " //
			+ "members: " + this.members //
			+ ", " //
			+ "__typename: " + this.__typename //
			+ "}";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((groupname == null) ? 0 : groupname.hashCode());
		result = prime * result + ((authorities == null) ? 0 : authorities.hashCode());
		result = prime * result + ((members == null) ? 0 : members.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
        if (!super.equals(obj))
            return false;
		Group other = (Group)obj;
		if (groupname == null) {
			if (other.groupname != null)
				return false;
		} else if (!groupname.equals(other.groupname))
			return false;
		if (authorities == null) {
			if (other.authorities != null)
				return false;
		} else if (!authorities.equals(other.authorities))
			return false;
		if (members == null) {
			if (other.members != null)
				return false;
		} else if (!members.equals(other.members))
			return false;
		return true;
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractTrackedEntity.Builder<Builder, Group> {

		private String groupname;
		private List<String> authorities;
		private List<User> members;

		/**
		 * The (mutable?) unique group name (user-assigned).
		 */
		public Builder withGroupname(String groupnameParam) {
			this.groupname = groupnameParam;
			return this;
		}

		/**
		 * The authorities granted to the group.
		 */
		public Builder withAuthorities(List<String> authoritiesParam) {
			this.authorities = authoritiesParam;
			return this;
		}

		/**
		 * The members of the group.
		 */
		public Builder withMembers(List<User> membersParam) {
			this.members = membersParam;
			return this;
		}

		@Override
		public Group build() {
			Group _object = build(new Group());
			_object.setGroupname(this.groupname);
			_object.setAuthorities(this.authorities);
			_object.setMembers(this.members);
			return _object;
		}

		@Override
		String getTypeName() {
			return "Group";
		}

	}

}
