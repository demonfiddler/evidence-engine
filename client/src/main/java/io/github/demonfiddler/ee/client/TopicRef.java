/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server and web client.
 * Copyright Â© 2024 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLIgnore;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import com.graphql_java_generator.client.GraphQLObjectMapper;

import io.github.demonfiddler.ee.client.util.CustomJacksonDeserializers;

/**
 * An association between a topic and an entity record.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("TopicRef")
@JsonInclude(Include.NON_NULL)
public class TopicRef implements IBaseEntity {

	/**
	 * This map contains the deserialized values for the alias, as parsed from the JSON response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public TopicRef() {
	}

	// NOTE: only necessary because graphql-java-generator emits code with errors (missing ctor) if there is no ID
	// field.
	/**
	 * The unique topic ref identifier.
	 */
	@JsonProperty("id")
	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long id;

	/**
	 * The associated topic.
	 */
	@JsonProperty("topic")
	@GraphQLNonScalar(fieldName = "topic", graphQLTypeSimpleName = "Topic", javaClass = Topic.class, listDepth = 0)
	Topic topic;

	/**
	 * The associated entity kind.
	 */
	@JsonProperty("entityKind")
	@GraphQLInputParameters(names = { "format" }, types = { "FormatKind" }, mandatories = { false }, listDepths = { 0 },
		itemsMandatory = { false })
	@GraphQLScalar(fieldName = "entityKind", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String entityKind;

	// TODO: consider whether to return the identifier or the entity record.
	/**
	 * The unique identifier of the associated record.
	 */
	@JsonProperty("entityId")
	@JsonDeserialize(using = CustomJacksonDeserializers.Long.class)
	@GraphQLScalar(fieldName = "entityId", graphQLTypeSimpleName = "Long", javaClass = Long.class, listDepth = 0)
	Long entityId;

	/**
	 * The associated record.
	 */
	@JsonProperty("entity")
	@GraphQLNonScalar(fieldName = "entity", graphQLTypeSimpleName = "ITopicalEntity", javaClass = ITopicalEntity.class,
		listDepth = 0)
	ITopicalEntity entity;

	/**
	 * The locations within the associated record, one per line.
	 */
	@JsonProperty("locations")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListURI.class)
	@GraphQLScalar(fieldName = "locations", graphQLTypeSimpleName = "URI", javaClass = java.net.URI.class,
		listDepth = 1)
	List<java.net.URI> locations;

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String __typename;

	// NOTE: only necessary because graphql-java-generator emits code with errors (missing ctor) if there is no ID
	// field.
	/**
	 * The unique topic ref identifier.
	 */
	@Override
	@JsonIgnore
	public void setId(Long id) {
		this.id = id;
	}

	// NOTE: only necessary because graphql-java-generator emits code with errors (missing ctor) if there is no ID
	// field.
	/**
	 * The unique topic ref identifier.
	 */
	@Override
	@JsonIgnore
	public Long getId() {
		return this.id;
	}

	// "The unique identifier of the associated topic."
	// topicId: Long!
	/**
	 * The associated topic.
	 */
	@JsonProperty("topic")
	public void setTopic(Topic topic) {
		this.topic = topic;
	}

	// "The unique identifier of the associated topic."
	// topicId: Long!
	/**
	 * The associated topic.
	 */
	@JsonProperty("topic")
	public Topic getTopic() {
		return this.topic;
	}

	/**
	 * The associated entity kind.
	 */
	@JsonProperty("entityKind")
	public void setEntityKind(String entityKind) {
		this.entityKind = entityKind;
	}

	/**
	 * The associated entity kind.
	 */
	@JsonProperty("entityKind")
	public String getEntityKind() {
		return this.entityKind;
	}

	// TODO: consider whether to return the identifier or the entity record.
	/**
	 * The unique identifier of the associated record.
	 */
	@JsonProperty("entityId")
	public void setEntityId(Long entityId) {
		this.entityId = entityId;
	}

	// TODO: consider whether to return the identifier or the entity record.
	/**
	 * The unique identifier of the associated record.
	 */
	@JsonProperty("entityId")
	public Long getEntityId() {
		return this.entityId;
	}

	/**
	 * The associated record.
	 */
	@JsonProperty("entity")
	public void setEntity(ITopicalEntity entity) {
		this.entity = entity;
	}

	/**
	 * The associated record.
	 */
	@JsonProperty("entity")
	public ITopicalEntity getEntity() {
		return this.entity;
	}

	/**
	 * The locations within the associated record, one per line.
	 */
	@JsonProperty("locations")
	public void setLocations(List<java.net.URI> locations) {
		this.locations = locations;
	}

	/**
	 * The locations within the associated record, one per line.
	 */
	@JsonProperty("locations")
	public List<java.net.URI> getLocations() {
		return this.locations;
	}

	@Override
	@JsonIgnore
	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	@Override
	@JsonIgnore
	public String get__typename() {
		return this.__typename;
	}

	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		this.aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return this.aliasValues.get(alias);
	}

	public String toString() {
		return "TopicRef {" //$NON-NLS-1$
			+ "id: " + this.id //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "topic: " + this.topic //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "entityKind: " + this.entityKind //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "entityId: " + this.entityId //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "entity: " + this.entity //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "locations: " + this.locations //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "__typename: " + this.__typename //$NON-NLS-1$
			+ "}"; //$NON-NLS-1$
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {

		private Long id;
		private Topic topic;
		private String entityKind;
		private Long entityId;
		private ITopicalEntity entity;
		private List<java.net.URI> locations;

		// NOTE: only necessary because graphql-java-generator emits code with errors (missing ctor) if there is no ID
		// field.
		/**
		 * The unique topic ref identifier.
		 */
		public Builder withId(Long idParam) {
			this.id = idParam;
			return this;
		}

		/**
		 * The associated topic.
		 */
		public Builder withTopic(Topic topicParam) {
			this.topic = topicParam;
			return this;
		}

		/**
		 * The associated entity kind.
		 */
		public Builder withEntityKind(String entityKindParam) {
			this.entityKind = entityKindParam;
			return this;
		}

		// TODO: consider whether to return the identifier or the entity record.
		/**
		 * The unique identifier of the associated record.
		 */
		public Builder withEntityId(Long entityIdParam) {
			this.entityId = entityIdParam;
			return this;
		}

		/**
		 * The associated record.
		 */
		public Builder withEntity(ITopicalEntity entityParam) {
			this.entity = entityParam;
			return this;
		}

		/**
		 * The locations within the associated record, one per line.
		 */
		public Builder withLocations(List<java.net.URI> locationsParam) {
			this.locations = locationsParam;
			return this;
		}

		public TopicRef build() {
			TopicRef _object = new TopicRef();
			_object.setId(this.id);
			_object.setTopic(this.topic);
			_object.setEntityKind(this.entityKind);
			_object.setEntityId(this.entityId);
			_object.setEntity(this.entity);
			_object.setLocations(this.locations);
			_object.set__typename("TopicRef"); //$NON-NLS-1$
			return _object;
		}

	}

}
