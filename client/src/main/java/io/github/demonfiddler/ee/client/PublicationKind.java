/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import com.graphql_java_generator.annotation.GraphQLEnumType;

/**
 * Enumeration of publication type codes, per TY field of the RIS specification.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLEnumType("PublicationKind")
public enum PublicationKind {

	ABST("ABST", "Abstract"), //
	ADVS("ADVS", "Audiovisual material"), //
	AGGR("AGGR", "Aggregated database"), //
	ANCIENT("ANCIENT", "Ancient text"), //
	ART("ART", "Art work"), //
	BILL("BILL", "Bill/resolution"), //
	BLOG("BLOG", "Blog"), //
	BOOK("BOOK", "Book, whole"), //
	CASE("CASE", "Case"), //
	CHAP("CHAP", "Book section"), //
	CHART("CHART", "Chart"), //
	CLSWK("CLSWK", "Classical work"), //
	COMP("COMP", "Computer program"), //
	CONF("CONF", "Conference proceeding"), //
	CPAPER("CPAPER", "Conference paper"), //
	CTLG("CTLG", "Catalogue"), //
	DATA("DATA", "Dataset"), //
	DBASE("DBASE", "Online dtaabase"), //
	DICT("DICT", "Dictionary"), //
	EBOOK("EBOOK", "Electronic book"), //
	ECHAP("ECHAP", "Electronic book section"), //
	EDBOOK("EDBOOK", "Edited book"), //
	EJOUR("EJOUR", "Electronic article"), //
	ELEC("ELEC", "Electronic citation"), //
	ENCYC("ENCYC", "Encyclopaedia article"), //
	EQUA("EQUA", "Equation"), //
	FIGURE("FIGURE", "Figure"), //
	GEN("GEN", "Generic"), //
	GOVDOC("GOVDOC", "Government document"), //
	GRANT("GRANT", "Grant"), //
	HEAR("HEAR", "Hearing"), //
	ICOMM("ICOMM", "Internet communication"), //
	INPR("INPR", "In Press"), //
	JFULL("JFULL", "Journal (full)"), //
	JOUR("JOUR", "Journal"), //
	LEGAL("LEGAL", "Legal rule or regulation"), //
	MANSCPT("MANSCPT", "Manuscript"), //
	MAP("MAP", "Map"), //
	MGZN("MGZN", "Magazine article"), //
	MPCT("MPCT", "Motion picture"), //
	MULTI("MULTI", "Online multimedia"), //
	MUSIC("MUSIC", "Music score"), //
	NEWS("NEWS", "Newspaper"), //
	PAMP("PAMP", "Pamphlet"), //
	PAT("PAT", "Patent"), //
	PCOMM("PCOMM", "Personal communication"), //
	RPRT("RPRT", "Report"), //
	SER("SER", "Serial publication"), //
	SLIDE("SLIDE", "Slide presentation"), //
	SOUND("SOUND", "Sound recording"), //
	STAND("STAND", "Standard"), //
	STAT("STAT", "Statute"), //
	THES("THES", "Thesis/dissertation"), //
	UNBILL("UNBILL", "Unenacted bill/resolution"), //
	UNPB("UNPB", "Unpublished work"), //
	VIDEO("VIDEO", "Video recording"), //
	WEB("WEB", "Web page"); //

	// The graphQlValue is needed on server side, to map the enum value to the value defined in the GraphQL schema. They
	// are different when the value in the GraphQL schema is a Java reserved keyword.
	private final String graphQlValue;
	private final String label;

	private PublicationKind(String graphQlValue, String label) {
		this.graphQlValue = graphQlValue;
		this.label = label;
	}

	/**
	 * Returns the value of this constant, as specified in the GraphQL schema. This is usually the same as the enum
	 * item's name. But it will differ if this name is a Java reserved keyword (in which case the name is prefixed by an
	 * underscore)
	 * @return the enum constant with the specified name, as defined in the GraphQL schema
	 */
	public String graphQlValue() {
		return this.graphQlValue;
	}

	/**
	 * Returns the label for this constant.
	 * @return the label
	 */
	public String label() {
		return this.label;
	}

	/**
	 * Returns the enum constant of this type with the specified name (as specified in the GraphQL schema). The string
	 * must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters
	 * are not permitted.)
	 * @param graphQlValue The value, as defined in the GraphQL schema. This is usually the same as the enum item's
	 * name. But it will differ if this name is a Java reserved keyword (in which case the name is prefixed by an
	 * underscore)
	 * @return the enum constant with the specified name
	 * @throws IllegalArgumentException if this enum type has no constant with the specified GraphQL name
	 */
	public static PublicationKind fromGraphQlValue(String graphQlValue) {
		if (graphQlValue == null) {
			return null;
		}
		for (PublicationKind e : PublicationKind.values()) {
			if (e.graphQlValue().equals(graphQlValue)) {
				return e;
			}
		}
		throw new IllegalArgumentException("No PublicationKind exists with '" + graphQlValue + "' as a GraphQL value");
	}

}
