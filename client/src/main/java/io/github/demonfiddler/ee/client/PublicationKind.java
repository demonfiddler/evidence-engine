/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server and web client.
 * Copyright Â© 2024 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import com.graphql_java_generator.annotation.GraphQLEnumType;

/**
 * Enumeration of publication type codes, per TY field of the RIS specification.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLEnumType("PublicationKind")
public enum PublicationKind {

		ABST("ABST", "Abstract"), //$NON-NLS-1$
		ADVS("ADVS", "Audiovisual material"), //$NON-NLS-1$
		AGGR("AGGR", "Aggregated database"), //$NON-NLS-1$
		ANCIENT("ANCIENT", "Ancient text"), //$NON-NLS-1$
		ART("ART", "Art work"), //$NON-NLS-1$
		BILL("BILL", "Bill/resolution"), //$NON-NLS-1$
		BLOG("BLOG", "Blog"), //$NON-NLS-1$
		BOOK("BOOK", "Book, whole"), //$NON-NLS-1$
		CASE("CASE", "Case"), //$NON-NLS-1$
		CHAP("CHAP", "Book section"), //$NON-NLS-1$
		CHART("CHART", "Chart"), //$NON-NLS-1$
		CLSWK("CLSWK", "Classical work"), //$NON-NLS-1$
		COMP("COMP", "Computer program"), //$NON-NLS-1$
		CONF("CONF", "Conference proceeding"), //$NON-NLS-1$
		CPAPER("CPAPER", "Conference paper"), //$NON-NLS-1$
		CTLG("CTLG", "Catalogue"), //$NON-NLS-1$
		DATA("DATA", "Dataset"), //$NON-NLS-1$
		DBASE("DBASE", "Online dtaabase"), //$NON-NLS-1$
		DICT("DICT", "Dictionary"), //$NON-NLS-1$
		EBOOK("EBOOK", "Electronic book"), //$NON-NLS-1$
		ECHAP("ECHAP", "Electronic book section"), //$NON-NLS-1$
		EDBOOK("EDBOOK", "Edited book"), //$NON-NLS-1$
		EJOUR("EJOUR", "Electronic article"), //$NON-NLS-1$
		ELEC("ELEC", "Electronic citation"), //$NON-NLS-1$
		ENCYC("ENCYC", "Encyclopaedia article"), //$NON-NLS-1$
		EQUA("EQUA", "Equation"), //$NON-NLS-1$
		FIGURE("FIGURE", "Figure"), //$NON-NLS-1$
		GEN("GEN", "Generic"), //$NON-NLS-1$
		GOVDOC("GOVDOC", "Government document"), //$NON-NLS-1$
		GRANT("GRANT", "Grant"), //$NON-NLS-1$
		HEAR("HEAR", "Hearing"), //$NON-NLS-1$
		ICOMM("ICOMM", "Internet communication"), //$NON-NLS-1$
		INPR("INPR", "In Press"), //$NON-NLS-1$
		JFULL("JFULL", "Journal (full)"), //$NON-NLS-1$
		JOUR("JOUR", "Journal"), //$NON-NLS-1$
		LEGAL("LEGAL", "Legal rule or regulation"), //$NON-NLS-1$
		MANSCPT("MANSCPT", "Manuscript"), //$NON-NLS-1$
		MAP("MAP", "Map"), //$NON-NLS-1$
		MGZN("MGZN", "Magazine article"), //$NON-NLS-1$
		MPCT("MPCT", "Motion picture"), //$NON-NLS-1$
		MULTI("MULTI", "Online multimedia"), //$NON-NLS-1$
		MUSIC("MUSIC", "Music score"), //$NON-NLS-1$
		NEWS("NEWS", "Newspaper"), //$NON-NLS-1$
		PAMP("PAMP", "Pamphlet"), //$NON-NLS-1$
		PAT("PAT", "Patent"), //$NON-NLS-1$
		PCOMM("PCOMM", "Personal communication"), //$NON-NLS-1$
		RPRT("RPRT", "Report"), //$NON-NLS-1$
		SER("SER", "Serial publication"), //$NON-NLS-1$
		SLIDE("SLIDE", "Slide presentation"), //$NON-NLS-1$
		SOUND("SOUND", "Sound recording"), //$NON-NLS-1$
		STAND("STAND", "Standard"), //$NON-NLS-1$
		STAT("STAT", "Statute"), //$NON-NLS-1$
		THES("THES", "Thesis/dissertation"), //$NON-NLS-1$
		UNBILL("UNBILL", "Unenacted bill/resolution"), //$NON-NLS-1$
		UNPB("UNPB", "Unpublished work"), //$NON-NLS-1$
		VIDEO("VIDEO", "Video recording"), //$NON-NLS-1$
		WEB("WEB", "Web page"); //$NON-NLS-1$

	// The graphQlValue is needed on server side, to map the enum value to the value defined in the GraphQL schema. They
	// are different when the value in the GraphQL schema is a Java reserved keyword.
	private final String graphQlValue;
	private final String label;

	private PublicationKind(String graphQlValue, String label) {
		this.graphQlValue = graphQlValue;
		this.label = label;
	}

	/**
	 * Returns the value of this constant, as specified in the GraphQL schema. This is usually the same as the enum
	 * item's name. But it will differ if this name is a Java reserved keyword (in which case the name is prefixed by an
	 * underscore)
	 * @return the enum constant with the specified name, as defined in the GraphQL schema
	 */
	public String graphQlValue() {
		return this.graphQlValue;
	}

	/**
	 * Returns the label for this constant.
	 * @return the label
	 */
	public String getLabel() {
		return this.label;
	}

	/**
	 * Returns the enum constant of this type with the specified name (as specified in the GraphQL schema). The string
	 * must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters
	 * are not permitted.)
	 * @param graphQlValue The value, as defined in the GraphQL schema. This is usually the same as the enum item's
	 * name. But it will differ if this name is a Java reserved keyword (in which case the name is prefixed by an
	 * underscore)
	 * @return the enum constant with the specified name
	 * @throws IllegalArgumentException if this enum type has no constant with the specified GraphQL name
	 */
	static public PublicationKind fromGraphQlValue(String graphQlValue) {
		if (graphQlValue == null) {
			return null;
		}
		for (PublicationKind e : PublicationKind.values()) {
			if (e.graphQlValue().equals(graphQlValue)) {
				return e;
			}
		}
		throw new IllegalArgumentException("No PublicationKind exists with '" + graphQlValue + "' as a GraphQL value"); //$NON-NLS-1$ //$NON-NLS-2$
	}

}
