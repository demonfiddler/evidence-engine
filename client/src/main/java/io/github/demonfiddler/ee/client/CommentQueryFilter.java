/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.time.OffsetDateTime;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import io.github.demonfiddler.ee.client.util.CustomJacksonSerializers;

/**
 * For filtering comment records.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("CommentQueryFilter")
@JsonInclude(Include.NON_NULL)
public class CommentQueryFilter extends AbstractGraphQLObject {

	public CommentQueryFilter() {
	}

	/**
	 * Return only records with these status codes (default: ALL).
	 */
	@JsonProperty("status")
	@GraphQLScalar(fieldName = "status", graphQLTypeSimpleName = "StatusKind", javaClass = StatusKind.class,
		listDepth = 1)
	List<StatusKind> status;

	/**
	 * Free text search string.
	 */
	@JsonProperty("text")
	@GraphQLScalar(fieldName = "text", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String text;

	/**
	 * Whether to search ```text``` in advanced (boolean) mode.
	 */
	@JsonProperty("advancedSearch")
	@GraphQLScalar(fieldName = "advancedSearch", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class,
		listDepth = 0)
	Boolean advancedSearch;

	/**
	 * The identifier of the single record to return.
	 */
	@JsonProperty("recordId")
	@GraphQLScalar(fieldName = "recordId", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long recordId;

	/**
	 * Restrict to specific target entity kind.
	 */
	@JsonProperty("targetKind")
	@GraphQLScalar(fieldName = "targetKind", graphQLTypeSimpleName = "EntityKind", javaClass = EntityKind.class,
		listDepth = 0)
	EntityKind targetKind;

	/**
	 * Restrict to specific entity ID.
	 */
	@JsonProperty("targetId")
	@GraphQLScalar(fieldName = "targetId", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long targetId;

	/**
	 * Restrict to replies to a specific comment.
	 */
	@JsonProperty("parentId")
	@GraphQLScalar(fieldName = "parentId", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long parentId;

	/**
	 * Restrict to comments created by a specific user.
	 */
	@JsonProperty("userId")
	@GraphQLScalar(fieldName = "userId", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long userId;

	/**
	 * Timestamp of first comment to include.
	 */
	@JsonProperty("from")
	@JsonSerialize(using = CustomJacksonSerializers.DateTime.class)
	@GraphQLScalar(fieldName = "from", graphQLTypeSimpleName = "DateTime", javaClass = OffsetDateTime.class,
		listDepth = 0)
	OffsetDateTime from;

	/**
	 * Timestamp of last comment to include.
	 */
	@JsonProperty("to")
	@JsonSerialize(using = CustomJacksonSerializers.DateTime.class)
	@GraphQLScalar(fieldName = "to", graphQLTypeSimpleName = "DateTime", javaClass = OffsetDateTime.class,
		listDepth = 0)
	OffsetDateTime to;

	/**
	 * Return only records with these status codes (default: ALL).
	 */
	@JsonProperty("status")
	public void setStatus(List<StatusKind> status) {
		this.status = status;
	}

	/**
	 * Return only records with these status codes (default: ALL).
	 */
	@JsonProperty("status")
	public List<StatusKind> getStatus() {
		return this.status;
	}

	/**
	 * Free text search string.
	 */
	@JsonProperty("text")
	public void setText(String text) {
		this.text = text;
	}

	/**
	 * Free text search string.
	 */
	@JsonProperty("text")
	public String getText() {
		return this.text;
	}

	/**
	 * Whether to search ```text``` in advanced (boolean) mode.
	 */
	@JsonProperty("advancedSearch")
	public void setAdvancedSearch(Boolean advancedSearch) {
		this.advancedSearch = advancedSearch;
	}

	/**
	 * Whether to search ```text``` in advanced (boolean) mode.
	 */
	@JsonProperty("advancedSearch")
	public Boolean getAdvancedSearch() {
		return this.advancedSearch;
	}

	/**
	 * The identifier of the single record to return.
	 */
	@JsonProperty("recordId")
	public void setRecordId(Long recordId) {
		this.recordId = recordId;
	}

	/**
	 * The identifier of the single record to return.
	 */
	@JsonProperty("recordId")
	public Long getRecordId() {
		return this.recordId;
	}

	/**
	 * Restrict to specific target entity kind.
	 */
	@JsonProperty("targetKind")
	public void setTargetKind(EntityKind targetKind) {
		this.targetKind = targetKind;
	}

	/**
	 * Restrict to specific target entity kind.
	 */
	@JsonProperty("targetKind")
	public EntityKind getTargetKind() {
		return this.targetKind;
	}

	/**
	 * Restrict to specific target entity ID.
	 */
	@JsonProperty("targetId")
	public void setTargetId(Long entityId) {
		this.targetId = entityId;
	}

	/**
	 * Restrict to specific targetentity ID.
	 */
	@JsonProperty("targetId")
	public Long getTargetId() {
		return this.targetId;
	}

	/**
	 * Restrict to replies to a specific comment.
	 */
	@JsonProperty("parentId")
	public void setParentId(Long parentId) {
		this.parentId = parentId;
	}

	/**
	 * Restrict to replies to a specific comment.
	 */
	@JsonProperty("parentId")
	public Long getParentId() {
		return this.parentId;
	}

	/**
	 * Restrict to comments created by a specific user.
	 */
	@JsonProperty("userId")
	public void setUserId(Long userId) {
		this.userId = userId;
	}

	/**
	 * Restrict to comments created by a specific user.
	 */
	@JsonProperty("userId")
	public Long getUserId() {
		return this.userId;
	}

	/**
	 * Timestamp of first comment to include.
	 */
	@JsonProperty("from")
	public void setFrom(OffsetDateTime from) {
		this.from = from;
	}

	/**
	 * Timestamp of first comment to include.
	 */
	@JsonProperty("from")
	public OffsetDateTime getFrom() {
		return this.from;
	}

	/**
	 * Timestamp of last comment to include.
	 */
	@JsonProperty("to")
	public void setTo(OffsetDateTime to) {
		this.to = to;
	}

	/**
	 * Timestamp of last comment to include.
	 */
	@JsonProperty("to")
	public OffsetDateTime getTo() {
		return this.to;
	}

	public String toString() {
		return "CommentQueryFilter {" //
			+ "status: " + this.status //
			+ ", " //
			+ "text: " + this.text //
			+ ", " //
			+ "advancedSearch: " + this.advancedSearch //
			+ ", " //
			+ "recordId: " + this.recordId //
			+ ", " //
			+ "targetKind: " + this.targetKind //
			+ ", " //
			+ "targetId: " + this.targetId //
			+ ", " //
			+ "parentId: " + this.parentId //
			+ ", " //
			+ "userId: " + this.userId //
			+ ", " //
			+ "from: " + this.from //
			+ ", " //
			+ "to: " + this.to //
			+ "}"; //
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {

		private List<StatusKind> status;
		private String text;
		private Boolean advancedSearch;
		private Long recordId;
		private EntityKind targetKind;
		private Long targetId;
		private Long parentId;
		private Long userId;
		private OffsetDateTime from;
		private OffsetDateTime to;

		/**
		 * Return only records with these status codes (default: ALL).
		 */
		public Builder withStatus(List<StatusKind> statusParam) {
			this.status = statusParam;
			return this;
		}

		/**
		 * Free text search string.
		 */
		public Builder withText(String textParam) {
			this.text = textParam;
			return this;
		}

		/**
		 * Whether to search ```text``` in advanced (boolean) mode.
		 */
		public Builder withAdvancedSearch(Boolean advancedSearchParam) {
			this.advancedSearch = advancedSearchParam;
			return this;
		}

		/**
		 * The identifier of the single record to return.
		 */
		public Builder withRecordId(Long recordIdParam) {
			this.recordId = recordIdParam;
			return this;
		}

		/**
		 * Restrict to specific target entity kind.
		 */
		public Builder withTargetKind(EntityKind targetKindParam) {
			this.targetKind = targetKindParam;
			return this;
		}

		/**
		 * Restrict to specific target entity ID.
		 */
		public Builder withTargetId(Long targetIdParam) {
			this.targetId = targetIdParam;
			return this;
		}

		/**
		 * Restrict to replies to a specific comment.
		 */
		public Builder withParentId(Long parentIdParam) {
			this.parentId = parentIdParam;
			return this;
		}

		/**
		 * Restrict to comments created by a specific user.
		 */
		public Builder withUserId(Long userIdParam) {
			this.userId = userIdParam;
			return this;
		}

		/**
		 * Timestamp of first comment to include.
		 */
		public Builder withFrom(OffsetDateTime fromParam) {
			this.from = fromParam;
			return this;
		}

		/**
		 * Timestamp of last comment to include.
		 */
		public Builder withTo(OffsetDateTime toParam) {
			this.to = toParam;
			return this;
		}

		public CommentQueryFilter build() {
			CommentQueryFilter _object = new CommentQueryFilter(); // build(new CommentQueryFilter());
			_object.setStatus(this.status);
			_object.setText(this.text);
			_object.setAdvancedSearch(this.advancedSearch);
			_object.setRecordId(this.recordId);
			_object.setTargetKind(this.targetKind);
			_object.setTargetId(this.targetId);
			_object.setParentId(this.parentId);
			_object.setUserId(this.userId);
			_object.setFrom(this.from);
			_object.setTo(this.to);
			return _object;
		}

	}

}
