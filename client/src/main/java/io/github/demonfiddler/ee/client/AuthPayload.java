/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

import org.dataloader.DataLoader;

import graphql.schema.DataFetchingEnvironment;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import com.graphql_java_generator.client.GraphQLObjectMapper;
import com.graphql_java_generator.annotation.GraphQLDirective;

/**
 * Authentication return value, including a JSON Web Token.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("AuthPayload")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class AuthPayload extends AbstractGraphQLEntity {

	public AuthPayload() {
	}

	/**
	 * The JWT authentication token.
	 */
	@JsonProperty("token")
	@GraphQLScalar(fieldName = "token", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String token;

	/**
	 * The authenticated user.
	 */
	@JsonProperty("user")
	@GraphQLNonScalar(fieldName = "user", graphQLTypeSimpleName = "User", javaClass = User.class, listDepth = 0)
	User user;

	/**
	 * The JWT authentication token.
	 */
	@JsonProperty("token")
	public void setToken(String token) {
		this.token = token;
	}

	/**
	 * The JWT authentication token.
	 */
	@JsonProperty("token")
	public String getToken() {
		return this.token;
	}

	/**
	 * The authenticated user.
	 */
	@JsonProperty("user")
	public void setUser(User user) {
		this.user = user;
	}

	/**
	 * The authenticated user.
	 */
	@JsonProperty("user")
	public User getUser() {
		return this.user;
	}

	public String toString() {
		return "AuthPayload {" //
			+ "token: " + this.token //
			+ ", " //
			+ "user: " + this.user //
			+ ", " //
			+ "__typename: " + this.__typename //
			+ "}"; //
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {

		private String token;
		private User user;

		/**
		 * The JWT authentication token.
		 */
		public Builder withToken(String tokenParam) {
			this.token = tokenParam;
			return this;
		}

		/**
		 * The authenticated user.
		 */
		public Builder withUser(User userParam) {
			this.user = userParam;
			return this;
		}

		public AuthPayload build() {
			AuthPayload _object = new AuthPayload();
			_object.setToken(this.token);
			_object.setUser(this.user);
			_object.set__typename("AuthPayload");
			return _object;
		}

	}

}
