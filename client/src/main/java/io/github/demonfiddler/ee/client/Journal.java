/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.client;

import java.net.URL;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import io.github.demonfiddler.ee.client.util.CustomJacksonDeserializers;

/**
 * Journal details including abbreviation, publisher, etc.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("Journal")
@JsonInclude(Include.NON_NULL)
public class Journal extends AbstractTrackedEntity {

	public Journal() {
	}

	/**
	 * The full journal title.
	 */
	@JsonProperty("title")
	@GraphQLScalar(fieldName = "title", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String title;

	/**
	 * The official abbreviation.
	 */
	@JsonProperty("abbreviation")
	@GraphQLScalar(fieldName = "abbreviation", graphQLTypeSimpleName = "String", javaClass = String.class,
		listDepth = 0)
	String abbreviation;

	/**
	 * Web link to the journal's home page.
	 */
	@JsonProperty("url")
	@JsonDeserialize(using = CustomJacksonDeserializers.URL.class)
	@GraphQLScalar(fieldName = "url", graphQLTypeSimpleName = "URL", javaClass = URL.class, listDepth = 0)
	URL url;

	/**
	 * The International Standard Serial Number.
	 */
	@JsonProperty("issn")
	@JsonDeserialize(using = CustomJacksonDeserializers.ISSN.class)
	@GraphQLScalar(fieldName = "issn", graphQLTypeSimpleName = "ISSN", javaClass = String.class, listDepth = 0)
	String issn;

	/**
	 * The journal publisher.
	 */
	@JsonProperty("publisher")
	@GraphQLNonScalar(fieldName = "publisher", graphQLTypeSimpleName = "Publisher", javaClass = Publisher.class,
		listDepth = 0)
	Publisher publisher;

	/**
	 * Notes about the journal.
	 */
	@JsonProperty("notes")
	@GraphQLScalar(fieldName = "notes", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String notes;

	/**
	 * The full journal title.
	 */
	@JsonProperty("title")
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * The full journal title.
	 */
	@JsonProperty("title")
	public String getTitle() {
		return this.title;
	}

	/**
	 * The official abbreviation.
	 */
	@JsonProperty("abbreviation")
	public void setAbbreviation(String abbreviation) {
		this.abbreviation = abbreviation;
	}

	/**
	 * The official abbreviation.
	 */
	@JsonProperty("abbreviation")
	public String getAbbreviation() {
		return this.abbreviation;
	}

	/**
	 * Web link to the journal's home page.
	 */
	@JsonProperty("url")
	public void setUrl(URL url) {
		this.url = url;
	}

	/**
	 * Web link to the journal's home page.
	 */
	@JsonProperty("url")
	public URL getUrl() {
		return this.url;
	}

	/**
	 * The International Standard Serial Number.
	 */
	@JsonProperty("issn")
	public void setIssn(String issn) {
		this.issn = issn;
	}

	/**
	 * The International Standard Serial Number.
	 */
	@JsonProperty("issn")
	public String getIssn() {
		return this.issn;
	}

	/**
	 * The journal publisher.
	 */
	@JsonProperty("publisher")
	public void setPublisher(Publisher publisher) {
		this.publisher = publisher;
	}

	/**
	 * The journal publisher.
	 */
	@JsonProperty("publisher")
	public Publisher getPublisher() {
		return this.publisher;
	}

	/**
	 * Notes about the journal.
	 */
	@JsonProperty("notes")
	public void setNotes(String notes) {
		this.notes = notes;
	}

	/**
	 * Notes about the journal.
	 */
	@JsonProperty("notes")
	public String getNotes() {
		return this.notes;
	}

	@Override
	public String toString() {
		return "Journal {" //
			+ "id: " + this.id //
			+ ", " //
			+ "entityKind: " + this.entityKind //
			+ ", " //
			+ "status: " + this.status //
			+ ", " //
			+ "rating: " + this.rating //
			+ ", " //
			+ "created: " + this.created //
			+ ", " //
			+ "createdByUser.id: " + (this.createdByUser == null ? null : this.createdByUser.getId()) //
			+ ", " //
			+ "updated: " + this.updated //
			+ ", " //
			+ "updatedByUser.id: " + (this.updatedByUser == null ? null : this.updatedByUser.getId()) //
			+ ", " //
			+ "log: " + this.log //
			+ ", " //
			+ "title: " + this.title //
			+ ", " //
			+ "abbreviation: " + this.abbreviation //
			+ ", " //
			+ "url: " + this.url //
			+ ", " //
			+ "issn: " + this.issn //
			+ ", " //
			+ "publisher: " + this.publisher //
			+ ", " //
			+ "notes: " + this.notes //
			+ ", " //
			+ "__typename: " + this.__typename //
			+ "}";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		result = prime * result + ((abbreviation == null) ? 0 : abbreviation.hashCode());
		result = prime * result + ((url == null) ? 0 : url.hashCode());
		result = prime * result + ((issn == null) ? 0 : issn.hashCode());
		result = prime * result + ((publisher == null) ? 0 : publisher.hashCode());
		result = prime * result + ((notes == null) ? 0 : notes.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
        if (!super.equals(obj))
            return false;
		Journal other = (Journal)obj;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		if (abbreviation == null) {
			if (other.abbreviation != null)
				return false;
		} else if (!abbreviation.equals(other.abbreviation))
			return false;
		if (url == null) {
			if (other.url != null)
				return false;
		} else if (!url.equals(other.url))
			return false;
		if (issn == null) {
			if (other.issn != null)
				return false;
		} else if (!issn.equals(other.issn))
			return false;
		if (publisher == null) {
			if (other.publisher != null)
				return false;
		} else if (!publisher.equals(other.publisher))
			return false;
		if (notes == null) {
			if (other.notes != null)
				return false;
		} else if (!notes.equals(other.notes))
			return false;
		return true;
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractTrackedEntity.Builder<Builder, Journal> {

		private String title;
		private String abbreviation;
		private URL url;
		private String issn;
		private Publisher publisher;
		private String notes;

		/**
		 * The full journal title.
		 */
		public Builder withTitle(String titleParam) {
			this.title = titleParam;
			return this;
		}

		/**
		 * The official abbreviation.
		 */
		public Builder withAbbreviation(String abbreviationParam) {
			this.abbreviation = abbreviationParam;
			return this;
		}

		/**
		 * Web link to the journal's home page.
		 */
		public Builder withUrl(URL urlParam) {
			this.url = urlParam;
			return this;
		}

		/**
		 * The International Standard Serial Number.
		 */
		public Builder withIssn(String issnParam) {
			this.issn = issnParam;
			return this;
		}

		/**
		 * The journal publisher.
		 */
		public Builder withPublisher(Publisher publisherParam) {
			this.publisher = publisherParam;
			return this;
		}

		/**
		 * Notes about the journal.
		 */
		public Builder withNotes(String notesParam) {
			this.notes = notesParam;
			return this;
		}

		@Override
		public Journal build() {
			Journal _object = build(new Journal());
			_object.setTitle(this.title);
			_object.setAbbreviation(this.abbreviation);
			_object.setUrl(this.url);
			_object.setIssn(this.issn);
			_object.setPublisher(this.publisher);
			_object.setNotes(this.notes);
			return _object;
		}

		@Override
		String getTypeName() {
			return "Journal";
		}

	}

}
