/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

// This build script uses GraphQL-Java-Generator to generate client code

compileJava {
	dependsOn generateClientCode
}

tasks.named('processTestResources') {
	dependsOn('generateClientCode')
}

sourceSets.test.java.srcDirs += '/build/generated/sources/graphqlClient'
sourceSets.test.resources.srcDirs += '/build/generated/resources/graphqlClient'
generateClientCodeConf {
	// addRelayConnections = false
	// copyRuntimeSources = false [needs com.graphql-java-generator:graphql-java-runtime dependency]
	customScalars = [
		[
			graphQLTypeName: "Country",
			javaType: "java.lang.String",
			graphQLScalarTypeStaticField: "io.github.demonfiddler.ee.common.graphql.CustomScalars.COUNTRY"
		], [
			graphQLTypeName: "Date",
			javaType: "java.time.LocalDate",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.Date"
		], [
			graphQLTypeName: "DateTime",
			javaType: "java.time.OffsetDateTime",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.DateTime"
		], [
			graphQLTypeName: "ISSN",
			javaType: "java.lang.String",
			graphQLScalarTypeStaticField: "io.github.demonfiddler.ee.common.graphql.CustomScalars.ISSN"
		], [
			graphQLTypeName: "Long",
			javaType: "java.lang.Long",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.GraphQLLong"
		], [
			graphQLTypeName: "URI",
			javaType: "java.net.URI",
			graphQLScalarTypeStaticField: "io.github.demonfiddler.ee.common.graphql.CustomScalars.URI"
		], [
			graphQLTypeName: "URL",
			javaType: "java.net.URL",
			graphQLScalarTypeStaticField: "io.github.demonfiddler.ee.common.graphql.CustomScalars.URL"
		], [
			graphQLTypeName: "Void",
			javaType: "java.lang.Void",
			graphQLScalarTypeStaticField: "io.github.demonfiddler.ee.common.graphql.CustomScalars.VOID"
		]
	]
	javaTypeForIDType = 'java.lang.Long'
	// enumPrefix = 
	// enumSuffix = 
	// generateDeprecatedRequestResponse = false
	// inputPrefix = 
	// inputSuffix = 
	// interfacePrefix = 
	// interfaceSuffix = 
	// jsonGraphqlSchemaFilename = 
	// maxTokens = 2147483647
	packageName = 'io.github.demonfiddler.ee.client'
	// queryMutationExecutionProtocol = http | webSocket
	schemaFileFolder = '../server/src/main/resources/graphql' // default /src/main/resources
	// schemaFilePattern = *.graphqls
	// schemaPersonalizationFile = 
	// separateUtilityClasses = true
	// skipGenerationIfSchemaHasNotChanged = true
	// sourceEncoding = UTF-8
	// springBeanSuffix = 
	targetResourceFolder = './build/generated/resources/graphqlClient'
	targetSourceFolder = './build/generated/sources/graphqlClient'
	// templates = 
	// typePrefix = 
	// typeSuffix = 
	// unionPrefix = 
	// unionSuffix = 
	// useJakartaEE9 = false
}

// Netflix DGS code generator configuration. See https://netflix.github.io/dgs/generating-code-from-schema/.
// generateJava{
// 	schemaPaths = ["${projectDir}/src/main/resources/graphql"] // List of directories containing schema files
// 	packageName = 'io.github.demonfiddler.ee.server' // The package name to use to generate sources
// 	// subPackageNameClient = client
// 	// subPackageNameDatafetchers = datafetchers
// 	// subPackageNameTypes = types
// 	// language = java
// 	// typeMapping (A Map where each key is a GraphQL type, and the value the FQN of a Java class)
// 	// generateBoxedTypes = false
// 	generateServer = true // false
// 	// generateDataTypes = true
// 	// generateInterfaces = false
// 	// generatedSourcesDir = build
// 	// includeQueries = [...]
// 	// includeMutations = [...]
// 	// includeSubscriptions= [...]
// 	// skipEntityQueries = false
// 	// shortProjectionNames = false
// 	// maxProjectionDepth = 10
// 	// includeEnumImports = (map)
// 	// includeImports = mapOf(Pair("validator", "com.test.validator")),
// 	// includeClassImports = mapOf("ValidPerson" to mapOf(Pair("BasicValidation", "com.test.validator.groups")))
// 	// generateCustomAnnotations = false
// 	// addGeneratedAnnotation = false
// 	// disableDatesInGeneratedAnnotation = false
// }
