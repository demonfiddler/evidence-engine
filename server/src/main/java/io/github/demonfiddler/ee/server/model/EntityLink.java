/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.PrimaryKeyJoinColumn;

/**
 * An association between two entity records.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Entity
@PrimaryKeyJoinColumn(name = "id")
@DiscriminatorValue("LNK")
@GraphQLObjectType("EntityLink")
public class EntityLink extends AbstractTrackedEntity {

	/**
	 * The 'linked-from' entity.
	 */
	@GraphQLNonScalar(fieldName = "fromEntity", graphQLTypeSimpleName = "ILinkableEntity",
		javaClass = ILinkableEntity.class, listDepth = 0)
	@ManyToOne(fetch = FetchType.LAZY, optional = false)
	@JoinColumn(name = "from_entity_id", nullable = false)
	AbstractLinkableEntity fromEntity;

	/**
	 * The 'linked-to' entity.
	 */
	@GraphQLNonScalar(fieldName = "toEntity", graphQLTypeSimpleName = "ILinkableEntity",
		javaClass = ILinkableEntity.class, listDepth = 0)
	@ManyToOne(fetch = FetchType.LAZY, optional = false)
	@JoinColumn(name = "to_entity_id", nullable = false)
	AbstractLinkableEntity toEntity;

	/**
	 * The locations within the 'linked-from' record, one per line.
	 */
	@GraphQLScalar(fieldName = "fromEntityLocations", graphQLTypeSimpleName = "String", javaClass = String.class,
		listDepth = 0)
	String fromEntityLocations;

	/**
	 * The locations within the 'linked-to' record, one per line.
	 */
	@GraphQLScalar(fieldName = "toEntityLocations", graphQLTypeSimpleName = "String", javaClass = String.class,
		listDepth = 0)
	String toEntityLocations;

	@Override
	public String getEntityKind() {
		return EntityKind.LNK.name();
	}

	/**
	 * The 'linked-from' entity.
	 */
	public AbstractLinkableEntity getFromEntity() {
		return fromEntity;
	}

	/**
	 * The 'linked-from' entity.
	 */
	public void setFromEntity(AbstractLinkableEntity fromEntity) {
		this.fromEntity = fromEntity;
	}

	/**
	 * The 'linked-to' entity.
	 */
	public AbstractLinkableEntity getToEntity() {
		return toEntity;
	}

	/**
	 * The 'linked-to' entity.
	 */
	public void setToEntity(AbstractLinkableEntity toEntity) {
		this.toEntity = toEntity;
	}

	/**
	 * The locations within the 'linked-from' record, one per line.
	 */
	public void setFromEntityLocations(String fromEntityLocations) {
		this.fromEntityLocations = fromEntityLocations;
	}

	/**
	 * The locations within the 'linked-from' record, one per line.
	 */
	public String getFromEntityLocations() {
		return this.fromEntityLocations;
	}

	/**
	 * The locations within the 'linked-to' record, one per line.
	 */
	public String getToEntityLocations() {
		return toEntityLocations;
	}

	/**
	 * The locations within the 'linked-to' record, one per line.
	 */
	public void setToEntityLocations(String toEntityLocations) {
		this.toEntityLocations = toEntityLocations;
	}

	public String toString() {
		return "EntityLink {" //$NON-NLS-1$
			+ "id: " + this.id //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "entityKind: " + this.getEntityKind() //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "status: " + this.status //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "created: " + this.created //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "createdByUser: " + this.createdByUser //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updated: " + this.updated //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updatedByUser: " + this.updatedByUser //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "log: " + this.log //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "fromEntity: " + this.fromEntity //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "fromEntityLocations: " + this.fromEntityLocations //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "toEntity: " + this.toEntity //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "toEntityLocations: " + this.toEntityLocations //$NON-NLS-1$
			+ "}"; //$NON-NLS-1$
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractTrackedEntity.Builder<Builder, EntityLink> {

		private AbstractLinkableEntity fromEntity;
		private AbstractLinkableEntity toEntity;
		private String fromEntityLocations;
		private String toEntityLocations;

		/**
		 * The unique identifier of the 'linked-from' record.
		 */
		public Builder withFromEntity(AbstractLinkableEntity fromEntityParam) {
			this.fromEntity = fromEntityParam;
			return this;
		}

		/**
		 * The unique identifier of the 'linked-to' record.
		 */
		public Builder withToEntity(AbstractLinkableEntity toEntityParam) {
			this.toEntity = toEntityParam;
			return this;
		}

		/**
		 * The locations within the 'linked-from' record, one per line.
		 */
		public Builder withFromEntityLocations(String fromEntityLocationsParam) {
			this.fromEntityLocations = fromEntityLocationsParam;
			return this;
		}

		/**
		 * The locations within the 'linked-to' record, one per line.
		 */
		public Builder withToEntityLocations(String toEntityLocationsParam) {
			this.toEntityLocations = toEntityLocationsParam;
			return this;
		}

		@Override
		public EntityLink build() {
			EntityLink _object = build(new EntityLink());
			_object.setFromEntity(this.fromEntity);
			_object.setToEntity(this.toEntity);
			_object.setFromEntityLocations(this.fromEntityLocations);
			_object.setToEntityLocations(this.toEntityLocations);
			return _object;
		}

	}

}
