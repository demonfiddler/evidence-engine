/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server and web client.
 * Copyright Â© 2024 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import java.net.URL;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

import org.dataloader.DataLoader;

import graphql.schema.DataFetchingEnvironment;

import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;

import com.graphql_java_generator.annotation.GraphQLDirective;

/**
 * An input for creating or updating a publication.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("PublicationInput")
@SuppressWarnings("unused")
public class PublicationInput {

	/**
	 * The publication identifier, required if updating an existing record.
	 */
	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long id;

	/**
	 * The names of the author, one per line.
	 */
	@GraphQLScalar(fieldName = "authorNames", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String authorNames;

	/**
	 * The identifier(s) of the author(s) of the publication.
	 */
	@GraphQLScalar(fieldName = "authorIds", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 1)
	List<Long> authorIds;

	/**
	 * The publication title.
	 */
	@GraphQLScalar(fieldName = "title", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String title;

	/**
	 * The name of the journal in which the publication appeared.
	 */
	@GraphQLScalar(fieldName = "journal", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String journal;

	/**
	 * The location, typically a volume/issue and/or page number(s).
	 */
	@GraphQLScalar(fieldName = "location", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String location;

	/**
	 * The publication type.
	 */
	@GraphQLScalar(fieldName = "kind", graphQLTypeSimpleName = "PublicationKind", javaClass = PublicationKind.class,
		listDepth = 0)
	PublicationKind kind;

	/**
	 * The publication date.
	 */
	@GraphQLScalar(fieldName = "date", graphQLTypeSimpleName = "Date", javaClass = LocalDate.class, listDepth = 0)
	LocalDate date;

	/**
	 * The publication year.
	 */
	@GraphQLScalar(fieldName = "year", graphQLTypeSimpleName = "Int", javaClass = Integer.class, listDepth = 0)
	Integer year;

	/**
	 * The publication abstract.
	 */
	@GraphQLScalar(fieldName = "abstract", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String _abstract;

	/**
	 * User notes about the publication.
	 */
	@GraphQLScalar(fieldName = "notes", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String notes;

	/**
	 * Whether the publication has been peer reviewed.
	 */
	@GraphQLScalar(fieldName = "peerReviewed", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class,
		listDepth = 0)
	Boolean peerReviewed;

	/**
	 * The digital object identifier.
	 */
	@GraphQLScalar(fieldName = "doi", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String doi;

	/**
	 * The International Standard Book Number.
	 */
	@GraphQLScalar(fieldName = "isbn", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String isbn;

	/**
	 * The URL for the publication online.
	 */
	@GraphQLScalar(fieldName = "url", graphQLTypeSimpleName = "URL", javaClass = java.net.URL.class, listDepth = 0)
	java.net.URL url;

	/**
	 * Flag to indicate that url content is cached on this application server.
	 */
	@GraphQLScalar(fieldName = "cached", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class, listDepth = 0)
	Boolean cached;

	/**
	 * The date the publication was accessed when compiling the database.
	 */
	@GraphQLScalar(fieldName = "accessed", graphQLTypeSimpleName = "Date", javaClass = LocalDate.class, listDepth = 0)
	LocalDate accessed;

	/**
	 * The publication identifier, required if updating an existing record.
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * The publication identifier, required if updating an existing record.
	 */
	public Long getId() {
		return this.id;
	}

	/**
	 * The names of the author, one per line.
	 */
	public void setAuthorNames(String authorNames) {
		this.authorNames = authorNames;
	}

	/**
	 * The names of the author, one per line.
	 */
	public String getAuthorNames() {
		return this.authorNames;
	}

	/**
	 * The identifier(s) of the author(s) of the publication.
	 */
	public void setAuthorIds(List<Long> authorIds) {
		this.authorIds = authorIds;
	}

	/**
	 * The identifier(s) of the author(s) of the publication.
	 */
	public List<Long> getAuthorIds() {
		return this.authorIds;
	}

	/**
	 * The publication title.
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * The publication title.
	 */
	public String getTitle() {
		return this.title;
	}

	/**
	 * The name of the journal in which the publication appeared.
	 */
	public void setJournal(String journal) {
		this.journal = journal;
	}

	/**
	 * The name of the journal in which the publication appeared.
	 */
	public String getJournal() {
		return this.journal;
	}

	/**
	 * The location, typically a volume/issue and/or page number(s).
	 */
	public void setLocation(String location) {
		this.location = location;
	}

	/**
	 * The location, typically a volume/issue and/or page number(s).
	 */
	public String getLocation() {
		return this.location;
	}

	/**
	 * The publication type.
	 */
	public void setKind(PublicationKind kind) {
		this.kind = kind;
	}

	/**
	 * The publication type.
	 */
	public PublicationKind getKind() {
		return this.kind;
	}

	/**
	 * The publication date.
	 */
	public void setDate(LocalDate date) {
		this.date = date;
	}

	/**
	 * The publication date.
	 */
	public LocalDate getDate() {
		return this.date;
	}

	/**
	 * The publication year.
	 */
	public void setYear(Integer year) {
		this.year = year;
	}

	/**
	 * The publication year.
	 */
	public Integer getYear() {
		return this.year;
	}

	/**
	 * The publication abstract.
	 */
	public void setAbstract(String _abstract) {
		this._abstract = _abstract;
	}

	/**
	 * The publication abstract.
	 */
	public String getAbstract() {
		return this._abstract;
	}

	/**
	 * User notes about the publication.
	 */
	public void setNotes(String notes) {
		this.notes = notes;
	}

	/**
	 * User notes about the publication.
	 */
	public String getNotes() {
		return this.notes;
	}

	/**
	 * Whether the publication has been peer reviewed.
	 */
	public void setPeerReviewed(Boolean peerReviewed) {
		this.peerReviewed = peerReviewed;
	}

	/**
	 * Whether the publication has been peer reviewed.
	 */
	public Boolean getPeerReviewed() {
		return this.peerReviewed;
	}

	/**
	 * The digital object identifier.
	 */
	public void setDoi(String doi) {
		this.doi = doi;
	}

	/**
	 * The digital object identifier.
	 */
	public String getDoi() {
		return this.doi;
	}

	/**
	 * The International Standard Book Number.
	 */
	public void setIsbn(String isbn) {
		this.isbn = isbn;
	}

	/**
	 * The International Standard Book Number.
	 */
	public String getIsbn() {
		return this.isbn;
	}

	/**
	 * The URL for the publication online.
	 */
	public void setUrl(URL url) {
		this.url = url;
	}

	/**
	 * The URL for the publication online.
	 */
	public URL getUrl() {
		return this.url;
	}

	/**
	 * Flag to indicate that url content is cached on this application server.
	 */
	public void setCached(Boolean cached) {
		this.cached = cached;
	}

	/**
	 * Flag to indicate that url content is cached on this application server.
	 */
	public Boolean getCached() {
		return this.cached;
	}

	/**
	 * The date the publication was accessed when compiling the database.
	 */
	public void setAccessed(java.time.LocalDate accessed) {
		this.accessed = accessed;
	}

	/**
	 * The date the publication was accessed when compiling the database.
	 */
	public java.time.LocalDate getAccessed() {
		return this.accessed;
	}

	public String toString() {
		return "PublicationInput {" //$NON-NLS-1$
			+ "id: " + this.id //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "authorNames: " + this.authorNames //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "authorIds: " + this.authorIds //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "title: " + this.title //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "journal: " + this.journal //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "location: " + this.location //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "kind: " + this.kind //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "date: " + this.date //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "year: " + this.year //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "_abstract: " + this._abstract //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "notes: " + this.notes //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "peerReviewed: " + this.peerReviewed //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "doi: " + this.doi //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "isbn: " + this.isbn //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "url: " + this.url //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "cached: " + this.cached //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "accessed: " + this.accessed //$NON-NLS-1$
			+ "}"; //$NON-NLS-1$
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private Long id;
		private String authorNames;
		private List<Long> authorIds;
		private String title;
		private String journal;
		private String location;
		private PublicationKind kind;
		private java.time.LocalDate date;
		private Integer year;
		private String _abstract;
		private String notes;
		private Boolean peerReviewed;
		private String doi;
		private String isbn;
		private java.net.URL url;
		private Boolean cached;
		private java.time.LocalDate accessed;

		/**
		 * The publication identifier, required if updating an existing record.
		 */
		public Builder withId(Long idParam) {
			this.id = idParam;
			return this;
		}

		/**
		 * The names of the author, one per line.
		 */
		public Builder withAuthorNames(String authorNamesParam) {
			this.authorNames = authorNamesParam;
			return this;
		}

		/**
		 * The identifier(s) of the author(s) of the publication.
		 */
		public Builder withAuthorIds(List<Long> authorIdsParam) {
			this.authorIds = authorIdsParam;
			return this;
		}

		/**
		 * The publication title.
		 */
		public Builder withTitle(String titleParam) {
			this.title = titleParam;
			return this;
		}

		/**
		 * The name of the journal in which the publication appeared.
		 */
		public Builder withJournal(String journalParam) {
			this.journal = journalParam;
			return this;
		}

		/**
		 * The location, typically a volume/issue and/or page number(s).
		 */
		public Builder withLocation(String locationParam) {
			this.location = locationParam;
			return this;
		}

		/**
		 * The publication type.
		 */
		public Builder withKind(PublicationKind kindParam) {
			this.kind = kindParam;
			return this;
		}

		/**
		 * The publication date.
		 */
		public Builder withDate(LocalDate dateParam) {
			this.date = dateParam;
			return this;
		}

		/**
		 * The publication year.
		 */
		public Builder withYear(Integer yearParam) {
			this.year = yearParam;
			return this;
		}

		/**
		 * The publication abstract.
		 */
		public Builder withAbstract(String _abstractParam) {
			this._abstract = _abstractParam;
			return this;
		}

		/**
		 * User notes about the publication.
		 */
		public Builder withNotes(String notesParam) {
			this.notes = notesParam;
			return this;
		}

		/**
		 * Whether the publication has been peer reviewed.
		 */
		public Builder withPeerReviewed(Boolean peerReviewedParam) {
			this.peerReviewed = peerReviewedParam;
			return this;
		}

		/**
		 * The digital object identifier.
		 */
		public Builder withDoi(String doiParam) {
			this.doi = doiParam;
			return this;
		}

		/**
		 * The International Standard Book Number.
		 */
		public Builder withIsbn(String isbnParam) {
			this.isbn = isbnParam;
			return this;
		}

		/**
		 * The URL for the publication online.
		 */
		public Builder withUrl(URL urlParam) {
			this.url = urlParam;
			return this;
		}

		/**
		 * Flag to indicate that url content is cached on this application server.
		 */
		public Builder withCached(Boolean cachedParam) {
			this.cached = cachedParam;
			return this;
		}

		/**
		 * The date the publication was accessed when compiling the database.
		 */
		public Builder withAccessed(LocalDate accessedParam) {
			this.accessed = accessedParam;
			return this;
		}

		public PublicationInput build() {
			PublicationInput _object = new PublicationInput();
			_object.setId(this.id);
			_object.setAuthorNames(this.authorNames);
			_object.setAuthorIds(this.authorIds);
			_object.setTitle(this.title);
			_object.setJournal(this.journal);
			_object.setLocation(this.location);
			_object.setKind(this.kind);
			_object.setDate(this.date);
			_object.setYear(this.year);
			_object.setAbstract(this._abstract);
			_object.setNotes(this.notes);
			_object.setPeerReviewed(this.peerReviewed);
			_object.setDoi(this.doi);
			_object.setIsbn(this.isbn);
			_object.setUrl(this.url);
			_object.setCached(this.cached);
			_object.setAccessed(this.accessed);
			return _object;
		}
	}

}
