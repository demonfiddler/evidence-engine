/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import java.time.OffsetDateTime;

import com.graphql_java_generator.annotation.GraphQLDirective;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;

/**
 * A log entry to show who changed what and when
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Entity
@GraphQLObjectType("Log")
public class Log implements IBaseEntity {

	/**
	 * The unique identifier for the log entry.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long id;

	/**
	 * The date-time stamp.
	 */
	@GraphQLScalar(fieldName = "timestamp", graphQLTypeSimpleName = "DateTime", javaClass = OffsetDateTime.class,
		listDepth = 0)
	OffsetDateTime timestamp;

	/**
	 * The user who made the change.
	 */
	@GraphQLNonScalar(fieldName = "user", graphQLTypeSimpleName = "User", javaClass = User.class, listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = {}, parameterTypes = {}, parameterValues = {})
	@ManyToOne(fetch = FetchType.LAZY, optional = false)
	@JoinColumn(name = "user_id", nullable = false)
	User user;

	/**
	 * The kind of transaction.
	 */
	@GraphQLScalar(fieldName = "transactionKind", graphQLTypeSimpleName = "String", javaClass = String.class,
		listDepth = 0)
	String transactionKind;

	/**
	 * The kind of entity affected.
	 */
	@GraphQLScalar(fieldName = "entityKind", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String entityKind;

	/**
	 * The ID of the entity affected.
	 */
	@GraphQLScalar(fieldName = "entityId", graphQLTypeSimpleName = "Long", javaClass = Long.class, listDepth = 0)
	Long entityId;

	/**
	 * The kind of entity linked/unlinked (where applicable).
	 */
	@GraphQLScalar(fieldName = "linkedEntityKind", graphQLTypeSimpleName = "String", javaClass = String.class,
		listDepth = 0)
	String linkedEntityKind;

	/**
	 * The ID of the entity linked/unlinked (where applicable).
	 */
	@GraphQLScalar(fieldName = "linkedEntityId", graphQLTypeSimpleName = "Long", javaClass = Long.class, listDepth = 0)
	Long linkedEntityId;

	/**
	 * The unique identifier for the log entry.
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * The unique identifier for the log entry.
	 */
	public Long getId() {
		return this.id;
	}

	/**
	 * The date-time stamp.
	 */
	public void setTimestamp(OffsetDateTime timestamp) {
		this.timestamp = timestamp;
	}

	/**
	 * The date-time stamp.
	 */
	public OffsetDateTime getTimestamp() {
		return this.timestamp;
	}

	/**
	 * The user who made the change.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = {}, parameterTypes = {}, parameterValues = {})
	public void setUser(User user) {
		this.user = user;
	}

	/**
	 * The user who made the change.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = {}, parameterTypes = {}, parameterValues = {})
	public User getUser() {
		return this.user;
	}

	/**
	 * The kind of transaction.
	 */
	public void setTransactionKind(String transactionKind) {
		this.transactionKind = transactionKind;
	}

	/**
	 * The kind of transaction.
	 */
	public String getTransactionKind() {
		return this.transactionKind;
	}

	/**
	 * The kind of entity affected.
	 */
	public void setEntityKind(String entityKind) {
		this.entityKind = entityKind;
	}

	/**
	 * The kind of entity affected.
	 */
	public String getEntityKind() {
		return this.entityKind;
	}

	/**
	 * The ID of the entity affected.
	 */
	public void setEntityId(Long entityId) {
		this.entityId = entityId;
	}

	/**
	 * The ID of the entity affected.
	 */
	public Long getEntityId() {
		return this.entityId;
	}

	/**
	 * The kind of entity linked/unlinked (where applicable).
	 */
	public void setLinkedEntityKind(String linkedEntityKind) {
		this.linkedEntityKind = linkedEntityKind;
	}

	/**
	 * The kind of entity linked/unlinked (where applicable).
	 */
	public String getLinkedEntityKind() {
		return this.linkedEntityKind;
	}

	/**
	 * The ID of the entity linked/unlinked (where applicable).
	 */
	public void setLinkedEntityId(Long linkedEntityId) {
		this.linkedEntityId = linkedEntityId;
	}

	/**
	 * The ID of the entity linked/unlinked (where applicable).
	 */
	public Long getLinkedEntityId() {
		return this.linkedEntityId;
	}

	public String toString() {
		return "Log {" //
			+ "id: " + this.id //
			+ ", " //
			+ "timestamp: " + this.timestamp //
			+ ", " //
			+ "user: " + this.user //
			+ ", " //
			+ "transactionKind: " + this.transactionKind //
			+ ", " //
			+ "entityKind: " + this.entityKind //
			+ ", " //
			+ "entityId: " + this.entityId //
			+ ", " //
			+ "linkedEntityKind: " + this.linkedEntityKind //
			+ ", " //
			+ "linkedEntityId: " + this.linkedEntityId //
			+ "}"; //
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {

		private Long id;
		private OffsetDateTime timestamp;
		private User user;
		private String transactionKind;
		private String entityKind;
		private Long entityId;
		private String linkedEntityKind;
		private Long linkedEntityId;

		/**
		 * The unique identifier for the log entry.
		 */
		public Builder withId(Long idParam) {
			this.id = idParam;
			return this;
		}

		/**
		 * The date-time stamp.
		 */
		public Builder withTimestamp(OffsetDateTime timestampParam) {
			this.timestamp = timestampParam;
			return this;
		}

		/**
		 * The ID of the user who made the change.
		 */
		public Builder withUser(User userParam) {
			this.user = userParam;
			return this;
		}

		/**
		 * The kind of transaction.
		 */
		public Builder withTransactionKind(String transactionKindParam) {
			this.transactionKind = transactionKindParam;
			return this;
		}

		/**
		 * The kind of entity affected.
		 */
		public Builder withEntityKind(String entityKindParam) {
			this.entityKind = entityKindParam;
			return this;
		}

		/**
		 * The ID of the entity affected.
		 */
		public Builder withEntityId(Long entityIdParam) {
			this.entityId = entityIdParam;
			return this;
		}

		/**
		 * The kind of entity linked/unlinked (where applicable).
		 */
		public Builder withLinkedEntityKind(String linkedEntityKindParam) {
			this.linkedEntityKind = linkedEntityKindParam;
			return this;
		}

		/**
		 * The ID of the entity linked/unlinked (where applicable).
		 */
		public Builder withLinkedEntityId(Long linkedEntityIdParam) {
			this.linkedEntityId = linkedEntityIdParam;
			return this;
		}

		public Log build() {
			Log _object = new Log();
			_object.setId(this.id);
			_object.setTimestamp(this.timestamp);
			_object.setUser(this.user);
			_object.setTransactionKind(this.transactionKind);
			_object.setEntityKind(this.entityKind);
			_object.setEntityId(this.entityId);
			_object.setLinkedEntityKind(this.linkedEntityKind);
			_object.setLinkedEntityId(this.linkedEntityId);
			return _object;
		}

	}

}
