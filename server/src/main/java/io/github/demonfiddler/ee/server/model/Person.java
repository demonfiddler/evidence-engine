/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import java.time.OffsetDateTime;

import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Transient;

/**
 * A person associated with given topic(s).
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Entity
@GraphQLObjectType("Person")
public class Person implements IBaseEntity, ITrackedEntity, ITopicalEntity {

	/**
	 * The unique person identifier.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long id;

	/**
	 * The entity status.
	 */
	@GraphQLScalar(fieldName = "status", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String status;

	/**
	 * When the record was created.
	 */
	@GraphQLScalar(fieldName = "created", graphQLTypeSimpleName = "DateTime", javaClass = OffsetDateTime.class,
		listDepth = 0)
	OffsetDateTime created;

	/**
	 * The user who created the record.
	 */
	@GraphQLNonScalar(fieldName = "createdByUser", graphQLTypeSimpleName = "User", javaClass = User.class,
		listDepth = 0)
	@ManyToOne(fetch = FetchType.LAZY, optional = false)
	@JoinColumn(name = "created_by_user_id", nullable = false)
	User createdByUser;

	/**
	 * When the record was last updated.
	 */
	@GraphQLScalar(fieldName = "updated", graphQLTypeSimpleName = "DateTime", javaClass = OffsetDateTime.class,
		listDepth = 0)
	OffsetDateTime updated;

	/**
	 * The user who last updated the record.
	 */
	@GraphQLNonScalar(fieldName = "updatedByUser", graphQLTypeSimpleName = "User", javaClass = User.class,
		listDepth = 0)
	@ManyToOne(fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "updated_by_user_id", nullable = true)
	User updatedByUser;

	/**
	 * Log of transactions involving the record.
	 */
	@Transient
	@GraphQLNonScalar(fieldName = "log", graphQLTypeSimpleName = "LogPage", javaClass = LogPage.class, listDepth = 0)
	LogPage log;

	/**
	 * The topic(s) associated with the person.
	 */
	@Transient
	@GraphQLNonScalar(fieldName = "topicRefs", graphQLTypeSimpleName = "TopicRefPage", javaClass = TopicRefPage.class,
		listDepth = 0)
	TopicRefPage topicRefs;

	/**
	 * The person's title(s).
	 */
	@GraphQLScalar(fieldName = "title", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String title;

	/**
	 * The person's first name(s).
	 */
	@GraphQLScalar(fieldName = "firstName", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String firstName;

	/**
	 * The person's nickname.
	 */
	@GraphQLScalar(fieldName = "nickname", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String nickname;

	/**
	 * The prefix to the person's last name.
	 */
	@GraphQLScalar(fieldName = "prefix", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String prefix;

	/**
	 * The person's last name.
	 */
	@GraphQLScalar(fieldName = "lastName", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String lastName;

	/**
	 * The suffix to the person's name.
	 */
	@GraphQLScalar(fieldName = "suffix", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String suffix;

	/**
	 * Last name alias.
	 */
	@GraphQLScalar(fieldName = "alias", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String alias;

	/**
	 * Brief biography, notes, etc.
	 */
	@GraphQLScalar(fieldName = "notes", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String notes;

	/**
	 * Academic qualifications.
	 */
	@GraphQLScalar(fieldName = "qualifications", graphQLTypeSimpleName = "String", javaClass = String.class,
		listDepth = 0)
	String qualifications;

	/**
	 * The primary country associated with the person.
	 */
	@GraphQLScalar(fieldName = "country", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	@Column(name = "country_code")
	String country;

	/**
	 * A five-star rating for the person, intended to reflect credibility, experience, qualifications, etc.
	 */
	@GraphQLScalar(fieldName = "rating", graphQLTypeSimpleName = "Int", javaClass = Integer.class, listDepth = 0)
	Integer rating;

	/**
	 * Whether the person's credentials have been checked.
	 */
	@GraphQLScalar(fieldName = "checked", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class, listDepth = 0)
	Boolean checked;

	/**
	 * Whether the person has authored any peer-reviewed publications.
	 */
	@GraphQLScalar(fieldName = "published", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class, listDepth = 0)
	Boolean published;

	/**
	 * The unique person identifier.
	 */
	@Override
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * The unique person identifier.
	 */
	@Override
	public Long getId() {
		return this.id;
	}

	/**
	 * The entity status.
	 */
	@Override
	public void setStatus(String status) {
		this.status = status;
	}

	/**
	 * The entity status.
	 */
	@Override
	public String getStatus() {
		return this.status;
	}

	/**
	 * When the record was created.
	 */
	@Override
	public void setCreated(java.time.OffsetDateTime created) {
		this.created = created;
	}

	/**
	 * When the record was created.
	 */
	@Override
	public java.time.OffsetDateTime getCreated() {
		return this.created;
	}

	/**
	 * The user who created the record.
	 */
	@Override
	public void setCreatedByUser(User createdByUser) {
		this.createdByUser = createdByUser;
	}

	/**
	 * The user who created the record.
	 */
	@Override
	public User getCreatedByUser() {
		return this.createdByUser;
	}

	/**
	 * When the record was last updated.
	 */
	@Override
	public void setUpdated(OffsetDateTime updated) {
		this.updated = updated;
	}

	/**
	 * When the record was last updated.
	 */
	@Override
	public OffsetDateTime getUpdated() {
		return this.updated;
	}

	/**
	 * The user who last updated the record.
	 */
	@Override
	public void setUpdatedByUser(User updatedByUser) {
		this.updatedByUser = updatedByUser;
	}

	/**
	 * The user who last updated the record.
	 */
	@Override
	public User getUpdatedByUser() {
		return this.updatedByUser;
	}

	/**
	 * Log of transactions involving the record.
	 */
	@Override
	public void setLog(LogPage log) {
		this.log = log;
	}

	/**
	 * Log of transactions involving the record.
	 */
	@Override
	public LogPage getLog() {
		return this.log;
	}

	/**
	 * The topic(s) associated with the person.
	 */
	@Override
	public void setTopicRefs(TopicRefPage topicRefs) {
		this.topicRefs = topicRefs;
	}

	/**
	 * The topic(s) associated with the person.
	 */
	@Override
	public TopicRefPage getTopicRefs() {
		return this.topicRefs;
	}

	/**
	 * The person's title(s).
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * The person's title(s).
	 */
	public String getTitle() {
		return this.title;
	}

	/**
	 * The person's first name(s).
	 */
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	/**
	 * The person's first name(s).
	 */
	public String getFirstName() {
		return this.firstName;
	}

	/**
	 * The person's nickname.
	 */
	public void setNickname(String nickname) {
		this.nickname = nickname;
	}

	/**
	 * The person's nickname.
	 */
	public String getNickname() {
		return this.nickname;
	}

	/**
	 * The prefix to the person's last name.
	 */
	public void setPrefix(String prefix) {
		this.prefix = prefix;
	}

	/**
	 * The prefix to the person's last name.
	 */
	public String getPrefix() {
		return this.prefix;
	}

	/**
	 * The person's last name.
	 */
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	/**
	 * The person's last name.
	 */
	public String getLastName() {
		return this.lastName;
	}

	/**
	 * The suffix to the person's name.
	 */
	public void setSuffix(String suffix) {
		this.suffix = suffix;
	}

	/**
	 * The suffix to the person's name.
	 */
	public String getSuffix() {
		return this.suffix;
	}

	/**
	 * Last name alias.
	 */
	public void setAlias(String alias) {
		this.alias = alias;
	}

	/**
	 * Last name alias.
	 */
	public String getAlias() {
		return this.alias;
	}

	/**
	 * Brief biography, notes, etc.
	 */
	public void setNotes(String notes) {
		this.notes = notes;
	}

	/**
	 * Brief biography, notes, etc.
	 */
	public String getNotes() {
		return this.notes;
	}

	/**
	 * Academic qualifications.
	 */
	public void setQualifications(String qualifications) {
		this.qualifications = qualifications;
	}

	/**
	 * Academic qualifications.
	 */
	public String getQualifications() {
		return this.qualifications;
	}

	/**
	 * The primary country associated with the person.
	 */
	public void setCountry(String country) {
		this.country = country;
	}

	/**
	 * The primary country associated with the person.
	 */
	public String getCountry() {
		return this.country;
	}

	/**
	 * A five-star rating for the person, intended to reflect credibility, experience, qualifications, etc.
	 */
	public void setRating(Integer rating) {
		this.rating = rating;
	}

	/**
	 * A five-star rating for the person, intended to reflect credibility, experience, qualifications, etc.
	 */
	public Integer getRating() {
		return this.rating;
	}

	/**
	 * Whether the person's credentials have been checked.
	 */
	public void setChecked(Boolean checked) {
		this.checked = checked;
	}

	/**
	 * Whether the person's credentials have been checked.
	 */
	public Boolean getChecked() {
		return this.checked;
	}

	/**
	 * Whether the person has authored any peer-reviewed publications.
	 */
	public void setPublished(Boolean published) {
		this.published = published;
	}

	/**
	 * Whether the person has authored any peer-reviewed publications.
	 */
	public Boolean getPublished() {
		return this.published;
	}

	public String toString() {
		return "Person {" //$NON-NLS-1$
			+ "id: " + this.id //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "status: " + this.status //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "created: " + this.created //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "createdByUser: " + this.createdByUser //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updated: " + this.updated //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updatedByUser: " + this.updatedByUser //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "log: " + this.log //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "topicRefs: " + this.topicRefs //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "title: " + this.title //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "firstName: " + this.firstName //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "nickname: " + this.nickname //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "prefix: " + this.prefix //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "lastName: " + this.lastName //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "suffix: " + this.suffix //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "alias: " + this.alias //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "notes: " + this.notes //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "qualifications: " + this.qualifications //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "country: " + this.country //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "rating: " + this.rating //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "checked: " + this.checked //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "published: " + this.published //$NON-NLS-1$
			+ "}"; //$NON-NLS-1$
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private Long id;
		private String status;
		private OffsetDateTime created;
		private User createdByUser;
		private OffsetDateTime updated;
		private User updatedByUser;
		private LogPage log;
		private TopicRefPage topicRefs;
		private String title;
		private String firstName;
		private String nickname;
		private String prefix;
		private String lastName;
		private String suffix;
		private String alias;
		private String notes;
		private String qualifications;
		private String country;
		private Integer rating;
		private Boolean checked;
		private Boolean published;

		/**
		 * The unique person identifier.
		 */
		public Builder withId(Long idParam) {
			this.id = idParam;
			return this;
		}

		/**
		 * The entity status.
		 */
		public Builder withStatus(String statusParam) {
			this.status = statusParam;
			return this;
		}

		/**
		 * When the record was created.
		 */
		public Builder withCreated(java.time.OffsetDateTime createdParam) {
			this.created = createdParam;
			return this;
		}

		/**
		 * The user who created the record.
		 */
		public Builder withCreatedByUser(User createdByUserParam) {
			this.createdByUser = createdByUserParam;
			return this;
		}

		/**
		 * When the record was last updated.
		 */
		public Builder withUpdated(java.time.OffsetDateTime updatedParam) {
			this.updated = updatedParam;
			return this;
		}

		/**
		 * The user who last updated the record.
		 */
		public Builder withUpdatedByUser(User updatedByUserParam) {
			this.updatedByUser = updatedByUserParam;
			return this;
		}

		/**
		 * Log of transactions involving the record.
		 */
		public Builder withLog(LogPage logParam) {
			this.log = logParam;
			return this;
		}

		/**
		 * The topic(s) associated with the person.
		 */
		public Builder withTopicRefs(TopicRefPage topicRefsParam) {
			this.topicRefs = topicRefsParam;
			return this;
		}

		/**
		 * The person's title(s).
		 */
		public Builder withTitle(String titleParam) {
			this.title = titleParam;
			return this;
		}

		/**
		 * The person's first name(s).
		 */
		public Builder withFirstName(String firstNameParam) {
			this.firstName = firstNameParam;
			return this;
		}

		/**
		 * The person's nickname.
		 */
		public Builder withNickname(String nicknameParam) {
			this.nickname = nicknameParam;
			return this;
		}

		/**
		 * The prefix to the person's last name.
		 */
		public Builder withPrefix(String prefixParam) {
			this.prefix = prefixParam;
			return this;
		}

		/**
		 * The person's last name.
		 */
		public Builder withLastName(String lastNameParam) {
			this.lastName = lastNameParam;
			return this;
		}

		/**
		 * The suffix to the person's name.
		 */
		public Builder withSuffix(String suffixParam) {
			this.suffix = suffixParam;
			return this;
		}

		/**
		 * Last name alias.
		 */
		public Builder withAlias(String aliasParam) {
			this.alias = aliasParam;
			return this;
		}

		/**
		 * Brief biography, notes, etc.
		 */
		public Builder withNotes(String notesParam) {
			this.notes = notesParam;
			return this;
		}

		/**
		 * Academic qualifications.
		 */
		public Builder withQualifications(String qualificationsParam) {
			this.qualifications = qualificationsParam;
			return this;
		}

		/**
		 * The primary country associated with the person.
		 */
		public Builder withCountry(String countryParam) {
			this.country = countryParam;
			return this;
		}

		/**
		 * A five-star rating for the person, intended to reflect credibility, experience, qualifications, etc.
		 */
		public Builder withRating(Integer ratingParam) {
			this.rating = ratingParam;
			return this;
		}

		/**
		 * Whether the person's credentials have been checked.
		 */
		public Builder withChecked(Boolean checkedParam) {
			this.checked = checkedParam;
			return this;
		}

		/**
		 * Whether the person has authored any peer-reviewed publications.
		 */
		public Builder withPublished(Boolean publishedParam) {
			this.published = publishedParam;
			return this;
		}

		public Person build() {
			Person _object = new Person();
			_object.setId(this.id);
			_object.setStatus(this.status);
			_object.setCreated(this.created);
			_object.setCreatedByUser(this.createdByUser);
			_object.setUpdated(this.updated);
			_object.setUpdatedByUser(this.updatedByUser);
			_object.setLog(this.log);
			_object.setTopicRefs(this.topicRefs);
			_object.setTitle(this.title);
			_object.setFirstName(this.firstName);
			_object.setNickname(this.nickname);
			_object.setPrefix(this.prefix);
			_object.setLastName(this.lastName);
			_object.setSuffix(this.suffix);
			_object.setAlias(this.alias);
			_object.setNotes(this.notes);
			_object.setQualifications(this.qualifications);
			_object.setCountry(this.country);
			_object.setRating(this.rating);
			_object.setChecked(this.checked);
			_object.setPublished(this.published);
			return _object;
		}
	}

}
