/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.datafetcher;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import com.graphql_java_generator.annotation.GraphQLDirective;

import graphql.schema.DataFetchingEnvironment;
import io.github.demonfiddler.ee.server.model.ClaimInput;
import io.github.demonfiddler.ee.server.model.DeclarationInput;
import io.github.demonfiddler.ee.server.model.EntityLinkInput;
import io.github.demonfiddler.ee.server.model.GroupInput;
import io.github.demonfiddler.ee.server.model.JournalInput;
import io.github.demonfiddler.ee.server.model.AuthorityKind;
import io.github.demonfiddler.ee.server.model.PersonInput;
import io.github.demonfiddler.ee.server.model.PublicationInput;
import io.github.demonfiddler.ee.server.model.PublisherInput;
import io.github.demonfiddler.ee.server.model.QuotationInput;
import io.github.demonfiddler.ee.server.model.StatusKind;
import io.github.demonfiddler.ee.server.model.TopicInput;
import io.github.demonfiddler.ee.server.model.UserInput;

/**
 * Contains the data fetchers that are delegated in the bean that the implementation has to provide, when fetching
 * fields for the Mutation GraphQL type, as defined in the provided GraphQL schema. Please read the
 * <a href= "https://github.com/graphql-java-generator/graphql-maven-plugin-project/wiki/server"> wiki server page</a>
 * for more information on this.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
public interface DataFetchersDelegateMutation {

	/**
	 * Description for the createClaim field: <br/>
	 * Creates a new claim. <br/>
	 * Loads the data for Mutation.createClaim. It may return whatever is accepted by the Spring Controller,
	 * that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Claim)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Claim&gt;
	 * or a Flux&lt;Claim&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Claim&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Claim>. This allows
	 * to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly
	 * optimize the number of requests to the server. The principle is this one: The data loader collects all the data
	 * to load, avoid to load several times the same data, and allows parallel execution of the queries, if multiple
	 * queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param claim The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object createClaim(DataFetchingEnvironment dataFetchingEnvironment, ClaimInput claim);

	/**
	 * Description for the updateClaim field: <br/>
	 * Updates an existing claim. <br/>
	 * Loads the data for Mutation.updateClaim. It may return whatever is accepted by the Spring Controller,
	 * that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Claim)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Claim&gt;
	 * or a Flux&lt;Claim&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Claim&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Claim>. This allows
	 * to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly
	 * optimize the number of requests to the server. The principle is this one: The data loader collects all the data
	 * to load, avoid to load several times the same data, and allows parallel execution of the queries, if multiple
	 * queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param claim The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object updateClaim(DataFetchingEnvironment dataFetchingEnvironment, ClaimInput claim);

	/**
	 * Description for the deleteClaim field: <br/>
	 * Deletes an existing claim. <br/>
	 * Loads the data for Mutation.deleteClaim. It may return whatever is accepted by the Spring Controller,
	 * that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Claim)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Claim&gt; or a Flux&lt;Claim&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Claim&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Claim>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param claimId The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object deleteClaim(DataFetchingEnvironment dataFetchingEnvironment, Long claimId);

	/**
	 * Description for the createDeclaration field: <br/>
	 * Creates a new declaration. <br/>
	 * Loads the data for Mutation.createDeclaration. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Declaration)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;Declaration&gt; or a
	 * Flux&lt;Declaration&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Declaration&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Declaration>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param declaration The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL
	 * schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object createDeclaration(DataFetchingEnvironment dataFetchingEnvironment, DeclarationInput declaration);

	/**
	 * Description for the updateDeclaration field: <br/>
	 * Updates an existing declaration. <br/>
	 * Loads the data for Mutation.updateDeclaration. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Declaration)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;Declaration&gt; or a
	 * Flux&lt;Declaration&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Declaration&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Declaration>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param declaration The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL
	 * schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object updateDeclaration(DataFetchingEnvironment dataFetchingEnvironment, DeclarationInput declaration);

	/**
	 * Description for the deleteDeclaration field: <br/>
	 * Deletes an existing declaration. <br/>
	 * Loads the data for Mutation.deleteDeclaration. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Declaration)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Declaration&gt; or a
	 * Flux&lt;Declaration&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Declaration&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Declaration>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param declarationId The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL
	 * schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object deleteDeclaration(DataFetchingEnvironment dataFetchingEnvironment, Long declarationId);

	/**
	 * Description for the createEntityLink field: <br/>
	 * Links two entities. <br/>
	 * Loads the data for Mutation.createEntityLink. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Boolean)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Boolean&gt; or a Flux&lt;Boolean&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Boolean&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Boolean>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param entityLink The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object createEntityLink(DataFetchingEnvironment dataFetchingEnvironment, EntityLinkInput entityLink);

	/**
	 * Description for the updateEntityLink field: <br/>
	 * Updates an existing entity link. <br/>
	 * Loads the data for Mutation.updateEntityLink. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, an EntityLink)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;EntityLink&gt; or a
	 * Flux&lt;EntityLink&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;EntityLink&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<EntityLink>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param entityLink The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object updateEntityLink(DataFetchingEnvironment dataFetchingEnvironment, EntityLinkInput entityLink);

	/**
	 * Description for the deleteEntityLink field: <br/>
	 * Unlinks two linked entities. <br/>
	 * Loads the data for Mutation.deleteEntityLink. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Boolean)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Boolean&gt; or a Flux&lt;Boolean&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Boolean&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Boolean>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param entityLinkId The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object deleteEntityLink(DataFetchingEnvironment dataFetchingEnvironment, Long entityLinkId);

	/**
	 * Description for the createJournal field: <br/>
	 * Create a new journal. <br/>
	 * Loads the data for Mutation.createJournal. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Journal)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Journal&gt;
	 * or a Flux&lt;Journal&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Journal&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Journal>. This allows
	 * to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly
	 * optimize the number of requests to the server. The principle is this one: The data loader collects all the data
	 * to load, avoid to load several times the same data, and allows parallel execution of the queries, if multiple
	 * queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param journal The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object createJournal(DataFetchingEnvironment dataFetchingEnvironment, JournalInput journal);

	/**
	 * Description for the updateJournal field: <br/>
	 * Updates an existing journal. <br/>
	 * Loads the data for Mutation.updateJournal. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Journal)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Journal&gt;
	 * or a Flux&lt;Journal&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Journal&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Journal>. This allows
	 * to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly
	 * optimize the number of requests to the server. The principle is this one: The data loader collects all the data
	 * to load, avoid to load several times the same data, and allows parallel execution of the queries, if multiple
	 * queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param journal The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object updateJournal(DataFetchingEnvironment dataFetchingEnvironment, JournalInput journal);

	/**
	 * Description for the deleteJournal field: <br/>
	 * Deletes an existing journal. <br/>
	 * Loads the data for Mutation.deleteJournal. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Journal)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Journal&gt; or a Flux&lt;Journal&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Journal&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Journal>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param journalId The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object deleteJournal(DataFetchingEnvironment dataFetchingEnvironment, Long journalId);

	/**
	 * Description for the createPerson field: <br/>
	 * Creates a new person. <br/>
	 * Loads the data for Mutation.createPerson. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Person)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Person&gt;
	 * or a Flux&lt;Person&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Person&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Person>. This allows
	 * to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly
	 * optimize the number of requests to the server. The principle is this one: The data loader collects all the data
	 * to load, avoid to load several times the same data, and allows parallel execution of the queries, if multiple
	 * queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param person The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object createPerson(DataFetchingEnvironment dataFetchingEnvironment, PersonInput person);

	/**
	 * Description for the updatePerson field: <br/>
	 * Updates an existing person. <br/>
	 * Loads the data for Mutation.updatePerson. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Person)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Person&gt;
	 * or a Flux&lt;Person&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Person&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Person>. This allows
	 * to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly
	 * optimize the number of requests to the server. The principle is this one: The data loader collects all the data
	 * to load, avoid to load several times the same data, and allows parallel execution of the queries, if multiple
	 * queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param person The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object updatePerson(DataFetchingEnvironment dataFetchingEnvironment, PersonInput person);

	/**
	 * Description for the deletePerson field: <br/>
	 * Deletes an existing person. <br/>
	 * Loads the data for Mutation.deletePerson. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Person)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Person&gt; or a Flux&lt;Person&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Person&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Person>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param personId The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object deletePerson(DataFetchingEnvironment dataFetchingEnvironment, Long personId);

	/**
	 * Description for the createPublication field: <br/>
	 * Creates a new publication. <br/>
	 * Loads the data for Mutation.createPublication. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Publication)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;Publication&gt; or a
	 * Flux&lt;Publication&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Publication&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Publication>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param publication The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL
	 * schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object createPublication(DataFetchingEnvironment dataFetchingEnvironment, PublicationInput publication);

	/**
	 * Description for the updatePublication field: <br/>
	 * Updates an existing publication. <br/>
	 * Loads the data for Mutation.updatePublication. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Publication)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;Publication&gt; or a
	 * Flux&lt;Publication&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Publication&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Publication>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param publication The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL
	 * schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object updatePublication(DataFetchingEnvironment dataFetchingEnvironment, PublicationInput publication);

	/**
	 * Description for the deletePublication field: <br/>
	 * Deletes an existing publication. <br/>
	 * Loads the data for Mutation.deletePublication. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Publication)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Publication&gt; or a
	 * Flux&lt;Publication&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Publication&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Publication>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param publicationId The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL
	 * schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object deletePublication(DataFetchingEnvironment dataFetchingEnvironment, Long publicationId);

	/**
	 * Description for the createPublisher field: <br/>
	 * Creates a new publisher. <br/>
	 * Loads the data for Mutation.createPublisher. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Publisher)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;Publisher&gt; or a
	 * Flux&lt;Publisher&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Publisher&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Publisher>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param publisher The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object createPublisher(DataFetchingEnvironment dataFetchingEnvironment, PublisherInput publisher);

	/**
	 * Description for the updatePublisher field: <br/>
	 * Updates an existing publisher. <br/>
	 * Loads the data for Mutation.updatePublisher. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Publisher)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;Publisher&gt; or a
	 * Flux&lt;Publisher&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Publisher&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Publisher>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param publisher The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object updatePublisher(DataFetchingEnvironment dataFetchingEnvironment, PublisherInput publisher);

	/**
	 * Description for the deletePublisher field: <br/>
	 * Deletes an existing publisher. <br/>
	 * Loads the data for Mutation.deletePublisher. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Publisher)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Publisher&gt; or a
	 * Flux&lt;Publisher&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Publisher&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Publisher>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param publisherId The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL
	 * schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object deletePublisher(DataFetchingEnvironment dataFetchingEnvironment, Long publisherId);

	/**
	 * Description for the createQuotation field: <br/>
	 * Creates a new quotation. <br/>
	 * Loads the data for Mutation.createQuotation. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Quotation)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;Quotation&gt; or a
	 * Flux&lt;Quotation&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Quotation&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Quotation>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param quotation The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object createQuotation(DataFetchingEnvironment dataFetchingEnvironment, QuotationInput quotation);

	/**
	 * Description for the updateQuotation field: <br/>
	 * Updates an existing quotation. <br/>
	 * Loads the data for Mutation.updateQuotation. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Quotation)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;Quotation&gt; or a
	 * Flux&lt;Quotation&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Quotation&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Quotation>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param quotation The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object updateQuotation(DataFetchingEnvironment dataFetchingEnvironment, QuotationInput quotation);

	/**
	 * Description for the deleteQuotation field: <br/>
	 * Deletes an existing quotation. <br/>
	 * Loads the data for Mutation.deleteQuotation. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Quotation)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Quotation&gt; or a
	 * Flux&lt;Quotation&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Quotation&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Quotation>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param quotationId The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL
	 * schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object deleteQuotation(DataFetchingEnvironment dataFetchingEnvironment, Long quotationId);

	/**
	 * Description for the createTopic field: <br/>
	 * Creates a new topic. <br/>
	 * Loads the data for Mutation.createTopic. It may return whatever is accepted by the Spring Controller,
	 * that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Topic)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Topic&gt;
	 * or a Flux&lt;Topic&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Topic&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Topic>. This allows
	 * to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly
	 * optimize the number of requests to the server. The principle is this one: The data loader collects all the data
	 * to load, avoid to load several times the same data, and allows parallel execution of the queries, if multiple
	 * queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param topic The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object createTopic(DataFetchingEnvironment dataFetchingEnvironment, TopicInput topic);

	/**
	 * Description for the updateTopic field: <br/>
	 * Updates an existing topic. <br/>
	 * Loads the data for Mutation.updateTopic. It may return whatever is accepted by the Spring Controller,
	 * that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Topic)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Topic&gt;
	 * or a Flux&lt;Topic&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Topic&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Topic>. This allows
	 * to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly
	 * optimize the number of requests to the server. The principle is this one: The data loader collects all the data
	 * to load, avoid to load several times the same data, and allows parallel execution of the queries, if multiple
	 * queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param topic The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object updateTopic(DataFetchingEnvironment dataFetchingEnvironment, TopicInput topic);

	/**
	 * Description for the deleteTopic field: <br/>
	 * Deletes an existing topic. <br/>
	 * Loads the data for Mutation.deleteTopic. It may return whatever is accepted by the Spring Controller,
	 * that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a Topic)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;Topic&gt; or a Flux&lt;Topic&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;Topic&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<Topic>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param topicId The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object deleteTopic(DataFetchingEnvironment dataFetchingEnvironment, Long topicId);

	/**
	 * Sets entity status.
	 */
	Object setEntityStatus(DataFetchingEnvironment dataFetchingEnvironment, Long entityId, StatusKind status);

	/**
	 * Description for the createUser field: <br/>
	 * Creates a new user. <br/>
	 * Loads the data for Mutation.createUser. It may return whatever is accepted by the Spring Controller,
	 * that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a User)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;User&gt; or
	 * a Flux&lt;User&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;User&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<User>. This allows to
	 * use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize
	 * the number of requests to the server. The principle is this one: The data loader collects all the data to load,
	 * avoid to load several times the same data, and allows parallel execution of the queries, if multiple queries are
	 * to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param user The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object createUser(DataFetchingEnvironment dataFetchingEnvironment, UserInput user);

	/**
	 * Description for the updateUser field: <br/>
	 * Updates an existing user. <br/>
	 * Loads the data for Mutation.updateUser. It may return whatever is accepted by the Spring Controller,
	 * that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a User)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;User&gt; or
	 * a Flux&lt;User&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;User&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<User>. This allows to
	 * use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize
	 * the number of requests to the server. The principle is this one: The data loader collects all the data to load,
	 * avoid to load several times the same data, and allows parallel execution of the queries, if multiple queries are
	 * to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param user The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object updateUser(DataFetchingEnvironment dataFetchingEnvironment, UserInput user);

	/**
	 * Description for the deleteUser field: <br/>
	 * Updates an existing user. <br/>
	 * Loads the data for Mutation.deleteUser. It may return whatever is accepted by the Spring Controller,
	 * that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a User)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;User&gt; or a Flux&lt;User&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;User&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<User>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param userId The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object deleteUser(DataFetchingEnvironment dataFetchingEnvironment, Long userId);

	/**
	 * Description for the grantUserAuthorities field: <br/>
	 * Grants authorities to a user. The specified authorities are added to any existing ones. <br/>
	 * Loads the data for Mutation.grantUserAuthorities. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a User)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;User&gt; or
	 * a Flux&lt;User&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;User&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<User>. This allows to
	 * use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize
	 * the number of requests to the server. The principle is this one: The data loader collects all the data to load,
	 * avoid to load several times the same data, and allows parallel execution of the queries, if multiple queries are
	 * to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param userId The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param authorities The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL
	 * schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object grantUserAuthorities(DataFetchingEnvironment dataFetchingEnvironment, Long userId,
		List<AuthorityKind> authorities);

	/**
	 * Description for the revokeUserAuthorities field: <br/>
	 * Revokes authorities from a user. The specified authorities are removed from the user; other authorities remain
	 * intact. <br/>
	 * Loads the data for Mutation.revokeUserAuthorities. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a User)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;User&gt; or
	 * a Flux&lt;User&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;User&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<User>. This allows to
	 * use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize
	 * the number of requests to the server. The principle is this one: The data loader collects all the data to load,
	 * avoid to load several times the same data, and allows parallel execution of the queries, if multiple queries are
	 * to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param userId The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param authorities The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL
	 * schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object revokeUserAuthorities(DataFetchingEnvironment dataFetchingEnvironment, Long userId,
		List<AuthorityKind> authorities);

	/**
	 * Description for the createGroup field: <br/>
	 * Creates a new group.
	 * <br/>
	 *
	 * This method loads the data for Mutation.createGroup. It may return whatever
	 * is
	 * accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a
	 * io.github.demonfiddler.ee.server.Group)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods
	 * and for any DataFetcher as described in Reactive DataFetcher.
	 * This would typically be a Mono&lt;io.github.demonfiddler.ee.server.Group&gt;
	 * or a Flux&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced
	 * asynchronously. For this to work, AnnotatedControllerConfigurer must be
	 * configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance
	 * CompletableFuture<io.github.demonfiddler.ee.server.Group>. This
	 * allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java
	 * java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader
	 * collects all the data to load, avoid to load several
	 * times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * 
	 * @param dataFetchingEnvironment
	 *                                The GraphQL {@link DataFetchingEnvironment}.
	 *                                It gives you access to the full GraphQL
	 *                                context for this DataFetcher
	 * @param group
	 *                                The input parameter sent in the query by the
	 *                                GraphQL consumer, as defined in the GraphQL
	 *                                schema.
	 * @throws NoSuchElementException
	 *                                This method may return a
	 *                                {@link NoSuchElementException} exception. In
	 *                                this case, the exception is trapped
	 *                                by the calling method, and the return is
	 *                                consider as null. This allows to use the
	 *                                {@link Optional#get()} method directly,
	 *                                without caring of
	 *                                whether or not there is a value. The generated
	 *                                code will take care of the
	 *                                {@link NoSuchElementException} exception.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	Object createGroup(DataFetchingEnvironment dataFetchingEnvironment, GroupInput group);

	/**
	 * Description for the updateGroup field: <br/>
	 * Updates an existing group.
	 * <br/>
	 *
	 * This method loads the data for Mutation.updateGroup. It may return whatever
	 * is
	 * accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a
	 * io.github.demonfiddler.ee.server.Group)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods
	 * and for any DataFetcher as described in Reactive DataFetcher.
	 * This would typically be a Mono&lt;io.github.demonfiddler.ee.server.Group&gt;
	 * or a Flux&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced
	 * asynchronously. For this to work, AnnotatedControllerConfigurer must be
	 * configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance
	 * CompletableFuture<io.github.demonfiddler.ee.server.Group>. This
	 * allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java
	 * java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader
	 * collects all the data to load, avoid to load several
	 * times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * 
	 * @param dataFetchingEnvironment
	 *                                The GraphQL {@link DataFetchingEnvironment}.
	 *                                It gives you access to the full GraphQL
	 *                                context for this DataFetcher
	 * @param group
	 *                                The input parameter sent in the query by the
	 *                                GraphQL consumer, as defined in the GraphQL
	 *                                schema.
	 * @throws NoSuchElementException
	 *                                This method may return a
	 *                                {@link NoSuchElementException} exception. In
	 *                                this case, the exception is trapped
	 *                                by the calling method, and the return is
	 *                                consider as null. This allows to use the
	 *                                {@link Optional#get()} method directly,
	 *                                without caring of
	 *                                whether or not there is a value. The generated
	 *                                code will take care of the
	 *                                {@link NoSuchElementException} exception.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	Object updateGroup(DataFetchingEnvironment dataFetchingEnvironment, GroupInput group);

	/**
	 * Description for the deleteGroup field: <br/>
	 * Deletes an existing group.
	 * <br/>
	 *
	 * This method loads the data for Mutation.deleteGroup. It may return whatever
	 * is
	 * accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a
	 * io.github.demonfiddler.ee.server.Group)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods
	 * and for any DataFetcher as described in Reactive DataFetcher.
	 * This would typically be a Mono&lt;io.github.demonfiddler.ee.server.Group&gt;
	 * or a Flux&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced
	 * asynchronously. For this to work, AnnotatedControllerConfigurer must be
	 * configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance
	 * CompletableFuture<io.github.demonfiddler.ee.server.Group>. This
	 * allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java
	 * java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader
	 * collects all the data to load, avoid to load several
	 * times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * 
	 * @param dataFetchingEnvironment
	 *                                The GraphQL {@link DataFetchingEnvironment}.
	 *                                It gives you access to the full GraphQL
	 *                                context for this DataFetcher
	 * @param groupId
	 *                                The input parameter sent in the query by the
	 *                                GraphQL consumer, as defined in the GraphQL
	 *                                schema.
	 * @throws NoSuchElementException
	 *                                This method may return a
	 *                                {@link NoSuchElementException} exception. In
	 *                                this case, the exception is trapped
	 *                                by the calling method, and the return is
	 *                                consider as null. This allows to use the
	 *                                {@link Optional#get()} method directly,
	 *                                without caring of
	 *                                whether or not there is a value. The generated
	 *                                code will take care of the
	 *                                {@link NoSuchElementException} exception.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	Object deleteGroup(DataFetchingEnvironment dataFetchingEnvironment, Long groupId);

	/**
	 * Description for the addGroupMember field: <br/>
	 * Adds a user to a group.
	 * <br/>
	 *
	 * This method loads the data for Mutation.addGroupMember. It may return
	 * whatever is
	 * accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a
	 * io.github.demonfiddler.ee.server.Group)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods
	 * and for any DataFetcher as described in Reactive DataFetcher.
	 * This would typically be a Mono&lt;io.github.demonfiddler.ee.server.Group&gt;
	 * or a Flux&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced
	 * asynchronously. For this to work, AnnotatedControllerConfigurer must be
	 * configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance
	 * CompletableFuture<io.github.demonfiddler.ee.server.Group>. This
	 * allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java
	 * java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader
	 * collects all the data to load, avoid to load several
	 * times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * 
	 * @param dataFetchingEnvironment
	 *                                The GraphQL {@link DataFetchingEnvironment}.
	 *                                It gives you access to the full GraphQL
	 *                                context for this DataFetcher
	 * @param groupId
	 *                                The input parameter sent in the query by the
	 *                                GraphQL consumer, as defined in the GraphQL
	 *                                schema.
	 * @param userId
	 *                                The input parameter sent in the query by the
	 *                                GraphQL consumer, as defined in the GraphQL
	 *                                schema.
	 * @throws NoSuchElementException
	 *                                This method may return a
	 *                                {@link NoSuchElementException} exception. In
	 *                                this case, the exception is trapped
	 *                                by the calling method, and the return is
	 *                                consider as null. This allows to use the
	 *                                {@link Optional#get()} method directly,
	 *                                without caring of
	 *                                whether or not there is a value. The generated
	 *                                code will take care of the
	 *                                {@link NoSuchElementException} exception.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	Object addGroupMember(DataFetchingEnvironment dataFetchingEnvironment, Long groupId, Long userId);

	/**
	 * Description for the removeGroupMember field: <br/>
	 * Removes a user from a group.
	 * <br/>
	 *
	 * This method loads the data for Mutation.removeGroupMember. It may return
	 * whatever is
	 * accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a
	 * io.github.demonfiddler.ee.server.Group)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods
	 * and for any DataFetcher as described in Reactive DataFetcher.
	 * This would typically be a Mono&lt;io.github.demonfiddler.ee.server.Group&gt;
	 * or a Flux&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced
	 * asynchronously. For this to work, AnnotatedControllerConfigurer must be
	 * configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance
	 * CompletableFuture<io.github.demonfiddler.ee.server.Group>. This
	 * allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java
	 * java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader
	 * collects all the data to load, avoid to load several
	 * times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * 
	 * @param dataFetchingEnvironment
	 *                                The GraphQL {@link DataFetchingEnvironment}.
	 *                                It gives you access to the full GraphQL
	 *                                context for this DataFetcher
	 * @param groupId
	 *                                The input parameter sent in the query by the
	 *                                GraphQL consumer, as defined in the GraphQL
	 *                                schema.
	 * @param userId
	 *                                The input parameter sent in the query by the
	 *                                GraphQL consumer, as defined in the GraphQL
	 *                                schema.
	 * @throws NoSuchElementException
	 *                                This method may return a
	 *                                {@link NoSuchElementException} exception. In
	 *                                this case, the exception is trapped
	 *                                by the calling method, and the return is
	 *                                consider as null. This allows to use the
	 *                                {@link Optional#get()} method directly,
	 *                                without caring of
	 *                                whether or not there is a value. The generated
	 *                                code will take care of the
	 *                                {@link NoSuchElementException} exception.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	Object removeGroupMember(DataFetchingEnvironment dataFetchingEnvironment, Long groupId, Long userId);

	/**
	 * Description for the grantGroupAuthorities field: <br/>
	 * Grants authorities to a group. The specified authorities are added to any
	 * existing ones.
	 * <br/>
	 *
	 * This method loads the data for Mutation.grantGroupAuthorities. It may return
	 * whatever is
	 * accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a
	 * io.github.demonfiddler.ee.server.Group)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods
	 * and for any DataFetcher as described in Reactive DataFetcher.
	 * This would typically be a Mono&lt;io.github.demonfiddler.ee.server.Group&gt;
	 * or a Flux&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced
	 * asynchronously. For this to work, AnnotatedControllerConfigurer must be
	 * configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance
	 * CompletableFuture<io.github.demonfiddler.ee.server.Group>. This
	 * allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java
	 * java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader
	 * collects all the data to load, avoid to load several
	 * times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * 
	 * @param dataFetchingEnvironment
	 *                                The GraphQL {@link DataFetchingEnvironment}.
	 *                                It gives you access to the full GraphQL
	 *                                context for this DataFetcher
	 * @param groupId
	 *                                The input parameter sent in the query by the
	 *                                GraphQL consumer, as defined in the GraphQL
	 *                                schema.
	 * @param authorities
	 *                                The input parameter sent in the query by the
	 *                                GraphQL consumer, as defined in the GraphQL
	 *                                schema.
	 * @throws NoSuchElementException
	 *                                This method may return a
	 *                                {@link NoSuchElementException} exception. In
	 *                                this case, the exception is trapped
	 *                                by the calling method, and the return is
	 *                                consider as null. This allows to use the
	 *                                {@link Optional#get()} method directly,
	 *                                without caring of
	 *                                whether or not there is a value. The generated
	 *                                code will take care of the
	 *                                {@link NoSuchElementException} exception.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	Object grantGroupAuthorities(DataFetchingEnvironment dataFetchingEnvironment, Long groupId,
		List<AuthorityKind> authorities);

	/**
	 * Description for the revokeGroupAuthorities field: <br/>
	 * Revokes authorities from a group. The specified authorities are removed from
	 * the group; other authorities remain intact.
	 * <br/>
	 *
	 * This method loads the data for Mutation.revokeGroupAuthorities. It may return
	 * whatever is
	 * accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a
	 * io.github.demonfiddler.ee.server.Group)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods
	 * and for any DataFetcher as described in Reactive DataFetcher.
	 * This would typically be a Mono&lt;io.github.demonfiddler.ee.server.Group&gt;
	 * or a Flux&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced
	 * asynchronously. For this to work, AnnotatedControllerConfigurer must be
	 * configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance
	 * CompletableFuture<io.github.demonfiddler.ee.server.Group>. This
	 * allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java
	 * java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader
	 * collects all the data to load, avoid to load several
	 * times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * 
	 * @param dataFetchingEnvironment
	 *                                The GraphQL {@link DataFetchingEnvironment}.
	 *                                It gives you access to the full GraphQL
	 *                                context for this DataFetcher
	 * @param groupId
	 *                                The input parameter sent in the query by the
	 *                                GraphQL consumer, as defined in the GraphQL
	 *                                schema.
	 * @param authorities
	 *                                The input parameter sent in the query by the
	 *                                GraphQL consumer, as defined in the GraphQL
	 *                                schema.
	 * @throws NoSuchElementException
	 *                                This method may return a
	 *                                {@link NoSuchElementException} exception. In
	 *                                this case, the exception is trapped
	 *                                by the calling method, and the return is
	 *                                consider as null. This allows to use the
	 *                                {@link Optional#get()} method directly,
	 *                                without caring of
	 *                                whether or not there is a value. The generated
	 *                                code will take care of the
	 *                                {@link NoSuchElementException} exception.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	Object revokeGroupAuthorities(DataFetchingEnvironment dataFetchingEnvironment, Long groupId,
		List<AuthorityKind> authorities);

}
