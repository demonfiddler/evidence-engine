/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import java.util.List;

import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;

/**
 * Statistics about a given topic.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("TopicStatistics")
public class TopicStatistics {

	/**
	 * The topic in question.
	 */
	@GraphQLNonScalar(fieldName = "topic", graphQLTypeSimpleName = "Topic", javaClass = Topic.class, listDepth = 0)
	Topic topic;

	/**
	 * Statistics for the requested entities.
	 */
	@GraphQLNonScalar(fieldName = "entityStatistics", graphQLTypeSimpleName = "EntityStatistics",
		javaClass = EntityStatistics.class, listDepth = 1)
	List<EntityStatistics> entityStatistics;

	/**
	 * Statistics for the immediate sub-topics.
	 */
	@GraphQLNonScalar(fieldName = "children", graphQLTypeSimpleName = "TopicStatistics",
		javaClass = TopicStatistics.class, listDepth = 1)
	List<TopicStatistics> children;

	/**
	 * The topic in question.
	 */
	public void setTopic(Topic topic) {
		this.topic = topic;
	}

	/**
	 * The topic in question.
	 */
	public Topic getTopic() {
		return this.topic;
	}

	/**
	 * Statistics for the requested entities.
	 */
	public void setEntityStatistics(List<EntityStatistics> entityStatistics) {
		this.entityStatistics = entityStatistics;
	}

	/**
	 * Statistics for the requested entities.
	 */
	public List<EntityStatistics> getEntityStatistics() {
		return this.entityStatistics;
	}

	/**
	 * Statistics for the immediate sub-topics.
	 */
	public void setChildren(List<TopicStatistics> children) {
		this.children = children;
	}

	/**
	 * Statistics for the immediate sub-topics.
	 */
	public List<TopicStatistics> getChildren() {
		return this.children;
	}

	public String toString() {
		return "TopicStatistics {" //
			+ "topic: " + this.topic //
			+ ", " //
			+ "entityStatistics: " + this.entityStatistics //
			+ ", " //
			+ "children: " + this.children //
			+ "}"; //
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {

		private Topic topic;
		private List<EntityStatistics> entityStatistics;
		private List<TopicStatistics> children;

		/**
		 * The topic in question.
		 */
		public Builder withTopic(Topic topicParam) {
			this.topic = topicParam;
			return this;
		}

		/**
		 * Statistics for the requested entities.
		 */
		public Builder withEntityStatistics(List<EntityStatistics> entityStatisticsParam) {
			this.entityStatistics = entityStatisticsParam;
			return this;
		}

		/**
		 * Statistics for the immediate sub-topics.
		 */
		public Builder withChildren(List<TopicStatistics> childrenParam) {
			this.children = childrenParam;
			return this;
		}

		public TopicStatistics build() {
			TopicStatistics _object = new TopicStatistics();
			_object.setTopic(this.topic);
			_object.setEntityStatistics(this.entityStatistics);
			_object.setChildren(this.children);
			return _object;
		}

	}

}
