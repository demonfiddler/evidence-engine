/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.graphql.data.method.annotation.SchemaMapping;
import org.springframework.graphql.execution.BatchLoaderRegistry;
import org.springframework.stereotype.Controller;

import com.graphql_java_generator.server.util.GraphqlServerUtils;

import io.github.demonfiddler.ee.server.datafetcher.DataFetchersDelegateIPage;
import io.github.demonfiddler.ee.server.model.IPage;
import reactor.core.publisher.Mono;


/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Controller
@SchemaMapping(typeName = "IPage")
public class IPageController {

	@Autowired
	protected DataFetchersDelegateIPage dataFetchersDelegateIPage;

	@Autowired
	protected GraphqlServerUtils graphqlServerUtils;

	public IPageController(BatchLoaderRegistry registry) {
		// Registering the data loaders is useless if @BatchMapping is used. But we need it here, for backward
		// compatibility with code developed against previous plugin versions
		registry.forTypePair(Long.class, IPage.class).registerMappedBatchLoader((keysSet, env) -> {
			List<java.lang.Long> keys = new ArrayList<>(keysSet.size());
			keys.addAll(keysSet);
			return Mono.fromCallable(() -> {
				Map<java.lang.Long, IPage> map = new HashMap<>();
				// Values are returned in the same order as the keys list
				List<IPage> values = this.dataFetchersDelegateIPage.batchLoader(keys, env);
				for (int i = 0; i < keys.size(); i += 1) {
					map.put(keys.get(i), values.get(i));
				}
				return map;
			});
		});

	}
	
 }
