/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import java.net.URL;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import jakarta.persistence.Column;
import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.Entity;
import jakarta.persistence.PrimaryKeyJoinColumn;

/**
 * Book, journal, etc. publisher details.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Entity
@PrimaryKeyJoinColumn(name = "id")
@DiscriminatorValue("PBR")
@GraphQLObjectType("Publisher")
public class Publisher extends AbstractTrackedEntity {

	/**
	 * The publisher name.
	 */
	@GraphQLScalar(fieldName = "name", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String name;

	/**
	 * The publisher location.
	 */
	@GraphQLScalar(fieldName = "location", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String location;

	/**
	 * The publisher country.
	 */
	@GraphQLScalar(fieldName = "country", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	@Column(name = "country_code")
	String country;

	/**
	 * URL of publisher's home page.
	 */
	@GraphQLScalar(fieldName = "url", graphQLTypeSimpleName = "URL", javaClass = URL.class, listDepth = 0)
	URL url;

	/**
	 * The number of journals published.
	 */
	@GraphQLScalar(fieldName = "journalCount", graphQLTypeSimpleName = "Int", javaClass = Integer.class, listDepth = 0)
	Integer journalCount;

	@Override
	public String getEntityKind() {
		return EntityKind.PBR.name();
	}

	/**
	 * The publisher name.
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * The publisher name.
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * The publisher location.
	 */
	public void setLocation(String location) {
		this.location = location;
	}

	/**
	 * The publisher location.
	 */
	public String getLocation() {
		return this.location;
	}

	/**
	 * The publisher country.
	 */
	public void setCountry(String country) {
		this.country = country;
	}

	/**
	 * The publisher country.
	 */
	public String getCountry() {
		return this.country;
	}

	/**
	 * URL of publisher's home page.
	 */
	public void setUrl(URL url) {
		this.url = url;
	}

	/**
	 * URL of publisher's home page.
	 */
	public URL getUrl() {
		return this.url;
	}

	/**
	 * The number of journals published.
	 */
	public void setJournalCount(Integer journalCount) {
		this.journalCount = journalCount;
	}

	/**
	 * The number of journals published.
	 */
	public Integer getJournalCount() {
		return this.journalCount;
	}

	public String toString() {
		return "Publisher {" //
			+ "id: " + this.id //
			+ ", " //
			+ "entityKind: " + this.getEntityKind() //
			+ ", " //
			+ "status: " + this.status //
			+ ", " //
			+ "rating: " + this.rating //
			+ ", " //
			+ "created: " + this.created //
			+ ", " //
			+ "createdByUser: " + this.createdByUser //
			+ ", " //
			+ "updated: " + this.updated //
			+ ", " //
			+ "updatedByUser: " + this.updatedByUser //
			+ ", " //
			+ "log: " + this.log //
			+ ", " //
			+ "name: " + this.name //
			+ ", " //
			+ "location: " + this.location //
			+ ", " //
			+ "country: " + this.country //
			+ ", " //
			+ "url: " + this.url //
			+ ", " //
			+ "journalCount: " + this.journalCount //
			+ "}"; //
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractTrackedEntity.Builder<Builder, Publisher> {

		private String name;
		private String location;
		private String country;
		private URL url;
		private Integer journalCount;

		/**
		 * The publisher name.
		 */
		public Builder withName(String nameParam) {
			this.name = nameParam;
			return this;
		}

		/**
		 * The publisher location.
		 */
		public Builder withLocation(String locationParam) {
			this.location = locationParam;
			return this;
		}

		/**
		 * The publisher country.
		 */
		public Builder withCountry(String countryParam) {
			this.country = countryParam;
			return this;
		}

		/**
		 * URL of publisher's home page.
		 */
		public Builder withUrl(URL urlParam) {
			this.url = urlParam;
			return this;
		}

		/**
		 * The number of journals published.
		 */
		public Builder withJournalCount(Integer journalCountParam) {
			this.journalCount = journalCountParam;
			return this;
		}

		@Override
		public Publisher build() {
			Publisher _object = build(new Publisher());
			_object.setName(this.name);
			_object.setLocation(this.location);
			_object.setCountry(this.country);
			_object.setUrl(this.url);
			_object.setJournalCount(this.journalCount);
			return _object;
		}

	}

}
