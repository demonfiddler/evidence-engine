/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import java.util.Collections;
import java.util.List;

import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.PrimaryKeyJoinColumn;

/**
 * A node in the topic hierarchy tree.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Entity
@PrimaryKeyJoinColumn(name = "id")
@DiscriminatorValue("TOP")
@GraphQLObjectType("Topic")
public class Topic extends AbstractLinkableEntity {

	/**
	 * The topic label for display in the user interface.
	 */
	@GraphQLScalar(fieldName = "label", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String label;

	/**
	 * The topic description.
	 */
	@GraphQLScalar(fieldName = "description", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String description;

	/**
	 * The parent topic.
	 */
	@GraphQLNonScalar(fieldName = "parent", graphQLTypeSimpleName = "Topic", javaClass = Topic.class, listDepth = 0)
	@ManyToOne(fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "parent_id", nullable = true)
	Topic parent;

	/**
	 * The sub-topics.
	 */
	@GraphQLNonScalar(fieldName = "children", graphQLTypeSimpleName = "Topic", javaClass = Topic.class, listDepth = 1)
	@OneToMany(mappedBy = "parent", /*cascade=CascadeType.ALL,*/ fetch = FetchType.LAZY)
	List<Topic> children = Collections.emptyList();

	@Override
	public String getEntityKind() {
		return EntityKind.TOP.name();
	}

	/**
	 * The topic label for display in the user interface.
	 */
	public void setLabel(String label) {
		this.label = label;
	}

	/**
	 * The topic label for display in the user interface.
	 */
	public String getLabel() {
		return this.label;
	}

	/**
	 * The topic description.
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * The topic description.
	 */
	public String getDescription() {
		return this.description;
	}

	/**
	 * The parent topic.
	 */
	public void setParent(Topic parent) {
		this.parent = parent;
	}

	/**
	 * The parent topic.
	 */
	public Topic getParent() {
		return this.parent;
	}

	/**
	 * The sub-topics.
	 */
	public void setChildren(List<Topic> children) {
		this.children = children;
	}

	/**
	 * The sub-topics.
	 */
	public List<Topic> getChildren() {
		return this.children;
	}

	public String toString() {
		return "Topic {" //$NON-NLS-1$
			+ "id: " + this.id //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "entityKind: " + this.getEntityKind() //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "status: " + this.status //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "created: " + this.created //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "createdByUser: " + this.createdByUser //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updated: " + this.updated //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updatedByUser: " + this.updatedByUser //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "log: " + this.log //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "fromEntityLinks: " + this.fromEntityLinks //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "toEntityLinks: " + this.toEntityLinks //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "label: " + this.label //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "description: " + this.description //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "parent: " + this.parent //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "children: " + this.children //$NON-NLS-1$
			+ "}"; //$NON-NLS-1$
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractLinkableEntity.Builder<Builder, Topic> {

		private String label;
		private String description;
		private Topic parent;
		private List<Topic> children;

		/**
		 * The topic label for display in the user interface.
		 */
		public Builder withLabel(String labelParam) {
			this.label = labelParam;
			return this;
		}

		/**
		 * The topic description.
		 */
		public Builder withDescription(String descriptionParam) {
			this.description = descriptionParam;
			return this;
		}

		/**
		 * The parent topic.
		 */
		public Builder withParent(Topic parentParam) {
			this.parent = parentParam;
			return this;
		}

		/**
		 * The sub-topics.
		 */
		public Builder withChildren(List<Topic> childrenParam) {
			this.children = childrenParam;
			return this;
		}

		@Override
		public Topic build() {
			Topic _object = build(new Topic());
			_object.setLabel(this.label);
			_object.setDescription(this.description);
			_object.setParent(this.parent);
			_object.setChildren(this.children);
			return _object;
		}

	}

}
