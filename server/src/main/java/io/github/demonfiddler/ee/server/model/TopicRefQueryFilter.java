/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * Parameters to filter a topic reference query.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("TopicRefQueryFilter")
public class TopicRefQueryFilter {

	/**
	 * The unique identifier of the associated topic.
	 */
	@GraphQLScalar(fieldName = "topicId", graphQLTypeSimpleName = "Long", javaClass = Long.class, listDepth = 0)
	Long topicId;

	/**
	 * The associated entity kind.
	 */
	@GraphQLScalar(fieldName = "entityKind", graphQLTypeSimpleName = "EntityKind", javaClass = EntityKind.class,
		listDepth = 0)
	EntityKind entityKind;

	/**
	 * The unique identifier of the associated entity.
	 */
	@GraphQLScalar(fieldName = "entityId", graphQLTypeSimpleName = "Long", javaClass = Long.class, listDepth = 0)
	Long entityId;

	/**
	 * Free text search string.
	 */
	@GraphQLScalar(fieldName = "text", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String text;

	/**
	 * Whether to search {@code text} in advanced (boolean) mode.
	 */
	@GraphQLScalar(fieldName = "advancedSearch", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class,
		listDepth = 0)
	Boolean advancedSearch = false;

	/**
	 * The unique identifier of the associated topic.
	 */
	public void setTopicId(Long topicId) {
		this.topicId = topicId;
	}

	/**
	 * The unique identifier of the associated topic.
	 */
	public Long getTopicId() {
		return this.topicId;
	}

	/**
	 * The associated entity kind.
	 */
	public void setEntityKind(EntityKind entityKind) {
		this.entityKind = entityKind;
	}

	/**
	 * The associated entity kind.
	 */
	public EntityKind getEntityKind() {
		return this.entityKind;
	}

	/**
	 * The unique identifier of the associated entity.
	 */
	public void setEntityId(Long entityId) {
		this.entityId = entityId;
	}

	/**
	 * The unique identifier of the associated entity.
	 */
	public Long getEntityId() {
		return this.entityId;
	}

	/**
	 * Free text search string.
	 */
	public void setText(String text) {
		this.text = text;
	}

	/**
	 * Free text search string.
	 */
	public String getText() {
		return this.text;
	}

	/**
	 * Whether to search {@code text} in advanced (boolean) mode.
	 */
	public void setAdvancedSearch(Boolean advancedSearch) {
		this.advancedSearch = advancedSearch;
	}

	/**
	 * Whether to search {@code text} in advanced (boolean) mode.
	 */
	public Boolean getAdvancedSearch() {
		return this.advancedSearch;
	}

	public String toString() {
		return "TopicRefQueryFilter {" //$NON-NLS-1$
			+ "topicId: " + this.topicId //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "entityKind: " + this.entityKind //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "entityId: " + this.entityId //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "text: " + this.text //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "advancedSearch: " + this.advancedSearch //$NON-NLS-1$
			+ "}"; //$NON-NLS-1$
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {

		private Long topicId;
		private EntityKind entityKind;
		private Long entityId;
		private String text;
		private Boolean advancedSearch = false;

		/**
		 * The unique identifier of the associated topic.
		 */
		public Builder withTopicId(Long topicIdParam) {
			this.topicId = topicIdParam;
			return this;
		}

		/**
		 * The associated entity kind.
		 */
		public Builder withEntityKind(EntityKind entityKindParam) {
			this.entityKind = entityKindParam;
			return this;
		}

		/**
		 * The unique identifier of the associated entity.
		 */
		public Builder withEntityId(Long entityIdParam) {
			this.entityId = entityIdParam;
			return this;
		}

		/**
		 * Free text search string.
		 */
		public Builder withText(String textParam) {
			this.text = textParam;
			return this;
		}

		/**
		 * Whether to search {@code text} in advanced (boolean) mode.
		 */
		public Builder withAdvancedSearch(Boolean advancedSearch) {
			this.advancedSearch = advancedSearch;
			return this;
		}

		public TopicRefQueryFilter build() {
			TopicRefQueryFilter _object = new TopicRefQueryFilter();
			_object.setTopicId(this.topicId);
			_object.setEntityKind(this.entityKind);
			_object.setEntityId(this.entityId);
			_object.setText(this.text);
			_object.setAdvancedSearch(this.advancedSearch);
			return _object;
		}

	}

}
