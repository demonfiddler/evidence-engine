/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import java.util.ArrayList;
import java.util.List;

import com.graphql_java_generator.annotation.GraphQLDirective;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import jakarta.persistence.CascadeType;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.PrimaryKeyJoinColumn;

/**
 * Describes a group of users of the system.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Entity
@PrimaryKeyJoinColumn(name = "id")
@DiscriminatorValue("GRP")
@GraphQLObjectType("Group")
@GraphQLDirective(name = "@auth", parameterNames = {}, parameterTypes = {}, parameterValues = {})
public class Group extends AbstractTrackedEntity {

	/**
	 * The (mutable?) unique group name (user-assigned).
	 */
	@GraphQLScalar(fieldName = "groupname", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String groupname;

	/**
	 * The authorities granted to the group.
	 */
	// @Transient
	@GraphQLScalar(fieldName = "authorities", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 1)
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
    @ElementCollection//(targetClass = AuthorityKind.class)
    @CollectionTable(name = "group_authority", joinColumns = @JoinColumn(name = "group_id"))
    @Column(name = "authority")
    @Enumerated(EnumType.STRING)
	List<AuthorityKind> authorities = new ArrayList<>();

	/**
	 * The members of the group.
	 */
	// @Transient
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	@GraphQLNonScalar( fieldName = "members", graphQLTypeSimpleName = "User", javaClass = User.class, listDepth = 1)
    @ManyToMany(fetch = FetchType.LAZY, cascade = { CascadeType.ALL })
    @JoinTable(name = "group_user",
        joinColumns = {@JoinColumn(name = "group_id", referencedColumnName = "id")},
        inverseJoinColumns = {@JoinColumn(name = "username", referencedColumnName = "username")})
	List<User> members = new ArrayList<>();

	@Override
	public String getEntityKind() {
		return EntityKind.GRP.name();
	}

	/**
	 * The (mutable?) unique group name (user-assigned).
	 */
	public void setGroupname(String groupname) {
		this.groupname = groupname;
	}

	/**
	 * The (mutable?) unique group name (user-assigned).
	 */
	public String getGroupname() {
		return this.groupname;
	}

	/**
	 * The authorities granted to the group.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public void setAuthorities(List<AuthorityKind> authorities) {
		this.authorities = authorities;
	}

	/**
	 * The authorities granted to the group.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public List<AuthorityKind> getAuthorities() {
		return this.authorities;
	}

	/**
	 * The members of the group.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public void setMembers(List<User> members) {
		this.members = members;
	}

	/**
	 * The members of the group.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public List<User> getMembers() {
		return this.members;
	}

	public String toString() {
		return "Group {" //$NON-NLS-1$
			+ "id: " + this.id //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "entityKind: " + this.getEntityKind() //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "status: " + this.status //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "created: " + this.created //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "createdByUser: " + this.createdByUser //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updated: " + this.updated //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updatedByUser: " + this.updatedByUser //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "log: " + this.log //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "groupname: " + this.groupname //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "authorities: " + this.authorities //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "members: " + this.members //$NON-NLS-1$
			+ "}"; //$NON-NLS-1$
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((groupname == null) ? 0 : groupname.hashCode());
		result = prime * result + ((authorities == null) ? 0 : authorities.hashCode());
		result = prime * result + ((members == null) ? 0 : members.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		Group other = (Group) obj;
		if (groupname == null) {
			if (other.groupname != null)
				return false;
		} else if (!groupname.equals(other.groupname))
			return false;
		if (authorities == null) {
			if (other.authorities != null)
				return false;
		} else if (!authorities.equals(other.authorities))
			return false;
		if (members == null) {
			if (other.members != null)
				return false;
		} else if (!members.equals(other.members))
			return false;
		return true;
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractTrackedEntity.Builder<Builder, Group> {

		private String groupname;
		private List<AuthorityKind> authorities;
		private List<User> members;

		/**
		 * The (mutable?) unique group name (user-assigned).
		 */
		public Builder withGroupname(String groupnameParam) {
			this.groupname = groupnameParam;
			return this;
		}

		/**
		 * The authorities granted to the group.
		 */
		public Builder withAuthorities(List<AuthorityKind> authoritiesParam) {
			this.authorities = authoritiesParam;
			return this;
		}

		/**
		 * The members of the group.
		 */
		public Builder withMembers(List<User> membersParam) {
			this.members = membersParam;
			return this;
		}

		@Override
		public Group build() {
			Group _object = build(new Group());
			_object.setGroupname(this.groupname);
			_object.setAuthorities(this.authorities);
			_object.setMembers(this.members);
			return _object;
		}

	}

}
