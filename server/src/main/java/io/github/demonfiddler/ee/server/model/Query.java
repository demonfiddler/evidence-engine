/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import com.graphql_java_generator.annotation.GraphQLDirective;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;

/**
 * Available queries.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("Query")
public class Query {

	/**
	 * Returns a paged list of claims.
	 */
	@GraphQLNonScalar(fieldName = "claims", graphQLTypeSimpleName = "ClaimPage", javaClass = ClaimPage.class,
		listDepth = 0)
	ClaimPage claims;

	/**
	 * Returns a claim given its identifier.
	 */
	@GraphQLNonScalar(fieldName = "claimById", graphQLTypeSimpleName = "Claim", javaClass = Claim.class, listDepth = 0)
	Claim claimById;

	/**
	 * Returns a paged list of declarations.
	 */
	@GraphQLNonScalar(fieldName = "declarations", graphQLTypeSimpleName = "DeclarationPage",
		javaClass = DeclarationPage.class, listDepth = 0)
	DeclarationPage declarations;

	/**
	 * Returns a declaration given its identifier.
	 */
	@GraphQLNonScalar(fieldName = "declarationById", graphQLTypeSimpleName = "Declaration",
		javaClass = Declaration.class, listDepth = 0)
	Declaration declarationById;

	/**
	 * Returns a paged list of entity links.
	 */
	@GraphQLNonScalar(fieldName = "entityLinks", graphQLTypeSimpleName = "EntityLinkPage",
		javaClass = EntityLinkPage.class, listDepth = 0)
	EntityLinkPage entityLinks;

	/**
	 * Returns an entity link given its identifier.
	 */
	@GraphQLNonScalar(fieldName = "entityLinkById", graphQLTypeSimpleName = "EntityLink", javaClass = EntityLink.class,
		listDepth = 0)
	EntityLink entityLinkById;

	/**
	 * Returns an entity link given its from- and to-entity identifiers.
	 */
	@GraphQLNonScalar(fieldName = "entityLinkByEntityIds", graphQLTypeSimpleName = "EntityLink",
		javaClass = EntityLink.class, listDepth = 0)
	EntityLink entityLinkByEntityIds;

	/**
	 * Returns a paged list of journals.
	 */
	@GraphQLNonScalar(fieldName = "journals", graphQLTypeSimpleName = "JournalPage", javaClass = JournalPage.class,
		listDepth = 0)
	JournalPage journals;

	/**
	 * Returns a journal given its identifier.
	 */
	@GraphQLNonScalar(fieldName = "journalById", graphQLTypeSimpleName = "Journal", javaClass = Journal.class,
		listDepth = 0)
	Journal journalById;

	/**
	 * Returns a paged list of log entries.
	 */
	@GraphQLNonScalar(fieldName = "log", graphQLTypeSimpleName = "LogPage", javaClass = LogPage.class, listDepth = 0)
	LogPage log;

	/**
	 * Returns a paged list of persons.
	 */
	@GraphQLNonScalar(fieldName = "persons", graphQLTypeSimpleName = "PersonPage", javaClass = PersonPage.class,
		listDepth = 0)
	PersonPage persons;

	/**
	 * Returns a person given its identifier.
	 */
	@GraphQLNonScalar(fieldName = "personById", graphQLTypeSimpleName = "Person", javaClass = Person.class,
		listDepth = 0)
	Person personById;

	/**
	 * Returns a paged list of publications.
	 */
	@GraphQLNonScalar(fieldName = "publications", graphQLTypeSimpleName = "PublicationPage",
		javaClass = PublicationPage.class, listDepth = 0)
	PublicationPage publications;

	/**
	 * Returns a publication given its identifier.
	 */
	@GraphQLNonScalar(fieldName = "publicationById", graphQLTypeSimpleName = "Publication",
		javaClass = Publication.class, listDepth = 0)
	Publication publicationById;

	/**
	 * Returns a paged list of publishers.
	 */
	@GraphQLNonScalar(fieldName = "publishers", graphQLTypeSimpleName = "PublisherPage",
		javaClass = PublisherPage.class, listDepth = 0)
	PublisherPage publishers;

	/**
	 * Returns a publisher given its identifier.
	 */
	@GraphQLNonScalar(fieldName = "publisherById", graphQLTypeSimpleName = "Publisher", javaClass = Publisher.class,
		listDepth = 0)
	Publisher publisherById;

	/**
	 * Returns a paged list of quotations.
	 */
	@GraphQLNonScalar(fieldName = "quotations", graphQLTypeSimpleName = "QuotationPage",
		javaClass = QuotationPage.class, listDepth = 0)
	QuotationPage quotations;

	/**
	 * Returns a quotation given its identifier.
	 */
	@GraphQLNonScalar(fieldName = "quotationById", graphQLTypeSimpleName = "Quotation", javaClass = Quotation.class,
		listDepth = 0)
	Quotation quotationById;

	/**
	 * Returns a paged list of topics or sub-topics.
	 */
	@GraphQLNonScalar(fieldName = "topics", graphQLTypeSimpleName = "TopicPage", javaClass = TopicPage.class,
		listDepth = 0)
	TopicPage topics;

	/**
	 * Returns a topic given its identifier.
	 */
	@GraphQLNonScalar(fieldName = "topicById", graphQLTypeSimpleName = "Topic", javaClass = Topic.class, listDepth = 0)
	Topic topicById;

	/**
	 * Returns a paged list of users.
	 */
	@GraphQLNonScalar(fieldName = "users", graphQLTypeSimpleName = "UserPage", javaClass = UserPage.class,
		listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	UserPage users;

	/**
	 * Returns a user given its identifier.
	 */
	@GraphQLNonScalar(fieldName = "userById", graphQLTypeSimpleName = "User", javaClass = User.class, listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	User userById;

	/**
	 * Returns a user given its username.
	 */
	@GraphQLNonScalar(fieldName = "userByUsername", graphQLTypeSimpleName = "User", javaClass = User.class,
		listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	User userByUsername;

	/**
	 * Returns the currently logged-in user.
	 */
	@GraphQLNonScalar(fieldName = "currentUser", graphQLTypeSimpleName = "User", javaClass = User.class, listDepth = 0)
	User currentUser;

	/**
	 * Returns a paged list of groups.
	 */
	@GraphQLNonScalar( fieldName = "groups", graphQLTypeSimpleName = "GroupPage", javaClass = GroupPage.class, listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	GroupPage groups;


	/**
	 * Returns a group given its identifier.
	 */
	@GraphQLNonScalar( fieldName = "groupById", graphQLTypeSimpleName = "Group", javaClass = Group.class, listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	Group groupById;


	/**
	 * Returns a group given its groupname.
	 */
	@GraphQLNonScalar( fieldName = "groupByGroupname", graphQLTypeSimpleName = "Group", javaClass = Group.class, listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	Group groupByGroupname;

	/**
	 * Returns a paged list of claims.
	 */
	public void setClaims(ClaimPage claims) {
		this.claims = claims;
	}

	/**
	 * Returns a paged list of claims.
	 */
	public ClaimPage getClaims() {
		return this.claims;
	}

	/**
	 * Returns a claim given its identifier.
	 */
	public void setClaimById(Claim claimById) {
		this.claimById = claimById;
	}

	/**
	 * Returns a claim given its identifier.
	 */
	public Claim getClaimById() {
		return this.claimById;
	}

	/**
	 * Returns a paged list of declarations.
	 */
	public void setDeclarations(DeclarationPage declarations) {
		this.declarations = declarations;
	}

	/**
	 * Returns a paged list of declarations.
	 */
	public DeclarationPage getDeclarations() {
		return this.declarations;
	}

	/**
	 * Returns a declaration given its identifier.
	 */
	public void setDeclarationById(Declaration declarationById) {
		this.declarationById = declarationById;
	}

	/**
	 * Returns a declaration given its identifier.
	 */
	public Declaration getDeclarationById() {
		return this.declarationById;
	}

	/**
	 * Returns a paged list of entity links.
	 */
	public void setEntityLinks(EntityLinkPage entityLinks) {
		this.entityLinks = entityLinks;
	}

	/**
	 * Returns a paged list of entity links.
	 */
	public EntityLinkPage getEntityLinks() {
		return this.entityLinks;
	}

	/**
	 * Returns an entity link given its identifier.
	 */
	public void setEntityLinkById(EntityLink entityLinkById) {
		this.entityLinkById = entityLinkById;
	}

	/**
	 * Returns an entity link given its identifier.
	 */
	public EntityLink getEntityLinkById() {
		return this.entityLinkById;
	}

	/**
	 * Returns an entity link given its from- and to-entity identifiers.
	 */
	public void setEntityLinkByEntityIds(EntityLink entityLinkByEntityIds) {
		this.entityLinkByEntityIds = entityLinkByEntityIds;
	}

	/**
	 * Returns an entity link given its from- and to-entity identifiers.
	 */
	public EntityLink getEntityLinkByEntityIds() {
		return this.entityLinkByEntityIds;
	}

	/**
	 * Returns a paged list of journals.
	 */
	public void setJournals(JournalPage journals) {
		this.journals = journals;
	}

	/**
	 * Returns a paged list of journals.
	 */
	public JournalPage getJournals() {
		return this.journals;
	}

	/**
	 * Returns a journal given its identifier.
	 */
	public void setJournalById(Journal journalById) {
		this.journalById = journalById;
	}

	/**
	 * Returns a journal given its identifier.
	 */
	public Journal getJournalById() {
		return this.journalById;
	}

	/**
	 * Returns a paged list of log entries.
	 */
	public void setLog(LogPage log) {
		this.log = log;
	}

	/**
	 * Returns a paged list of log entries.
	 */
	public LogPage getLog() {
		return this.log;
	}

	/**
	 * Returns a paged list of persons.
	 */
	public void setPersons(PersonPage persons) {
		this.persons = persons;
	}

	/**
	 * Returns a paged list of persons.
	 */
	public PersonPage getPersons() {
		return this.persons;
	}

	/**
	 * Returns a person given its identifier.
	 */
	public void setPersonById(Person personById) {
		this.personById = personById;
	}

	/**
	 * Returns a person given its identifier.
	 */
	public Person getPersonById() {
		return this.personById;
	}

	/**
	 * Returns a paged list of publications.
	 */
	public void setPublications(PublicationPage publications) {
		this.publications = publications;
	}

	/**
	 * Returns a paged list of publications.
	 */
	public PublicationPage getPublications() {
		return this.publications;
	}

	/**
	 * Returns a publication given its identifier.
	 */
	public void setPublicationById(Publication publicationById) {
		this.publicationById = publicationById;
	}

	/**
	 * Returns a publication given its identifier.
	 */
	public Publication getPublicationById() {
		return this.publicationById;
	}

	/**
	 * Returns a paged list of publishers.
	 */
	public void setPublishers(PublisherPage publishers) {
		this.publishers = publishers;
	}

	/**
	 * Returns a paged list of publishers.
	 */
	public PublisherPage getPublishers() {
		return this.publishers;
	}

	/**
	 * Returns a publisher given its identifier.
	 */
	public void setPublisherById(Publisher publisherById) {
		this.publisherById = publisherById;
	}

	/**
	 * Returns a publisher given its identifier.
	 */
	public Publisher getPublisherById() {
		return this.publisherById;
	}

	/**
	 * Returns a paged list of quotations.
	 */
	public void setQuotations(QuotationPage quotations) {
		this.quotations = quotations;
	}

	/**
	 * Returns a paged list of quotations.
	 */
	public QuotationPage getQuotations() {
		return this.quotations;
	}

	/**
	 * Returns a quotation given its identifier.
	 */
	public void setQuotationById(Quotation quotationById) {
		this.quotationById = quotationById;
	}

	/**
	 * Returns a quotation given its identifier.
	 */
	public Quotation getQuotationById() {
		return this.quotationById;
	}

	/**
	 * Returns a paged list of topics or sub-topics.
	 */
	public void setTopics(TopicPage topics) {
		this.topics = topics;
	}

	/**
	 * Returns a paged list of topics or sub-topics.
	 */
	public TopicPage getTopics() {
		return this.topics;
	}

	/**
	 * Returns a topic given its identifier.
	 */
	public void setTopicById(Topic topicById) {
		this.topicById = topicById;
	}

	/**
	 * Returns a topic given its identifier.
	 */
	public Topic getTopicById() {
		return this.topicById;
	}

	/**
	 * Returns a paged list of users.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public void setUsers(UserPage users) {
		this.users = users;
	}

	/**
	 * Returns a paged list of users.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public UserPage getUsers() {
		return this.users;
	}

	/**
	 * Returns a user given its identifier.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public void setUserById(User userById) {
		this.userById = userById;
	}

	/**
	 * Returns a user given its identifier.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public User getUserById() {
		return this.userById;
	}

	/**
	 * Returns a user given its username.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public void setUserByUsername(User userByUsername) {
		this.userByUsername = userByUsername;
	}

	/**
	 * Returns a user given its username.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public User getUserByUsername() {
		return this.userByUsername;
	}

	/**
	 * Returns the currently logged- user.
	 */
	public void setCurrentUser(User currentUser) {
		this.currentUser = currentUser;
	}

	/**
	 * Returns the currently logged- user.
	 */
	public User getCurrentUser() {
		return this.currentUser;
	}

	/**
	  * Returns a paged list of groups.
 	 */
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	public void setGroups(GroupPage groups) {
		this.groups = groups;
	}

	/**
	 * Returns a paged list of groups.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	public GroupPage getGroups() {
		return this.groups;
	}

	/**
	  * Returns a group given its identifier.
 	 */
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	public void setGroupById(Group groupById) {
		this.groupById = groupById;
	}

	/**
	 * Returns a group given its identifier.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	public Group getGroupById() {
		return this.groupById;
	}

	/**
	  * Returns a group given its groupname.
 	 */
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	public void setGroupByGroupname(Group groupByGroupname) {
		this.groupByGroupname = groupByGroupname;
	}

	/**
	 * Returns a group given its groupname.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = {"authority"}, parameterTypes = {"[AuthorityKind!]"}, parameterValues = {"[ADM]"})
	public Group getGroupByGroupname() {
		return this.groupByGroupname;
	}

	public String toString() {
		return "Query {" //$NON-NLS-1$
			+ "claims: " + this.claims //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "claimById: " + this.claimById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "declarations: " + this.declarations //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "declarationById: " + this.declarationById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "entityLinks: " + this.entityLinks //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "entityLinkById: " + this.entityLinkById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "entityLinkByEntityIds: " + this.entityLinkByEntityIds //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "journals: " + this.journals //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "journalById: " + this.journalById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "log: " + this.log //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "persons: " + this.persons //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "personById: " + this.personById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "publications: " + this.publications //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "publicationById: " + this.publicationById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "publishers: " + this.publishers //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "publisherById: " + this.publisherById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "quotations: " + this.quotations //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "quotationById: " + this.quotationById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "topics: " + this.topics //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "topicById: " + this.topicById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "users: " + this.users //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "userById: " + this.userById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "userByUsername: " + this.userByUsername //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "currentUser: " + this.currentUser //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "groups: " + this.groups //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "groupById: " + this.groupById //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "groupByGroupname: " + this.groupByGroupname //$NON-NLS-1$
			+ "}"; //$NON-NLS-1$
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {

		private ClaimPage claims;
		private Claim claimById;
		private DeclarationPage declarations;
		private Declaration declarationById;
		private EntityLinkPage entityLinks;
		private EntityLink entityLinkById;
		private EntityLink entityLinkByEntityIds;
		private JournalPage journals;
		private Journal journalById;
		private LogPage log;
		private PersonPage persons;
		private Person personById;
		private PublicationPage publications;
		private Publication publicationById;
		private PublisherPage publishers;
		private Publisher publisherById;
		private QuotationPage quotations;
		private Quotation quotationById;
		private TopicPage topics;
		private Topic topicById;
		private UserPage users;
		private User userById;
		private User userByUsername;
		private User currentUser;
		private GroupPage groups;
		private Group groupById;
		private Group groupByGroupname;

		/**
		 * Returns a paged list of claims.
		 */
		public Builder withClaims(ClaimPage claimsParam) {
			this.claims = claimsParam;
			return this;
		}

		/**
		 * Returns a claim given its identifier.
		 */
		public Builder withClaimById(Claim claimByIdParam) {
			this.claimById = claimByIdParam;
			return this;
		}

		/**
		 * Returns a paged list of declarations.
		 */
		public Builder withDeclarations(DeclarationPage declarationsParam) {
			this.declarations = declarationsParam;
			return this;
		}

		/**
		 * Returns a declaration given its identifier.
		 */
		public Builder withDeclarationById(Declaration declarationByIdParam) {
			this.declarationById = declarationByIdParam;
			return this;
		}

		/**
		 * Returns a paged list of entity links.
		 */
		public Builder withEntityLinks(EntityLinkPage entityLinksParam) {
			this.entityLinks = entityLinksParam;
			return this;
		}

		/**
		 * Returns an entity link given its identifier.
		 */
		public Builder withEntityLinkById(EntityLink entityLinkByIdParam) {
			this.entityLinkById = entityLinkByIdParam;
			return this;
		}

		/**
		 * Returns an entity link given its from- and to-entity identifiers.
		 */
		public Builder
			withEntityLinkByEntityIds(EntityLink entityLinkByEntityIdsParam) {
			this.entityLinkByEntityIds = entityLinkByEntityIdsParam;
			return this;
		}

		/**
		 * Returns a paged list of journals.
		 */
		public Builder withJournals(JournalPage journalsParam) {
			this.journals = journalsParam;
			return this;
		}

		/**
		 * Returns a journal given its identifier.
		 */
		public Builder withJournalById(Journal journalByIdParam) {
			this.journalById = journalByIdParam;
			return this;
		}

		/**
		 * Returns a paged list of log entries.
		 */
		public Builder withLog(LogPage logParam) {
			this.log = logParam;
			return this;
		}

		/**
		 * Returns a paged list of persons.
		 */
		public Builder withPersons(PersonPage personsParam) {
			this.persons = personsParam;
			return this;
		}

		/**
		 * Returns a person given its identifier.
		 */
		public Builder withPersonById(Person personByIdParam) {
			this.personById = personByIdParam;
			return this;
		}

		/**
		 * Returns a paged list of publications.
		 */
		public Builder withPublications(PublicationPage publicationsParam) {
			this.publications = publicationsParam;
			return this;
		}

		/**
		 * Returns a publication given its identifier.
		 */
		public Builder withPublicationById(Publication publicationByIdParam) {
			this.publicationById = publicationByIdParam;
			return this;
		}

		/**
		 * Returns a paged list of publishers.
		 */
		public Builder withPublishers(PublisherPage publishersParam) {
			this.publishers = publishersParam;
			return this;
		}

		/**
		 * Returns a publisher given its identifier.
		 */
		public Builder withPublisherById(Publisher publisherByIdParam) {
			this.publisherById = publisherByIdParam;
			return this;
		}

		/**
		 * Returns a paged list of quotations.
		 */
		public Builder withQuotations(QuotationPage quotationsParam) {
			this.quotations = quotationsParam;
			return this;
		}

		/**
		 * Returns a quotation given its identifier.
		 */
		public Builder withQuotationById(Quotation quotationByIdParam) {
			this.quotationById = quotationByIdParam;
			return this;
		}

		/**
		 * Returns a paged list of topics or sub-topics.
		 */
		public Builder withTopics(TopicPage topicsParam) {
			this.topics = topicsParam;
			return this;
		}

		/**
		 * Returns a topic given its identifier.
		 */
		public Builder withTopicById(Topic topicByIdParam) {
			this.topicById = topicByIdParam;
			return this;
		}

		/**
		 * Returns a paged list of users.
		 */
		public Builder withUsers(UserPage usersParam) {
			this.users = usersParam;
			return this;
		}

		/**
		 * Returns a user given its identifier.
		 */
		public Builder withUserById(User userByIdParam) {
			this.userById = userByIdParam;
			return this;
		}

		/**
		 * Returns a user given its username.
		 */
		public Builder withUserByUsername(User userByUsernameParam) {
			this.userByUsername = userByUsernameParam;
			return this;
		}

		/**
		 * Returns the currently logged-in user.
		 */
		public Builder withCurrentUser(User currentUserParam) {
			this.currentUser = currentUserParam;
			return this;
		}

		/**
	     * Returns a paged list of groups.
	     */
		public Builder withGroups(GroupPage groupsParam) {
			this.groups = groupsParam;
			return this;
		}

		/**
	     * Returns a group given its identifier.
	     */
		public Builder withGroupById(Group groupByIdParam) {
			this.groupById = groupByIdParam;
			return this;
		}

		/**
	     * Returns a group given its groupname.
	     */
		public Builder withGroupByGroupname(Group groupByGroupnameParam) {
			this.groupByGroupname = groupByGroupnameParam;
			return this;
		}

		public Query build() {
			Query _object = new Query();
			_object.setClaims(this.claims);
			_object.setClaimById(this.claimById);
			_object.setDeclarations(this.declarations);
			_object.setDeclarationById(this.declarationById);
			_object.setEntityLinks(this.entityLinks);
			_object.setEntityLinkById(this.entityLinkById);
			_object.setEntityLinkByEntityIds(this.entityLinkByEntityIds);
			_object.setJournals(this.journals);
			_object.setJournalById(this.journalById);
			_object.setLog(this.log);
			_object.setPersons(this.persons);
			_object.setPersonById(this.personById);
			_object.setPublications(this.publications);
			_object.setPublicationById(this.publicationById);
			_object.setPublishers(this.publishers);
			_object.setPublisherById(this.publisherById);
			_object.setQuotations(this.quotations);
			_object.setQuotationById(this.quotationById);
			_object.setTopics(this.topics);
			_object.setTopicById(this.topicById);
			_object.setUsers(this.users);
			_object.setUserById(this.userById);
			_object.setUserByUsername(this.userByUsername);
			_object.setCurrentUser(this.currentUser);
			_object.setGroups(this.groups);
			_object.setGroupById(this.groupById);
			_object.setGroupByGroupname(this.groupByGroupname);
			return _object;
		}

	}

}
