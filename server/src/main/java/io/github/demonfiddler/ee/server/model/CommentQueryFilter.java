/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import java.time.OffsetDateTime;

import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * For filtering comment records.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("CommentQueryFilter")
public class CommentQueryFilter extends TrackedEntityQueryFilter {

	public CommentQueryFilter() {
	}

	/**
	 * Restrict to specific target entity kind.
	 */
	@GraphQLScalar(fieldName = "targetKind", graphQLTypeSimpleName = "EntityKind", javaClass = EntityKind.class,
		listDepth = 0)
	EntityKind targetKind;

	/**
	 * Restrict to specific target entity ID.
	 */
	@GraphQLScalar(fieldName = "targetId", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long targetId;

	/**
	 * Restrict to replies to a specific comment.
	 */
	@GraphQLScalar(fieldName = "parentId", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long parentId;

	/**
	 * Restrict to comments created by a specific user.
	 */
	@GraphQLScalar(fieldName = "userId", graphQLTypeSimpleName = "ID", javaClass = Long.class, listDepth = 0)
	Long userId;

	/**
	 * Timestamp of first comment to include.
	 */
	@GraphQLScalar(fieldName = "from", graphQLTypeSimpleName = "DateTime", javaClass = OffsetDateTime.class,
		listDepth = 0)
	OffsetDateTime from;

	/**
	 * Timestamp of last comment to include.
	 */
	@GraphQLScalar(fieldName = "to", graphQLTypeSimpleName = "DateTime", javaClass = OffsetDateTime.class,
		listDepth = 0)
	OffsetDateTime to;

	/**
	 * Restrict to specific target entity kind.
	 */
	public void setTargetKind(EntityKind targetKind) {
		this.targetKind = targetKind;
	}

	/**
	 * Restrict to specific target entity kind.
	 */
	public EntityKind getTargetKind() {
		return this.targetKind;
	}

	/**
	 * Restrict to specific entity ID.
	 */
	public void setTargetId(Long targetId) {
		this.targetId = targetId;
	}

	/**
	 * Restrict to specific entity ID.
	 */
	public Long getTargetId() {
		return this.targetId;
	}

	/**
	 * Restrict to replies to a specific comment.
	 */
	public void setParentId(Long parentId) {
		this.parentId = parentId;
	}

	/**
	 * Restrict to replies to a specific comment.
	 */
	public Long getParentId() {
		return this.parentId;
	}

	/**
	 * Restrict to comments created by a specific user.
	 */
	public void setUserId(Long userId) {
		this.userId = userId;
	}

	/**
	 * Restrict to comments created by a specific user.
	 */
	public Long getUserId() {
		return this.userId;
	}

	/**
	 * Timestamp of first comment to include.
	 */
	public void setFrom(OffsetDateTime from) {
		this.from = from;
	}

	/**
	 * Timestamp of first comment to include.
	 */
	public OffsetDateTime getFrom() {
		return this.from;
	}

	/**
	 * Timestamp of last comment to include.
	 */
	public void setTo(OffsetDateTime to) {
		this.to = to;
	}

	/**
	 * Timestamp of last comment to include.
	 */
	public OffsetDateTime getTo() {
		return this.to;
	}

	public String toString() {
		return "CommentQueryFilter {" //
			+ "status: " + this.status //
			+ ", " //
			+ "text: " + this.text //
			+ ", " //
			+ "advancedSearch: " + this.advancedSearch //
			+ ", " //
			+ "recordId: " + this.recordId //
			+ ", " //
			+ "targetKind: " + this.targetKind //
			+ ", " //
			+ "targetId: " + this.targetId //
			+ ", " //
			+ "parentId: " + this.parentId //
			+ ", " //
			+ "userId: " + this.userId //
			+ ", " //
			+ "from: " + this.from //
			+ ", " //
			+ "to: " + this.to //
			+ "}"; //
	}

	public static Builder builderForCommentQueryFilter() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	@SuppressWarnings("unchecked")
	abstract static class AbstractBuilder<B extends AbstractBuilder<B, T>, T extends CommentQueryFilter>
		extends TrackedEntityQueryFilter.AbstractBuilder<B, T> {

		private EntityKind targetKind;
		private Long targetId;
		private Long parentId;
		private Long userId;
		private OffsetDateTime from;
		private OffsetDateTime to;

		/**
		 * Restrict to specific target entity kind.
		 */
		public B withTargetKind(EntityKind targetKindParam) {
			this.targetKind = targetKindParam;
			return (B)this;
		}

		/**
		 * Restrict to specific target entity ID.
		 */
		public B withTargetId(Long targetIdParam) {
			this.targetId = targetIdParam;
			return (B)this;
		}

		/**
		 * Restrict to replies to a specific comment.
		 */
		public B withParentId(Long parentIdParam) {
			this.parentId = parentIdParam;
			return (B)this;
		}

		/**
		 * Restrict to comments created by a specific user.
		 */
		public B withUserId(Long userIdParam) {
			this.userId = userIdParam;
			return (B)this;
		}

		/**
		 * Timestamp of first comment to include.
		 */
		public B withFrom(OffsetDateTime fromParam) {
			this.from = fromParam;
			return (B)this;
		}

		/**
		 * Timestamp of last comment to include.
		 */
		public B withTo(OffsetDateTime toParam) {
			this.to = toParam;
			return (B)this;
		}

		public T build(T _object) {
			super.build(_object);
			_object.setTargetKind(this.targetKind);
			_object.setTargetId(this.targetId);
			_object.setParentId(this.parentId);
			_object.setUserId(this.userId);
			_object.setFrom(this.from);
			_object.setTo(this.to);
			return _object;
		}

	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class by calling the
	 * {@link #builderForCommentQueryFilter()} method.
	 */
	public static class Builder extends AbstractBuilder<Builder, CommentQueryFilter> {

		@Override
		public CommentQueryFilter build() {
			return build(new CommentQueryFilter());
		}

	}

}
