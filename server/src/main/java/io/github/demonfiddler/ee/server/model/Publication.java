/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import java.net.URL;
import java.time.LocalDate;

import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import jakarta.persistence.Column;
import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.PrimaryKeyJoinColumn;

/**
 * A publication associated with given topics.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Entity
@PrimaryKeyJoinColumn(name = "id")
@DiscriminatorValue("PUB")
@GraphQLObjectType("Publication")
public class Publication extends AbstractLinkableEntity {

	/**
	 * The publication title.
	 */
	@GraphQLScalar(fieldName = "title", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String title;

	/**
	 * The names of the authors, one per line.
	 */
	@GraphQLScalar(fieldName = "authors", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String authors;

	/**
	 * The journal in which the publication appeared.
	 */
	@GraphQLNonScalar(fieldName = "journal", graphQLTypeSimpleName = "Journal", javaClass = Journal.class,
		listDepth = 0)
	@ManyToOne(fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "journal_id", nullable = true)
	Journal journal;

	/**
	 * The publication kind.
	 */
	@GraphQLScalar(fieldName = "kind", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String kind;

	/**
	 * The publication date.
	 */
	@GraphQLScalar(fieldName = "date", graphQLTypeSimpleName = "Date", javaClass = LocalDate.class, listDepth = 0)
	LocalDate date;

	/**
	 * The publication year.
	 */
	@GraphQLScalar(fieldName = "year", graphQLTypeSimpleName = "Int", javaClass = Integer.class, listDepth = 0)
	Integer year;

	/**
	 * The publication abstract.
	 */
	@Column(name = "abstract")
	@GraphQLScalar(fieldName = "abstract", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String _abstract;

	/**
	 * User notes about the publication.
	 */
	@GraphQLScalar(fieldName = "notes", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String notes;

	/**
	 * Whether the publication has been peer reviewed.
	 */
	@GraphQLScalar(fieldName = "peerReviewed", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class,
		listDepth = 0)
	Boolean peerReviewed;

	/**
	 * The digital object identifier.
	 */
	@GraphQLScalar(fieldName = "doi", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String doi;

	/**
	 * The International Standard Book Number.
	 */
	@GraphQLScalar(fieldName = "isbn", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String isbn;

	/**
	 * The U.S. National Library of Medicine's PubMedID.
	 */
	@GraphQLScalar(fieldName = "pmid", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String pmid;

	/**
	 * The Corporation for National Research Initiatives's Handle System ID.
	 */
	@GraphQLScalar(fieldName = "hsid", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String hsid;

	/**
	 * Cornell University Library's arXiv.org ID.
	 */
	@GraphQLScalar(fieldName = "arxivid", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String arxivid;

	/**
	 * Cold Spring Harbor Laboratory's bioRxiv.org ID.
	 */
	@GraphQLScalar(fieldName = "biorxivid", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String biorxivid;

	/**
	 * Cold Spring Harbor Laboratory's medRxiv.org ID.
	 */
	@GraphQLScalar(fieldName = "medrxivid", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String medrxivid;

	/**
	 * U.S. Department of Education's ERIC database ID (niche).
	 */
	@GraphQLScalar(fieldName = "ericid", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String ericid;

	/**
	 * CERN's INSPIRE-HEP ID.
	 */
	@GraphQLScalar(fieldName = "ihepid", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String ihepid;

	/**
	 * Open Archives Initiative's OAI-PMH ID.
	 */
	@GraphQLScalar(fieldName = "oaipmhid", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String oaipmhid;

	/**
	 * CNRS (France)'s HAL ID.
	 */
	@GraphQLScalar(fieldName = "halid", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String halid;

	/**
	 * CERN's Zenodo Record ID.
	 */
	@GraphQLScalar(fieldName = "zenodoid", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String zenodoid;

	/**
	 * Elsevier's SCOPUS database EID (proprietary).
	 */
	@GraphQLScalar(fieldName = "scopuseid", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String scopuseid;

	/**
	 * Clarivate's Web of Science Accession Number (UT) (proprietary).
	 */
	@GraphQLScalar(fieldName = "wsan", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String wsan;

	/**
	 * American Psychological Association's PsycINFO Accession Number (proprietary/niche).
	 */
	@GraphQLScalar(fieldName = "pinfoan", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String pinfoan;

	/**
	 * The URL for the publication online.
	 */
	@GraphQLScalar(fieldName = "url", graphQLTypeSimpleName = "URL", javaClass = URL.class, listDepth = 0)
	URL url;

	/**
	 * Flag to indicate that url content is cached on this application server.
	 */
	@GraphQLScalar(fieldName = "cached", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class, listDepth = 0)
	Boolean cached;

	/**
	 * The date the publication was accessed when compiling the database.
	 */
	@GraphQLScalar(fieldName = "accessed", graphQLTypeSimpleName = "Date", javaClass = LocalDate.class, listDepth = 0)
	LocalDate accessed;

	@Override
	public String getEntityKind() {
		return EntityKind.PUB.name();
	}

	/**
	 * The publication title.
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * The publication title.
	 */
	public String getTitle() {
		return this.title;
	}

	/**
	 * The names of the authors, one per line.
	 */
	public void setAuthors(String authors) {
		this.authors = authors;
	}

	/**
	 * The names of the authors, one per line.
	 */
	public String getAuthors() {
		return this.authors;
	}

	/**
	 * The journal in which the publication appeared.
	 */
	public void setJournal(Journal journal) {
		this.journal = journal;
	}

	/**
	 * The journal in which the publication appeared.
	 */
	public Journal getJournal() {
		return this.journal;
	}

	/**
	 * The publication kind.
	 */
	public void setKind(String kind) {
		this.kind = kind;
	}

	/**
	 * The publication kind.
	 */
	public String getKind() {
		return this.kind;
	}

	/**
	 * The publication date.
	 */
	public void setDate(LocalDate date) {
		this.date = date;
	}

	/**
	 * The publication date.
	 */
	public LocalDate getDate() {
		return this.date;
	}

	/**
	 * The publication year.
	 */
	public void setYear(Integer year) {
		this.year = year;
	}

	/**
	 * The publication year.
	 */
	public Integer getYear() {
		return this.year;
	}

	/**
	 * The publication abstract.
	 */
	public void setAbstract(String _abstract) {
		this._abstract = _abstract;
	}

	/**
	 * The publication abstract.
	 */
	public String getAbstract() {
		return this._abstract;
	}

	/**
	 * User notes about the publication.
	 */
	public void setNotes(String notes) {
		this.notes = notes;
	}

	/**
	 * User notes about the publication.
	 */
	public String getNotes() {
		return this.notes;
	}

	/**
	 * Whether the publication has been peer reviewed.
	 */
	public void setPeerReviewed(Boolean peerReviewed) {
		this.peerReviewed = peerReviewed;
	}

	/**
	 * Whether the publication has been peer reviewed.
	 */
	public Boolean getPeerReviewed() {
		return this.peerReviewed;
	}

	/**
	 * The digital object identifier.
	 */
	public void setDoi(String doi) {
		this.doi = doi;
	}

	/**
	 * The digital object identifier.
	 */
	public String getDoi() {
		return this.doi;
	}

	/**
	 * The International Standard Book Number.
	 */
	public void setIsbn(String isbn) {
		this.isbn = isbn;
	}

	/**
	 * The International Standard Book Number.
	 */
	public String getIsbn() {
		return this.isbn;
	}

	/**
	 * The U.S. National Library of Medicine's PubMedID.
	 */
	public void setPmid(String pmid) {
		this.pmid = pmid;
	}

	/**
	 * The U.S. National Library of Medicine's PubMedID.
	 */
	public String getPmid() {
		return this.pmid;
	}

	/**
	 * The Corporation for National Research Initiatives's Handle System ID.
	 */
	public void setHsid(String hsid) {
		this.hsid = hsid;
	}

	/**
	 * The Corporation for National Research Initiatives's Handle System ID.
	 */
	public String getHsid() {
		return this.hsid;
	}

	/**
	 * Cornell University Library's arXiv.org ID.
	 */
	public void setArxivid(String arxivid) {
		this.arxivid = arxivid;
	}

	/**
	 * Cornell University Library's arXiv.org ID.
	 */
	public String getArxivid() {
		return this.arxivid;
	}

	/**
	 * Cold Spring Harbor Laboratory's bioRxiv.org ID.
	 */
	public void setBiorxivid(String biorxivid) {
		this.biorxivid = biorxivid;
	}

	/**
	 * Cold Spring Harbor Laboratory's bioRxiv.org ID.
	 */
	public String getBiorxivid() {
		return this.biorxivid;
	}

	/**
	 * Cold Spring Harbor Laboratory's medRxiv.org ID.
	 */
	public void setMedrxivid(String medrxivid) {
		this.medrxivid = medrxivid;
	}

	/**
	 * Cold Spring Harbor Laboratory's medRxiv.org ID.
	 */
	public String getMedrxivid() {
		return this.medrxivid;
	}

	/**
	 * U.S. Department of Education's ERIC database ID (niche).
	 */
	public void setEricid(String ericid) {
		this.ericid = ericid;
	}

	/**
	 * U.S. Department of Education's ERIC database ID (niche).
	 */
	public String getEricid() {
		return this.ericid;
	}

	/**
	 * CERN's INSPIRE-HEP ID.
	 */
	public void setIhepid(String ihepid) {
		this.ihepid = ihepid;
	}

	/**
	 * CERN's INSPIRE-HEP ID.
	 */
	public String getIhepid() {
		return this.ihepid;
	}

	/**
	 * Open Archives Initiative's OAI-PMH ID.
	 */
	public void setOaipmhid(String oaipmhid) {
		this.oaipmhid = oaipmhid;
	}

	/**
	 * Open Archives Initiative's OAI-PMH ID.
	 */
	public String getOaipmhid() {
		return this.oaipmhid;
	}

	/**
	 * CNRS (France)'s HAL ID.
	 */
	public void setHalid(String halid) {
		this.halid = halid;
	}

	/**
	 * CNRS (France)'s HAL ID.
	 */
	public String getHalid() {
		return this.halid;
	}

	/**
	 * CERN's Zenodo Record ID.
	 */
	public void setZenodoid(String zenodoid) {
		this.zenodoid = zenodoid;
	}

	/**
	 * CERN's Zenodo Record ID.
	 */
	public String getZenodoid() {
		return this.zenodoid;
	}

	/**
	 * Elsevier's SCOPUS database EID (proprietary).
	 */
	public void setScopuseid(String scopuseid) {
		this.scopuseid = scopuseid;
	}

	/**
	 * Elsevier's SCOPUS database EID (proprietary).
	 */
	public String getScopuseid() {
		return this.scopuseid;
	}

	/**
	 * Clarivate's Web of Science Accession Number (UT) (proprietary).
	 */
	public void setWsan(String wsan) {
		this.wsan = wsan;
	}

	/**
	 * Clarivate's Web of Science Accession Number (UT) (proprietary).
	 */
	public String getWsan() {
		return this.wsan;
	}

	/**
	 * American Psychological Association's PsycINFO Accession Number (proprietary/niche).
	 */
	public void setPinfoan(String pinfoan) {
		this.pinfoan = pinfoan;
	}

	/**
	 * American Psychological Association's PsycINFO Accession Number (proprietary/niche).
	 */
	public String getPinfoan() {
		return this.pinfoan;
	}

	/**
	 * The URL for the publication online.
	 */
	public void setUrl(URL url) {
		this.url = url;
	}

	/**
	 * The URL for the publication online.
	 */
	public URL getUrl() {
		return this.url;
	}

	/**
	 * Flag to indicate that url content is cached on this application server.
	 */
	public void setCached(Boolean cached) {
		this.cached = cached;
	}

	/**
	 * Flag to indicate that url content is cached on this application server.
	 */
	public Boolean getCached() {
		return this.cached;
	}

	/**
	 * The date the publication was accessed when compiling the database.
	 */
	public void setAccessed(LocalDate accessed) {
		this.accessed = accessed;
	}

	/**
	 * The date the publication was accessed when compiling the database.
	 */
	public LocalDate getAccessed() {
		return this.accessed;
	}

	public String toString() {
		return "Publication {" //
			+ "id: " + this.id //
			+ ", " //
			+ "entityKind: " + this.getEntityKind() //
			+ ", " //
			+ "status: " + this.status //
			+ ", " //
			+ "rating: " + this.rating //
			+ ", " //
			+ "created: " + this.created //
			+ ", " //
			+ "createdByUser: " + this.createdByUser //
			+ ", " //
			+ "updated: " + this.updated //
			+ ", " //
			+ "updatedByUser: " + this.updatedByUser //
			+ ", " //
			+ "log: " + this.log //
			+ ", " //
			+ "fromEntityLinks: " + this.fromEntityLinks //
			+ ", " //
			+ "toEntityLinks: " + this.toEntityLinks //
			+ ", " //
			+ "title: " + this.title //
			+ ", " //
			+ "authors: " + this.authors //
			+ ", " //
			+ "journal: " + this.journal //
			+ ", " //
			+ "kind: " + this.kind //
			+ ", " //
			+ "date: " + this.date //
			+ ", " //
			+ "year: " + this.year //
			+ ", " //
			+ "_abstract: " + this._abstract //
			+ ", " //
			+ "notes: " + this.notes //
			+ ", " //
			+ "peerReviewed: " + this.peerReviewed //
			+ ", " //
			+ "doi: " + this.doi //
			+ ", " //
			+ "isbn: " + this.isbn //
			+ ", " //
			+ "pmid: " + this.pmid //
			+ ", " //
			+ "hsid: " + this.hsid //
			+ ", " //
			+ "arxivid: " + this.arxivid //
			+ ", " //
			+ "biorxivid: " + this.biorxivid //
			+ ", " //
			+ "medrxivid: " + this.medrxivid //
			+ ", " //
			+ "ericid: " + this.ericid //
			+ ", " //
			+ "ihepid: " + this.ihepid //
			+ ", " //
			+ "oaipmhid: " + this.oaipmhid //
			+ ", " //
			+ "halid: " + this.halid //
			+ ", " //
			+ "zenodoid: " + this.zenodoid //
			+ ", " //
			+ "scopuseid: " + this.scopuseid //
			+ ", " //
			+ "wsan: " + this.wsan //
			+ ", " //
			+ "pinfoan: " + this.pinfoan //
			+ ", " //
			+ "url: " + this.url //
			+ ", " //
			+ "cached: " + this.cached //
			+ ", " //
			+ "accessed: " + this.accessed //
			+ "}"; //
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractLinkableEntity.Builder<Builder, Publication> {

		private String title;
		private String authors;
		private Journal journal;
		private String kind;
		private LocalDate date;
		private Integer year;
		private String _abstract;
		private String notes;
		private Boolean peerReviewed;
		private String doi;
		private String isbn;
		private String pmid;
		private String hsid;
		private String arxivid;
		private String biorxivid;
		private String medrxivid;
		private String ericid;
		private String ihepid;
		private String oaipmhid;
		private String halid;
		private String zenodoid;
		private String scopuseid;
		private String wsan;
		private String pinfoan;
		private URL url;
		private Boolean cached;
		private LocalDate accessed;

		/**
		 * The publication title.
		 */
		public Builder withTitle(String titleParam) {
			this.title = titleParam;
			return this;
		}

		/**
		 * The names of the authors, one per line.
		 */
		public Builder withAuthors(String authorsParam) {
			this.authors = authorsParam;
			return this;
		}

		/**
		 * The name of the journal in which the publication appeared.
		 */
		public Builder withJournal(Journal journalParam) {
			this.journal = journalParam;
			return this;
		}

		/**
		 * The publication kind.
		 */
		public Builder withKind(String kindParam) {
			this.kind = kindParam;
			return this;
		}

		/**
		 * The publication date.
		 */
		public Builder withDate(LocalDate dateParam) {
			this.date = dateParam;
			return this;
		}

		/**
		 * The publication year.
		 */
		public Builder withYear(Integer yearParam) {
			this.year = yearParam;
			return this;
		}

		/**
		 * The publication abstract.
		 */
		public Builder withAbstract(String _abstractParam) {
			this._abstract = _abstractParam;
			return this;
		}

		/**
		 * User notes about the publication.
		 */
		public Builder withNotes(String notesParam) {
			this.notes = notesParam;
			return this;
		}

		/**
		 * Whether the publication has been peer reviewed.
		 */
		public Builder withPeerReviewed(Boolean peerReviewedParam) {
			this.peerReviewed = peerReviewedParam;
			return this;
		}

		/**
		 * The digital object identifier.
		 */
		public Builder withDoi(String doiParam) {
			this.doi = doiParam;
			return this;
		}

		/**
		 * The International Standard Book Number.
		 */
		public Builder withIsbn(String isbnParam) {
			this.isbn = isbnParam;
			return this;
		}

		/**
		 * The U.S. National Library of Medicine's PubMedID.
		 */
		public Builder withPmid(String pmidParam) {
			this.pmid = pmidParam;
			return this;
		}

		/**
		 * The Corporation for National Research Initiatives's Handle System ID.
		 */
		public Builder withHsid(String hsidParam) {
			this.hsid = hsidParam;
			return this;
		}

		/**
		 * Cornell University Library's arXiv.org ID.
		 */
		public Builder withArxivid(String arxividParam) {
			this.arxivid = arxividParam;
			return this;
		}

		/**
		 * Cold Spring Harbor Laboratory's bioRxiv.org ID.
		 */
		public Builder withBiorxivid(String biorxividParam) {
			this.biorxivid = biorxividParam;
			return this;
		}

		/**
		 * Cold Spring Harbor Laboratory's medRxiv.org ID.
		 */
		public Builder withMedrxivid(String medrxividParam) {
			this.medrxivid = medrxividParam;
			return this;
		}

		/**
		 * U.S. Department of Education's ERIC database ID (niche).
		 */
		public Builder withEricid(String ericidParam) {
			this.ericid = ericidParam;
			return this;
		}

		/**
		 * CERN's INSPIRE-HEP ID.
		 */
		public Builder withIhepid(String ihepidParam) {
			this.ihepid = ihepidParam;
			return this;
		}

		/**
		 * Open Archives Initiative's OAI-PMH ID.
		 */
		public Builder withOaipmhid(String oaipmhidParam) {
			this.oaipmhid = oaipmhidParam;
			return this;
		}

		/**
		 * CNRS (France)'s HAL ID.
		 */
		public Builder withHalid(String halidParam) {
			this.halid = halidParam;
			return this;
		}

		/**
		 * CERN's Zenodo Record ID.
		 */
		public Builder withZenodoid(String zenodoidParam) {
			this.zenodoid = zenodoidParam;
			return this;
		}

		/**
		 * Elsevier's SCOPUS database EID (proprietary).
		 */
		public Builder withScopuseid(String scopuseidParam) {
			this.scopuseid = scopuseidParam;
			return this;
		}

		/**
		 * Clarivate's Web of Science Accession Number (UT) (proprietary).
		 */
		public Builder withWsan(String wsanParam) {
			this.wsan = wsanParam;
			return this;
		}

		/**
		 * American Psychological Association's PsycINFO Accession Number (proprietary/niche).
		 */
		public Builder withPinfoan(String pinfoanParam) {
			this.pinfoan = pinfoanParam;
			return this;
		}

		/**
		 * The URL for the publication online.
		 */
		public Builder withUrl(URL urlParam) {
			this.url = urlParam;
			return this;
		}

		/**
		 * Flag to indicate that url content is cached on this application server.
		 */
		public Builder withCached(Boolean cachedParam) {
			this.cached = cachedParam;
			return this;
		}

		/**
		 * The date the publication was accessed when compiling the database.
		 */
		public Builder withAccessed(LocalDate accessedParam) {
			this.accessed = accessedParam;
			return this;
		}

		@Override
		public Publication build() {
			Publication _object = build(new Publication());
			_object.setTitle(this.title);
			_object.setAuthors(this.authors);
			_object.setJournal(this.journal);
			_object.setKind(this.kind);
			_object.setDate(this.date);
			_object.setYear(this.year);
			_object.setAbstract(this._abstract);
			_object.setNotes(this.notes);
			_object.setPeerReviewed(this.peerReviewed);
			_object.setDoi(this.doi);
			_object.setIsbn(this.isbn);
			_object.setPmid(this.pmid);
			_object.setHsid(this.hsid);
			_object.setArxivid(this.arxivid);
			_object.setBiorxivid(this.biorxivid);
			_object.setMedrxivid(this.medrxivid);
			_object.setEricid(this.ericid);
			_object.setIhepid(this.ihepid);
			_object.setOaipmhid(this.oaipmhid);
			_object.setHalid(this.halid);
			_object.setZenodoid(this.zenodoid);
			_object.setScopuseid(this.scopuseid);
			_object.setWsan(this.wsan);
			_object.setPinfoan(this.pinfoan);
			_object.setUrl(this.url);
			_object.setCached(this.cached);
			_object.setAccessed(this.accessed);
			return _object;
		}

	}

}
