/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * Parameters to control an {@code EntityLink} query.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("EntityLinkQueryFilter")
public class EntityLinkQueryFilter extends TrackedEntityQueryFilter {

	/**
	 * The 'linked-from' entity kind, if a master list is designated.
	 */
	@GraphQLScalar(fieldName = "fromEntityKind", graphQLTypeSimpleName = "EntityKind", javaClass = EntityKind.class,
		listDepth = 0)
	EntityKind fromEntityKind;

	/**
	 * The 'linked-from' entity identifier, if a master list is designated.
	 */
	@GraphQLScalar(fieldName = "fromEntityId", graphQLTypeSimpleName = "Long", javaClass = Long.class, listDepth = 0)
	Long fromEntityId;

	/**
	 * The 'linked-to' entity kind, if a master list is designated.
	 */
	@GraphQLScalar(fieldName = "toEntityKind", graphQLTypeSimpleName = "EntityKind", javaClass = EntityKind.class,
		listDepth = 0)
	EntityKind toEntityKind;

	/**
	 * The 'linked-to' entity identifier, if a master list is designated.
	 */
	@GraphQLScalar(fieldName = "toEntityId", graphQLTypeSimpleName = "Long", javaClass = Long.class, listDepth = 0)
	Long toEntityId;

	/**
	 * The 'linked-from' entity kind, if a master list is designated.
	 */
	public void setFromEntityKind(EntityKind masterEntityKind) {
		this.fromEntityKind = masterEntityKind;
	}

	/**
	 * The 'linked-from' entity kind, if a master list is designated.
	 */
	public EntityKind getFromEntityKind() {
		return this.fromEntityKind;
	}

	/**
	 * The 'linked-from' entity identifier, if a master list is designated.
	 */
	public void setFromEntityId(Long masterEntityId) {
		this.fromEntityId = masterEntityId;
	}

	/**
	 * The 'linked-from' entity identifier, if a master list is designated.
	 */
	public Long getFromEntityId() {
		return this.fromEntityId;
	}

	/**
	 * The 'linked-to' entity kind.
	 */
	public EntityKind getToEntityKind() {
		return toEntityKind;
	}

	/**
	 * The 'linked-to' entity kind.
	 */
	public void setToEntityKind(EntityKind toEntityKind) {
		this.toEntityKind = toEntityKind;
	}

	/**
	 * The 'linked-to' entity identifier.
	 */
	public Long getToEntityId() {
		return toEntityId;
	}

	/**
	 * The 'linked-to' entity identifier.
	 */
	public void setToEntityId(Long toEntityId) {
		this.toEntityId = toEntityId;
	}

	public String toString() {
		return "EntityLinkQueryFilter {" //$NON-NLS-1$
			+ "fromEntityKind: " + this.fromEntityKind //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "fromEntityId: " + this.fromEntityId //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "toEntityKind: " + this.toEntityKind //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "toEntityId: " + this.toEntityId //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "status: " + this.status //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "text: " + this.text //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "advancedSearch: " + this.advancedSearch //$NON-NLS-1$
			+ "}"; //$NON-NLS-1$
	}

	public static Builder builderForEntityLinkQueryFilter() {
		return new Builder();
	}

	@SuppressWarnings("unchecked")
	abstract static class AbstractBuilder<B extends AbstractBuilder<B, T>, T extends EntityLinkQueryFilter>
		extends TrackedEntityQueryFilter.AbstractBuilder<B, T> {

		private EntityKind fromEntityKind;
		private Long fromEntityId;
		private EntityKind toEntityKind;
		private Long toEntityId;

		/**
		 * The 'linked-from' entity kind, if a master list is designated.
		 */
		public final B withFromEntityKind(EntityKind fromEntityKindParam) {
			this.fromEntityKind = fromEntityKindParam;
			return (B)this;
		}

		/**
		 * The 'linked-from' entity identifier, if a master list is designated.
		 */
		public final B withFromEntityId(Long fromEntityIdParam) {
			this.fromEntityId = fromEntityIdParam;
			return (B)this;
		}

		/**
		 * The 'linked-from' entity kind, if a master list is designated.
		 */
		public final B withToEntityKind(EntityKind toEntityKindParam) {
			this.toEntityKind = toEntityKindParam;
			return (B)this;
		}

		/**
		 * The 'linked-from' entity identifier, if a master list is designated.
		 */
		public final B withToEntityId(Long toEntityIdParam) {
			this.toEntityId = toEntityIdParam;
			return (B)this;
		}

		T build(T _object) {
			super.build(_object);
			_object.setFromEntityKind(this.fromEntityKind);
			_object.setFromEntityId(this.fromEntityId);
			_object.setToEntityKind(this.toEntityKind);
			_object.setToEntityId(this.toEntityId);
			return _object;
		}

	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class by calling the
	 * {@link #builderForEntityLinkQueryFilter()}
	 */
	public static class Builder extends AbstractBuilder<Builder, EntityLinkQueryFilter> {

		@Override
		public EntityLinkQueryFilter build() {
			return build(new EntityLinkQueryFilter());
		}

	}

}
