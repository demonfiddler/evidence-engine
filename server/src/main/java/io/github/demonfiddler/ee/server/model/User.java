/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import java.util.ArrayList;
import java.util.List;

import com.graphql_java_generator.annotation.GraphQLDirective;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import jakarta.persistence.CascadeType;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.PrimaryKeyJoinColumn;

/**
 * Describes a user of the system.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Entity
@PrimaryKeyJoinColumn(name = "id")
@DiscriminatorValue("USR")
@GraphQLObjectType("User")
@GraphQLDirective(name = "@auth", parameterNames = {}, parameterTypes = {}, parameterValues = {})
public class User extends AbstractTrackedEntity {

	/**
	 * The (mutable?) unique user name (user-assigned).
	 */
	@GraphQLScalar(fieldName = "username", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String username;

	/**
	 * The user's first name.
	 */
	@GraphQLScalar(fieldName = "firstName", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String firstName;

	/**
	 * The user's last name.
	 */
	@GraphQLScalar(fieldName = "lastName", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String lastName;

	/**
	 * The user's email address.
	 */
	@GraphQLScalar(fieldName = "email", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	String email;

	/**
	 * A hash of the user's password.
	 */
	@GraphQLScalar(fieldName = "password", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	String password;

	/**
	 * The user's country of residence.
	 */
	@GraphQLScalar( fieldName = "country", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
    @Column(name = "country_code")
	String country;

	/**
	 * Added notes about the user.
	 */
	@GraphQLScalar( fieldName = "notes", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String notes;

	/**
	 * The authorities granted to the user.
	 */
	@GraphQLScalar(fieldName = "authorities", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 1)
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
    @ElementCollection//(targetClass = AuthorityKind.class)
    @CollectionTable(name = "user_authority", joinColumns = {
		@JoinColumn(name = "user_id", referencedColumnName = "id"),
		@JoinColumn(name = "username", referencedColumnName = "username")
	})
    @Column(name = "authority")
    @Enumerated(EnumType.STRING)
	List<AuthorityKind> authorities = new ArrayList<>();

	@GraphQLNonScalar( fieldName = "groups", graphQLTypeSimpleName = "Group", javaClass = Group.class, listDepth = 1)
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
    @ManyToMany(fetch = FetchType.LAZY, cascade = { CascadeType.ALL }, mappedBy = "members")
	List<Group> groups = new ArrayList<>();

	@Override
	public String getEntityKind() {
		return EntityKind.USR.name();
	}

	/**
	 * The (mutable?) unique user name (user-assigned).
	 */
	public void setUsername(String username) {
		this.username = username;
	}

	/**
	 * The (mutable?) unique user name (user-assigned).
	 */
	public String getUsername() {
		return this.username;
	}

	/**
	 * The user's first name.
	 */
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	/**
	 * The user's first name.
	 */
	public String getFirstName() {
		return this.firstName;
	}

	/**
	 * The user's last name.
	 */
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	/**
	 * The user's last name.
	 */
	public String getLastName() {
		return this.lastName;
	}

	/**
	 * The user's email address.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * The user's email address.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public String getEmail() {
		return this.email;
	}

	/**
	 * A hash of the user's password.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public void setPassword(String password) {
		this.password = password;
	}

	/**
	 * A hash of the user's password.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public String getPassword() {
		return this.password;
	}

	/**
	 * The user's country of residence.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public void setCountry(String country) {
		this.country = country;
	}

	/**
	 * The user's country of residence.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public String getCountry() {
		return this.country;
	}

	/**
	 * Added notes about the user.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public void setNotes(String notes) {
		this.notes = notes;
	}

	/**
	 * Added notes about the user.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public String getNotes() {
		return this.notes;
	}

	/**
	 * The authorities granted to the user.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public void setAuthorities(List<AuthorityKind> authorities) {
		this.authorities = authorities;
	}

	/**
	 * The authorities granted to the user.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	public List<AuthorityKind> getAuthorities() {
		return this.authorities;
	}

	/**
	 * The groups of which the user is a member.
	 */
	public void setGroups(List<Group> groups) {
		this.groups = groups;
	}

	/**
	 * The groups of which the user is a member.
	 */
	public List<Group> getGroups() {
		return this.groups;
	}

	public String toString() {
		return "User {" //
			+ "id: " + this.id //
			+ ", " //
			+ "entityKind: " + this.getEntityKind() //
			+ ", " //
			+ "status: " + this.status //
			+ ", " //
			+ "rating: " + this.rating //
			+ ", " //
			+ "created: " + this.created //
			+ ", " //
			+ "createdByUser: " + this.createdByUser //
			+ ", " //
			+ "updated: " + this.updated //
			+ ", " //
			+ "updatedByUser: " + this.updatedByUser //
			+ ", " //
			+ "log: " + this.log //
			+ ", " //
			+ "username: " + this.username //
			+ ", " //
			+ "firstName: " + this.firstName //
			+ ", " //
			+ "lastName: " + this.lastName //
			+ ", " //
			+ "email: " + this.email //
			+ ", " //
			+ "password: " + this.password //
			+ ", " //
			+ "country: " + this.country //
			+ ", " //
			+ "notes: " + this.notes //
			+ ", " //
			+ "authorities: " + this.authorities //
			+ ", " //
			+ "groups: " + this.groups //
			+ "}"; //
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractTrackedEntity.Builder<Builder, User> {

		private String username;
		private String firstName;
		private String lastName;
		private String email;
		private String password;
		private String country;
		private String notes;
		private List<AuthorityKind> authorities;
		private List<Group> groups;

		/**
		 * The (mutable?) unique user name (user-assigned).
		 */
		public Builder withUsername(String usernameParam) {
			this.username = usernameParam;
			return this;
		}

		/**
		 * The user's first name.
		 */
		public Builder withFirstName(String firstNameParam) {
			this.firstName = firstNameParam;
			return this;
		}

		/**
		 * The user's last name.
		 */
		public Builder withLastName(String lastNameParam) {
			this.lastName = lastNameParam;
			return this;
		}

		/**
		 * The user's email address.
		 */
		public Builder withEmail(String emailParam) {
			this.email = emailParam;
			return this;
		}

		/**
		 * A hash of the user's password.
		 */
		public Builder withPassword(String passwordParam) {
			this.password = passwordParam;
			return this;
		}

		/**
		 * The user's country of residence.
		 */
		public Builder withCountry(String countryParam) {
			this.country = countryParam;
			return this;
		}

		/**
		 * Added notes about the user.
		 */
		public Builder withNotes(String notesParam) {
			this.notes = notesParam;
			return this;
		}

		/**
		 * The authorities granted to the user.
		 */
		public Builder withAuthorities(List<AuthorityKind> authoritiesParam) {
			this.authorities = authoritiesParam;
			return this;
		}

		/**
		 * The groups of which the user is a member.
		 */
		public Builder withGroups(List<Group> groupsParam) {
			this.groups = groupsParam;
			return this;
		}

		@Override
		public User build() {
			User _object = build(new User());
			_object.setUsername(this.username);
			_object.setFirstName(this.firstName);
			_object.setLastName(this.lastName);
			_object.setEmail(this.email);
			_object.setPassword(this.password);
			_object.setCountry(this.country);
			_object.setNotes(this.notes);
			_object.setAuthorities(this.authorities);
			_object.setGroups(this.groups);
			return _object;
		}

	}

}
