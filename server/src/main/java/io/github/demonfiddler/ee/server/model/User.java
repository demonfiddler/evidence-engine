/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import java.util.List;

import com.graphql_java_generator.annotation.GraphQLDirective;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.Entity;
import jakarta.persistence.PrimaryKeyJoinColumn;
import jakarta.persistence.Transient;

/**
 * Describes a user of the system.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Entity
@PrimaryKeyJoinColumn(name = "id")
@DiscriminatorValue("USR")
@GraphQLObjectType("User")
@GraphQLDirective(name = "@auth", parameterNames = {}, parameterTypes = {}, parameterValues = {})
public class User extends AbstractTrackedEntity {

	/**
	 * The (mutable?) unique user name (user-assigned).
	 */
	@GraphQLScalar(fieldName = "username", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String username;

	/**
	 * The user's first name.
	 */
	@GraphQLScalar(fieldName = "firstName", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String firstName;

	/**
	 * The user's last name.
	 */
	@GraphQLScalar(fieldName = "lastName", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String lastName;

	/**
	 * The user's email address.
	 */
	@GraphQLScalar(fieldName = "email", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = { "permission" }, parameterTypes = { "[PermissionKind!]" },
		parameterValues = { "[ADM]" })
	String email;

	// TODO: consider whether to reveal this through the GraphQL API.
	/**
	 * A hash of the user's password.
	 */
	@GraphQLScalar(fieldName = "password", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	@GraphQLDirective(name = "@auth", parameterNames = { "permission" }, parameterTypes = { "[PermissionKind!]" },
		parameterValues = { "[ADM]" })
	String password;

	/**
	 * The permissions granted to the user.
	 */
	@Transient
	@GraphQLScalar(fieldName = "permissions", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 1)
	@GraphQLDirective(name = "@auth", parameterNames = { "permission" }, parameterTypes = { "[PermissionKind!]" },
		parameterValues = { "[ADM]" })
	List<String> permissions;

	@Override
	public String getEntityKind() {
		return EntityKind.USR.name();
	}

	/**
	 * The (mutable?) unique user name (user-assigned).
	 */
	public void setUsername(String username) {
		this.username = username;
	}

	/**
	 * The (mutable?) unique user name (user-assigned).
	 */
	public String getUsername() {
		return this.username;
	}

	/**
	 * The user's first name.
	 */
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	/**
	 * The user's first name.
	 */
	public String getFirstName() {
		return this.firstName;
	}

	/**
	 * The user's last name.
	 */
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	/**
	 * The user's last name.
	 */
	public String getLastName() {
		return this.lastName;
	}

	/**
	 * The user's email address.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "permission" }, parameterTypes = { "[PermissionKind!]" },
		parameterValues = { "[ADM]" })
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * The user's email address.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "permission" }, parameterTypes = { "[PermissionKind!]" },
		parameterValues = { "[ADM]" })
	public String getEmail() {
		return this.email;
	}

	// TODO: consider whether to reveal this through the GraphQL API.
	/**
	 * A hash of the user's password.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "permission" }, parameterTypes = { "[PermissionKind!]" },
		parameterValues = { "[ADM]" })
	public void setPassword(String password) {
		this.password = password;
	}

	// TODO: consider whether to reveal this through the GraphQL API.
	/**
	 * A hash of the user's password.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "permission" }, parameterTypes = { "[PermissionKind!]" },
		parameterValues = { "[ADM]" })
	public String getPassword() {
		return this.password;
	}

	/**
	 * The permissions granted to the user.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "permission" }, parameterTypes = { "[PermissionKind!]" },
		parameterValues = { "[ADM]" })
	public void setPermissions(List<String> permissions) {
		this.permissions = permissions;
	}

	/**
	 * The permissions granted to the user.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "permission" }, parameterTypes = { "[PermissionKind!]" },
		parameterValues = { "[ADM]" })
	public List<String> getPermissions() {
		return this.permissions;
	}

	public String toString() {
		return "User {" //$NON-NLS-1$
			+ "id: " + this.id //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "entityKind: " + this.getEntityKind() //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "status: " + this.status //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "created: " + this.created //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "createdByUser: " + this.createdByUser //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updated: " + this.updated //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "updatedByUser: " + this.updatedByUser //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "log: " + this.log //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "username: " + this.username //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "firstName: " + this.firstName //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "lastName: " + this.lastName //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "email: " + this.email //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "password: " + this.password //$NON-NLS-1$
			+ ", " //$NON-NLS-1$
			+ "permissions: " + this.permissions //$NON-NLS-1$
			+ "}"; //$NON-NLS-1$
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractTrackedEntity.Builder<Builder, User> {

		private String username;
		private String firstName;
		private String lastName;
		private String email;
		private String password;
		private List<String> permissions;

		/**
		 * The (mutable?) unique user name (user-assigned).
		 */
		public Builder withUsername(String usernameParam) {
			this.username = usernameParam;
			return this;
		}

		/**
		 * The user's first name.
		 */
		public Builder withFirstName(String firstNameParam) {
			this.firstName = firstNameParam;
			return this;
		}

		/**
		 * The user's last name.
		 */
		public Builder withLastName(String lastNameParam) {
			this.lastName = lastNameParam;
			return this;
		}

		/**
		 * The user's email address.
		 */
		public Builder withEmail(String emailParam) {
			this.email = emailParam;
			return this;
		}

		// TODO: consider whether to reveal this through the GraphQL API.
		/**
		 * A hash of the user's password.
		 */
		public Builder withPassword(String passwordParam) {
			this.password = passwordParam;
			return this;
		}

		/**
		 * The permissions granted to the user.
		 */
		public Builder withPermissions(List<String> permissionsParam) {
			this.permissions = permissionsParam;
			return this;
		}

		@Override
		public User build() {
			User _object = build(new User());
			_object.setUsername(this.username);
			_object.setFirstName(this.firstName);
			_object.setLastName(this.lastName);
			_object.setEmail(this.email);
			_object.setPassword(this.password);
			_object.setPermissions(this.permissions);
			return _object;
		}

	}

}
