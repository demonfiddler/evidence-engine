/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.model;

import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.PrimaryKeyJoinColumn;

/**
 * A comment associated with a tracked entity.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Entity
@PrimaryKeyJoinColumn(name = "id")
@DiscriminatorValue("COM")
@GraphQLObjectType("Comment")
public class Comment extends AbstractTrackedEntity {

	public Comment() {
	}

	/**
	 * The entity to which this comment is attached.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "target_id")
	@GraphQLNonScalar(fieldName = "target", graphQLTypeSimpleName = "ITrackedEntity", javaClass = ITrackedEntity.class,
		listDepth = 0)
	AbstractTrackedEntity target;

	/**
	 * The parent comment to which this is a reply.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "parent_id")
	@GraphQLNonScalar(fieldName = "parent", graphQLTypeSimpleName = "Comment", javaClass = Comment.class, listDepth = 0)
	Comment parent;

	/**
	 * The text of the comment.
	 */
	@GraphQLScalar(fieldName = "text", graphQLTypeSimpleName = "String", javaClass = String.class, listDepth = 0)
	String text;

	@Override
	public String getEntityKind() {
		return EntityKind.COM.name();
	}

	/**
	 * The entity to which this comment is attached.
	 */
	public AbstractTrackedEntity getTarget() {
		return target;
	}

	/**
	 * The entity to which this comment is attached.
	 */
	public void setTarget(AbstractTrackedEntity target) {
		this.target = target;
	}

	/**
	  * The parent comment to which this is a reply.
 	 */
	public void setParent(Comment parent) {
		this.parent = parent;
	}

	/**
	 * The parent comment to which this is a reply.
	 */
	public Comment getParent() {
		return this.parent;
	}

	/**
	 * The text of the comment.
	 */
	public void setText(String text) {
		this.text = text;
	}

	/**
	 * The text of the comment.
	 */
	public String getText() {
		return this.text;
	}

	public String toString() {
		return "Comment {" //
			+ "id: " + this.id //
			+ ", " //
			+ "entityKind: " + this.getEntityKind() //
			+ ", " //
			+ "status: " + this.status //
			+ ", " //
			+ "rating: " + this.rating //
			+ ", " //
			+ "created: " + this.created //
			+ ", " //
			+ "createdByUser: " + this.createdByUser //
			+ ", " //
			+ "updated: " + this.updated //
			+ ", " //
			+ "updatedByUser: " + this.updatedByUser //
			+ ", " //
			+ "log: " + this.log //
			+ ", " //
			+ "comments: " + this.comments //
			+ ", " //
			+ "target: " + this.getTarget() //
			+ ", " //
			+ "parent: " + this.parent //
			+ ", " //
			+ "text: " + this.text //
			+ "}"; //
	}

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder extends AbstractTrackedEntity.Builder<Builder, Comment> {

		private AbstractTrackedEntity target;
		private Comment parent;
		private String text;

		/**
		 * The entity to which this comment is attached.
		 */
		public Builder withTarget(AbstractTrackedEntity targetParam) {
			this.target = targetParam;
			return this;
		}

		/**
		 * The parent comment to which this is a reply.
		 */
		public Builder withParent(Comment parentParam) {
			this.parent = parentParam;
			return this;
		}

		/**
		 * The text of the comment.
		 */
		public Builder withText(String textParam) {
			this.text = textParam;
			return this;
		}

		public Comment build() {
			Comment _object = super.build(new Comment());
			_object.setTarget(this.target);
			_object.setParent(this.parent);
			_object.setText(this.text);
			return _object;
		}

	}

}
