/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024-25 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>.
 *--------------------------------------------------------------------------------------------------------------------*/

package io.github.demonfiddler.ee.server.datafetcher;

import java.util.NoSuchElementException;
import java.util.Optional;

import com.graphql_java_generator.annotation.GraphQLDirective;

import graphql.schema.DataFetchingEnvironment;
import io.github.demonfiddler.ee.server.model.EntityLinkQueryFilter;
import io.github.demonfiddler.ee.server.model.LogQueryFilter;
import io.github.demonfiddler.ee.server.model.PageableInput;
import io.github.demonfiddler.ee.server.model.StatisticsQueryFilter;
import io.github.demonfiddler.ee.server.model.TopicQueryFilter;
import io.github.demonfiddler.ee.server.model.LinkableEntityQueryFilter;
import io.github.demonfiddler.ee.server.model.TrackedEntityQueryFilter;

/**
 * Contains the data fetchers that are delegated in the bean that the implementation has to provide, when fetching
 * fields for the Query GraphQL type, as defined in the provided GraphQL schema. Please read the
 * <a href= "https://github.com/graphql-java-generator/graphql-maven-plugin-project/wiki/server"> wiki server page</a>
 * for more information on this.
 * @author generated by graphql-java-generator
 * @see <a href=
 * "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
public interface DataFetchersDelegateQuery {

	/**
	 * Description for the claims field: <br/>
	 * Returns a paged list of claims. <br/>
	 * Loads the data for Query.claims. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.ClaimPage)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;io.github.demonfiddler.ee.server.ClaimPage&gt; or a
	 * Flux&lt;io.github.demonfiddler.ee.server.ClaimPage&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.ClaimPage&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.ClaimPage>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param filter The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param pageSort The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object claims(DataFetchingEnvironment dataFetchingEnvironment, LinkableEntityQueryFilter filter,
		PageableInput pageSort);

	/**
	 * Description for the claimById field: <br/>
	 * Returns a claim given its identifier. <br/>
	 * Loads the data for Query.claimById. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.Claim)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;io.github.demonfiddler.ee.server.Claim&gt;
	 * or a Flux&lt;io.github.demonfiddler.ee.server.Claim&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Claim&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.Claim>. This allows
	 * to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly
	 * optimize the number of requests to the server. The principle is this one: The data loader collects all the data
	 * to load, avoid to load several times the same data, and allows parallel execution of the queries, if multiple
	 * queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param id The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object claimById(DataFetchingEnvironment dataFetchingEnvironment, Long id);

	/**
	 * Description for the declarations field: <br/>
	 * Returns a paged list of declarations. <br/>
	 * Loads the data for Query.declarations. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.DeclarationPage)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;io.github.demonfiddler.ee.server.DeclarationPage&gt; or a
	 * Flux&lt;io.github.demonfiddler.ee.server.DeclarationPage&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.DeclarationPage&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.DeclarationPage>.
	 * This allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param filter The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param pageSort The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object declarations(DataFetchingEnvironment dataFetchingEnvironment, LinkableEntityQueryFilter filter,
		PageableInput pageSort);

	/**
	 * Description for the declarationById field: <br/>
	 * Returns a declaration given its identifier. <br/>
	 * Loads the data for Query.declarationById. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.Declaration)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;io.github.demonfiddler.ee.server.Declaration&gt; or a
	 * Flux&lt;io.github.demonfiddler.ee.server.Declaration&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Declaration&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.Declaration>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param id The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object declarationById(DataFetchingEnvironment dataFetchingEnvironment, Long id);

	/**
	 * Loads the data for Query.entityLinks. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.EntityLinkPage)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;io.github.demonfiddler.ee.server.EntityLinkPage&gt; or a
	 * Flux&lt;io.github.demonfiddler.ee.server.EntityLinkPage&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.EntityLinkPage&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.EntityLinkPage>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param filter The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param pageSort The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object entityLinks(DataFetchingEnvironment dataFetchingEnvironment, EntityLinkQueryFilter filter,
		PageableInput pageSort);

	/**
	 * Description for the entityLinkById field: <br/>
	 * Returns an entity link given its identifier.. <br/>
	 * Loads the data for Query.entityLinkById. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.EntityLink)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;io.github.demonfiddler.ee.server.EntityLink&gt; or a
	 * Flux&lt;io.github.demonfiddler.ee.server.EntityLink&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.EntityLink&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.EntityLink>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param id The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object entityLinkById(DataFetchingEnvironment dataFetchingEnvironment, Long id);

	/**
	 * Description for the entityLinkByEntityIds field: <br/>
	 * Returns an entity link given its from- and to-entity identifiers. <br/>
	 * Loads the data for Query.entityLinkByEntityIds. It may return whatever is accepted by the Spring Controller, that
	 * is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a EntityLink)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;EntityLink&gt; or a
	 * Flux&lt;EntityLink&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;EntityLink&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<EntityLink>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param fromEntityId The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL
	 * schema.
	 * @param toEntityId The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL
	 * schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object entityLinkByEntityIds(DataFetchingEnvironment dataFetchingEnvironment, Long fromEntityId, Long toEntityId);

	/**
	 * Description for the journals field: <br/>
	 * Returns a paged list of journals. <br/>
	 * Loads the data for Query.journals. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.JournalPage)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;io.github.demonfiddler.ee.server.JournalPage&gt; or a
	 * Flux&lt;io.github.demonfiddler.ee.server.JournalPage&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.JournalPage&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.JournalPage>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param filter The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param pageSort The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object journals(DataFetchingEnvironment dataFetchingEnvironment, TrackedEntityQueryFilter filter,
		PageableInput pageSort);

	/**
	 * Description for the journalById field: <br/>
	 * Returns a journal given its identifier. <br/>
	 * Loads the data for Query.journalById. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.Journal)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;io.github.demonfiddler.ee.server.Journal&gt;
	 * or a Flux&lt;io.github.demonfiddler.ee.server.Journal&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Journal&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.Journal>. This allows
	 * to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly
	 * optimize the number of requests to the server. The principle is this one: The data loader collects all the data
	 * to load, avoid to load several times the same data, and allows parallel execution of the queries, if multiple
	 * queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param id The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object journalById(DataFetchingEnvironment dataFetchingEnvironment, Long id);

	/**
	 * Description for the log field: <br/>
	 * Returns a paged list of log entries. <br/>
	 * Loads the data for Query.log. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.LogPage)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;io.github.demonfiddler.ee.server.LogPage&gt;
	 * or a Flux&lt;io.github.demonfiddler.ee.server.LogPage&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.LogPage&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.LogPage>. This allows
	 * to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly
	 * optimize the number of requests to the server. The principle is this one: The data loader collects all the data
	 * to load, avoid to load several times the same data, and allows parallel execution of the queries, if multiple
	 * queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param filter The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param pageSort The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object log(DataFetchingEnvironment dataFetchingEnvironment, LogQueryFilter filter, PageableInput pageSort);

	/**
	 * Description for the persons field: <br/>
	 * Returns a paged list of persons. <br/>
	 * Loads the data for Query.persons. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.PersonPage)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;io.github.demonfiddler.ee.server.PersonPage&gt; or a
	 * Flux&lt;io.github.demonfiddler.ee.server.PersonPage&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.PersonPage&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.PersonPage>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param filter The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param pageSort The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object persons(DataFetchingEnvironment dataFetchingEnvironment, LinkableEntityQueryFilter filter,
		PageableInput pageSort);

	/**
	 * Description for the personById field: <br/>
	 * Returns a person given its identifier. <br/>
	 * Loads the data for Query.personById. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.Person)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;io.github.demonfiddler.ee.server.Person&gt;
	 * or a Flux&lt;io.github.demonfiddler.ee.server.Person&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Person&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.Person>. This allows
	 * to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly
	 * optimize the number of requests to the server. The principle is this one: The data loader collects all the data
	 * to load, avoid to load several times the same data, and allows parallel execution of the queries, if multiple
	 * queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param id The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object personById(DataFetchingEnvironment dataFetchingEnvironment, Long id);

	/**
	 * Description for the publications field: <br/>
	 * Returns a paged list of publications. <br/>
	 * Loads the data for Query.publications. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.PublicationPage)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;io.github.demonfiddler.ee.server.PublicationPage&gt; or a
	 * Flux&lt;io.github.demonfiddler.ee.server.PublicationPage&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.PublicationPage&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.PublicationPage>.
	 * This allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param filter The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param pageSort The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object publications(DataFetchingEnvironment dataFetchingEnvironment, LinkableEntityQueryFilter filter,
		PageableInput pageSort);

	/**
	 * Description for the publicationById field: <br/>
	 * Returns a publication given its identifier. <br/>
	 * Loads the data for Query.publicationById. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.Publication)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;io.github.demonfiddler.ee.server.Publication&gt; or a
	 * Flux&lt;io.github.demonfiddler.ee.server.Publication&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Publication&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.Publication>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param id The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object publicationById(DataFetchingEnvironment dataFetchingEnvironment, Long id);

	/**
	 * Description for the publishers field: <br/>
	 * Returns a paged list of publishers. <br/>
	 * Loads the data for Query.publishers. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.PublisherPage)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;io.github.demonfiddler.ee.server.PublisherPage&gt; or a
	 * Flux&lt;io.github.demonfiddler.ee.server.PublisherPage&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.PublisherPage&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.PublisherPage>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param filter The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param pageSort The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object publishers(DataFetchingEnvironment dataFetchingEnvironment, TrackedEntityQueryFilter filter,
		PageableInput pageSort);

	/**
	 * Description for the publisherById field: <br/>
	 * Returns a publisher given its identifier. <br/>
	 * Loads the data for Query.publisherById. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.Publisher)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;io.github.demonfiddler.ee.server.Publisher&gt; or a
	 * Flux&lt;io.github.demonfiddler.ee.server.Publisher&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Publisher&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.Publisher>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param id The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object publisherById(DataFetchingEnvironment dataFetchingEnvironment, Long id);

	/**
	 * Description for the quotations field: <br/>
	 * Returns a paged list of quotations. <br/>
	 * Loads the data for Query.quotations. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.QuotationPage)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;io.github.demonfiddler.ee.server.QuotationPage&gt; or a
	 * Flux&lt;io.github.demonfiddler.ee.server.QuotationPage&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.QuotationPage&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.QuotationPage>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param filter The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param pageSort The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object quotations(DataFetchingEnvironment dataFetchingEnvironment, LinkableEntityQueryFilter filter,
		PageableInput pageSort);

	/**
	 * Description for the quotationById field: <br/>
	 * Returns a quotation given its identifier. <br/>
	 * Loads the data for Query.quotationById. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.Quotation)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;io.github.demonfiddler.ee.server.Quotation&gt; or a
	 * Flux&lt;io.github.demonfiddler.ee.server.Quotation&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Quotation&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.Quotation>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param id The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object quotationById(DataFetchingEnvironment dataFetchingEnvironment, Long id);

	/**
	 * Description for the topics field: <br/>
	 * Returns a paged list of topics or sub-topics. <br/>
	 * Loads the data for Query.topics. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.TopicPage)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;io.github.demonfiddler.ee.server.TopicPage&gt; or a
	 * Flux&lt;io.github.demonfiddler.ee.server.TopicPage&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.TopicPage&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.TopicPage>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param filter The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param pageSort The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object topics(DataFetchingEnvironment dataFetchingEnvironment, TopicQueryFilter filter, PageableInput pageSort);

	/**
	 * Description for the topicById field: <br/>
	 * Returns a topic given its identifier. <br/>
	 * Loads the data for Query.topicById. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.Topic)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;io.github.demonfiddler.ee.server.Topic&gt;
	 * or a Flux&lt;io.github.demonfiddler.ee.server.Topic&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Topic&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.Topic>. This allows
	 * to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly
	 * optimize the number of requests to the server. The principle is this one: The data loader collects all the data
	 * to load, avoid to load several times the same data, and allows parallel execution of the queries, if multiple
	 * queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param id The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object topicById(DataFetchingEnvironment dataFetchingEnvironment, Long id);

	/**
	 * Description for the users field: <br/>
	 * Returns a paged list of users. <br/>
	 * Loads the data for Query.users. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.UserPage)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a
	 * Mono&lt;io.github.demonfiddler.ee.server.UserPage&gt; or a
	 * Flux&lt;io.github.demonfiddler.ee.server.UserPage&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.UserPage&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.UserPage>. This
	 * allows to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to
	 * highly optimize the number of requests to the server. The principle is this one: The data loader collects all the
	 * data to load, avoid to load several times the same data, and allows parallel execution of the queries, if
	 * multiple queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param filter The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param pageSort The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object users(DataFetchingEnvironment dataFetchingEnvironment, TrackedEntityQueryFilter filter,
		PageableInput pageSort);

	/**
	 * Description for the userById field: <br/>
	 * Returns a user given its identifier. <br/>
	 * Loads the data for Query.userById. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.User)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;io.github.demonfiddler.ee.server.User&gt; or
	 * a Flux&lt;io.github.demonfiddler.ee.server.User&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.User&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.User>. This allows to
	 * use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize
	 * the number of requests to the server. The principle is this one: The data loader collects all the data to load,
	 * avoid to load several times the same data, and allows parallel execution of the queries, if multiple queries are
	 * to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param id The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object userById(DataFetchingEnvironment dataFetchingEnvironment, Long id);

	/**
	 * Description for the userByUsername field: <br/>
	 * Returns a user given its username. <br/>
	 * Loads the data for Query.userByUsername. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.User)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;io.github.demonfiddler.ee.server.User&gt; or
	 * a Flux&lt;io.github.demonfiddler.ee.server.User&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.User&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.User>. This allows to
	 * use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize
	 * the number of requests to the server. The principle is this one: The data loader collects all the data to load,
	 * avoid to load several times the same data, and allows parallel execution of the queries, if multiple queries are
	 * to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param username The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object userByUsername(DataFetchingEnvironment dataFetchingEnvironment, String username);

	/**
	 * Description for the currentUser field: <br/>
	 * Returns the currently logged-in user. <br/>
	 * Loads the data for Query.currentUser. It may return whatever is accepted by the Spring Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a User)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;User&gt; or a Flux&lt;User&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;User&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<User>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object currentUser(DataFetchingEnvironment dataFetchingEnvironment);

	/**
	 * Description for the groups field: <br/>
	 * Returns a paged list of groups. <br/>
	 * This method loads the data for Query.groups. It may return whatever is accepted by the Spring Controller, that
	 * is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a GroupPage)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;GroupPage&gt; or a
	 * Flux&lt;GroupPage&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;GroupPage&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<GroupPage>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param filter The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param pageSort The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	Object groups(DataFetchingEnvironment dataFetchingEnvironment, TrackedEntityQueryFilter filter,
		PageableInput pageSort);

	/**
	 * Description for the groupById field: <br/>
	 * Returns a group given its identifier. <br/>
	 * This method loads the data for Query.groupById. It may return whatever is accepted by the Spring Controller, that
	 * is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.Group)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;io.github.demonfiddler.ee.server.Group&gt;
	 * or a Flux&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.Group>. This allows
	 * to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly
	 * optimize the number of requests to the server. The principle is this one: The data loader collects all the data
	 * to load, avoid to load several times the same data, and allows parallel execution of the queries, if multiple
	 * queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param id The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	Object groupById(DataFetchingEnvironment dataFetchingEnvironment, Long id);

	/**
	 * Description for the groupByGroupname field: <br/>
	 * Returns a group given its groupname. <br/>
	 * This method loads the data for Query.groupByGroupname. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a io.github.demonfiddler.ee.server.Group)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;io.github.demonfiddler.ee.server.Group&gt;
	 * or a Flux&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;io.github.demonfiddler.ee.server.Group&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<io.github.demonfiddler.ee.server.Group>. This allows
	 * to use <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly
	 * optimize the number of requests to the server. The principle is this one: The data loader collects all the data
	 * to load, avoid to load several times the same data, and allows parallel execution of the queries, if multiple
	 * queries are to be run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param groupname The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	@GraphQLDirective(name = "@auth", parameterNames = { "authority" }, parameterTypes = { "[AuthorityKind!]" },
		parameterValues = { "[ADM]" })
	Object groupByGroupname(DataFetchingEnvironment dataFetchingEnvironment, String groupname);

	/**
	 * Description for the entityStatistics field: <br/>
	 * Returns statistics on the specified entity kinds. <br/>
	 * This method loads the data for Query.entityStatistics. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a List<EntityStatistics>)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;List<EntityStatistics>&gt; or a
	 * Flux&lt;List<EntityStatistics>&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;List<EntityStatistics>&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance
	 * CompletableFuture<List<io.github.demonfiddler.ee.server.EntityStatistics>>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param filter The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object entityStatistics(DataFetchingEnvironment dataFetchingEnvironment, StatisticsQueryFilter filter);

	/**
	 * Description for the topicStatistics field: <br/>
	 * Returns statistics on entities linked to the specified topic(s). <br/>
	 * This method loads the data for Query.topicStatistics. It may return whatever is accepted by the Spring
	 * Controller, that is:
	 * <ul>
	 * <li>A resolved value of any type (typically, a List<TopicStatistics>)</li>
	 * <li>Mono and Flux for asynchronous value(s). Supported for controller methods and for any DataFetcher as
	 * described in Reactive DataFetcher. This would typically be a Mono&lt;List<TopicStatistics>&gt; or a
	 * Flux&lt;List<TopicStatistics>&gt;</li>
	 * <li>Kotlin coroutine and Flow are adapted to Mono and Flux</li>
	 * <li>java.util.concurrent.Callable to have the value(s) produced asynchronously. For this to work,
	 * AnnotatedControllerConfigurer must be configured with an Executor. This would typically by a
	 * Callable&lt;List<TopicStatistics>&gt;</li>
	 * </ul>
	 * As a complement to the spring-graphql documentation, you may also return:
	 * <ul>
	 * <li>A CompletableFuture<?>, for instance CompletableFuture<List<TopicStatistics>>. This allows to use
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server. The principle is this one: The data loader collects all the data to load, avoid
	 * to load several times the same data, and allows parallel execution of the queries, if multiple queries are to be
	 * run.</li>
	 * <li>A Publisher (instead of a Flux), for Subscription for instance</li>
	 * </ul>
	 * @param dataFetchingEnvironment The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full
	 * GraphQL context for this DataFetcher
	 * @param filter The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL
	 * schema.
	 * @throws NoSuchElementException This method may return a {@link NoSuchElementException} exception. In this case,
	 * the exception is trapped by the calling method, and the return is consider as null. This allows to use the
	 * {@link Optional#get()} method directly, without caring of whether or not there is a value. The generated code
	 * will take care of the {@link NoSuchElementException} exception.
	 */
	Object topicStatistics(DataFetchingEnvironment dataFetchingEnvironment, StatisticsQueryFilter filter);

}
