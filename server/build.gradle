/*----------------------------------------------------------------------------------------------------------------------
 * Evidence Engine: A system for managing evidence on arbitrary scientific topics.
 * Comprises an SQL database, GraphQL public API, Java app server, Java and web clients.
 * Copyright Â© 2024 Adrian Price. All rights reserved.
 *
 * This file is part of Evidence Engine.
 *
 * Evidence Engine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Evidence Engine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Evidence Engine.
 * If not, see <https://www.gnu.org/licenses/>. 
 *--------------------------------------------------------------------------------------------------------------------*/

plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${dependencyManagementPluginVersion}"
	// id "com.graphql-java-generator.graphql-gradle-plugin3" version "${graphQLPluginVersion}"
	// id "com.netflix.dgs.codegen" version "6.3.0"
	id 'org.asciidoctor.jvm.convert' version "${asciidoctorJvmConvertVersion}"
}

group = 'io.github.demonfiddler.evidence-engine'
version = '0.0.1-SNAPSHOT'

// dependencyManagement {
// 	imports {
// 		mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
// 	}
// }

dependencies {
	implementation project(':common')
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
//	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation "org.springframework.boot:spring-boot-starter-websocket"  // used for subscriptions
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
//	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-jersey'
	implementation 'org.springframework.boot:spring-boot-starter-security'
//	implementation 'org.springframework.hateoas:spring-hateoas' // Necessary when hateoas used with webflux
//	implementation 'de.codecentric:spring-boot-admin-starter-server'
	implementation 'org.springframework.session:spring-session-core'
//	implementation 'com.graphql-java-generator:graphql-java-common-dependencies:${graphQLPluginVersion}'
//	implementation 'com.graphql-java-generator:graphql-java-server-dependencies:${graphQLPluginVersion}' // added per graphql-java-generator example
//	implementation 'com.graphql-java-generator:graphql-java-dependencies' // only if copyRuntimeSources = true
	implementation "com.graphql-java-generator:graphql-java-server-runtime:${graphQLPluginVersion}" // only if copyRuntimeSources = false
	implementation 'com.graphql-java:graphql-java-extended-scalars:22.0'
//	implementation 'com.github.dozermapper:dozer-core:6.5.2' // used in graphql-java-generator example
//  implementation 'io.reactivex.rxjava2:rxjava:2.2.19' // used in graphql-java-generator example
//	implementation 'commons-logging:commons-logging'
	implementation 'org.apache.commons:commons-collections4:4.5.0-M2'
	implementation 'org.apache.commons:commons-lang3:3.17.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.graphql-java-kickstart:graphiql-spring-boot-starter:6.0.1' // added per graphql-java-generator example
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	// H2 is only required for running in integration test target server mode
	runtimeOnly 'com.h2database:h2:2.3.232'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework:spring-webflux'
	testImplementation 'org.springframework.graphql:spring-graphql-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
	sourceCompatibility = JavaVersion.VERSION_21
}

compileJava {
    options.compilerArgs.add("-g")
    options.compilerArgs.add("-parameters")
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

repositories {
	mavenLocal()
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springBootAdminVersion', "3.3.4")
}

import org.springframework.boot.gradle.tasks.run.BootRun
tasks.register('bootIntegrationTestServer', BootRun) {
	dependsOn 'classes'
	group = 'application'
	description = 'Launch the integration test target server in the foreground'
    classpath = sourceSets.main.runtimeClasspath
	mainClass = 'io.github.demonfiddler.ee.server.EvidenceEngineServer'
	args(['--spring.profiles.active=integration-test'])
	setIgnoreExitValue(true)
}

tasks.register('bootIntegrationTestServerBG') {
	dependsOn 'classes'
    group = 'application'
	description = 'Launch the integration test target server in the background'
    def classpath = project.sourceSets.main.runtimeClasspath.asPath
    doLast {
        println 'Launching server...'
		// For now, use the same Java installation as Gradle
        String javaHome = System.getProperty('java.home')
        File javaFile = new File(new File(new File(javaHome), 'bin'), 'java.exe')
        String javaExe = javaFile.getCanonicalPath()
		File build = new File(new File('server'), 'build')
		build.mkdirs()
        new ProcessBuilder()
            .command(javaExe, '-cp', classpath, 'io.github.demonfiddler.ee.server.EvidenceEngineServer',
				'--spring.profiles.active=integration-test')
            .redirectOutput(new File(build, 'server.log'))
            .redirectError(new File(build, 'server-error.log'))
            .start()
        println 'bootIntegrationTestServerInBackground task finished'
    }
    finalizedBy 'waitForIntegrationTestServer'
}

tasks.register('waitForIntegrationTestServer', Exec) {
	group = 'application'
	description = 'Wait for the integration test server to be fully operational'
	// TODO: test STDOUT for '{"status":"UP"}'
	commandLine 'curl', '--retry', '10', '--retry-delay', '5', '--retry-connrefused', 'http://localhost:8080/actuator/health'
	standardOutput = new ByteArrayOutputStream()
	ext.output = {
		return standardOutput.toString()
	}
	doFirst {
		println 'Waiting for test server...'
	}
	doLast {
		println 'Test server initialised'
	}
}

tasks.register('terminateIntegrationTestServer', Exec) {
	group = 'application'
	description = 'Terminate the integration test server'
	// TODO: test STDOUT for '{"message":"Shutting down, bye..."}'
	commandLine 'curl', '-X', 'POST', 'http://localhost:8080/actuator/shutdown'
	standardOutput = new ByteArrayOutputStream()
	ext.output = {
		return standardOutput.toString()
	}
	setIgnoreExitValue(true)
}

// Uncomment to enable GraphQL server code generation (NOTE: the generated code has been heavily modified).
//evaluate(new File("codegen.gradle"))
