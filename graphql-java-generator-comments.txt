Complaints about graphql-java-generator
=======================================

Documentation
-------------
- The Gradle examples are confusing as they refer to Maven stuff.
- Also the description for the jsonGraphqlSchemaFilename parameter is blank. Not sure why client code generation needs a useJakartaEE9 parameter.
- The Javadoc for @GraphQLScalar contains the words "type erasure shit". The use of such language in technical documentation is inappropriate and unprofessional.

Code Generation
---------------
- generateClientCode does not support the javaTypeForIDType parameter, so client-side IDs are always String even if the schema and server-side has them as Long.
- Generated code is messy and poorly formatted, indentation is all over the place.
- Generated code does not make appropriate use of class and interface inheritance.
- Class modifiers incorrectly ordered (e.g. static public). The JLS mandates a specific ordering: Annotation public protected private
static final transient volatile
- Not possible to customise generated annotations (can add but no longer possible to edit).
- Generated code is not designed to be edited.
- Cannot inherit GraphQL-annotated members.
- Generated code contains a public no-args constructor, which is unnecessary since the JLS requires compilers to emit such a constructor by default.
- Empty constructors contain a pointless "// No action" comment.
- Unnecessary fully-qualified references to java.lang.* classes, which are implicitly imported according to the JLS.
- Generated interface members redundantly marked as public, but they are of course implicitly public according to the JLS.
- Generated controller classes contain duplicated constructor code that could easily be implemented in a common, generic base class.
- Generated controller methods for accessing multivalued fields have incorrect signatures, e.g. returns Map<KeyType, FieldType> instead of the correct Map<KeyType, List<FieldType>> return type.
- Generated DataFetchersDelegate interfaces do not inherit the methods of the GraphQL interfaces they implement, but instead duplicate those methods.
- Generated default List<T> DataFetchersDelegateXxx.batchLoader(List<Long> keys, BatchLoaderEnvironment environment) interfaces: Javadoc "@return A list of IDs" is incorrect - it returns a list of entities.
- Multiple unused imports, errors suppressed with @SuppressWarnings("unused") annotations, which causes other compiler warnings about suppressed warnings.
- GraphQL interfaces that implement other interfaces: the generated Java sub-interfaces duplicate methods they already inherit!
- Many instances of fully-qualified class names used in member signatures (even for classes generated to the same package!). Should always use imports where necessary.
- Enum constructors placed at the end of the compilation unit.
- Javadoc contains invalid HTML markup, e.g., "<li>A CompletableFuture<?>, for instance CompletableFuture<Claim>". The generic type argument "<Claim>" should be encoded as "&lt;Claim%gt;"
- Javadoc fails to enclose type names and literal values in {@code Xxx} tags; e.g. "Claim" should be "{@code Claim}", "true" should be "{@code true}".
- Javadoc contains unresolved parameter references from Velocity templates, e.g. ${dataFetcher.graphQLType}, ${dataFetcherDelegate.type.classSimpleName}, ${dataFetcher.batchMappingReturnType.value}, ${dataFetcher.field.name}.
- Javadoc contains absurd garbage such as: @param origin The object from which the field is fetch. In other word: the aim of this data fetcher is to fetch the kind attribute of the origin, which is an instance of {ObjectType {name:Publication, fields:{Field{name:id, type:ID!, params:[]},Field{name:status, type:String, params:[format:FormatKind]},Field{name:created, type:DateTime, params:[]},Field{name:createdByUser, type:User, params:[]},Field{name:updated, type:DateTime, params:[]},Field{name:updatedByUser, type:User, params:[]},Field{name:log, type:LogPage!, params:[filter:LogQueryFilter,pageSort:PageableInput]},Field{name:topicRefs, type:TopicRefPage!, params:[filter:TopicRefQueryFilter,pageSort:PageableInput]},Field{name:title, type:String, params:[]},Field{name:authors, type:String, params:[]},Field{name:journal, type:Journal, params:[]},Field{name:kind, type:String, params:[format:FormatKind]},Field{name:location, type:String, params:[]},Field{name:date, type:Date, params:[]},Field{name:year, type:Int, params:[]},Field{name:abstract, type:String, params:[]},Field{name:notes, type:String, params:[]},Field{name:peerReviewed, type:Boolean, params:[]},Field{name:doi, type:String, params:[]},Field{name:url, type:URL, params:[]},Field{name:issnIsbn, type:String, params:[]},Field{name:accessed, type:Date, params:[]}}, implements IBaseEntity,ITrackedEntity,ITopicalEntity, comments ""}.
- Javadoc for GraphQLPluginAutoConfiguration contains an incorrect HTML entity: &amp;Primary when it should be @Primary.
- Javadoc contains {@link xxx} to unqualified class names (e.g. Date) that aren't imported. This triggers confusing queries when organising imports.
- Multiple violations of official Javadoc format guidelines, especially around 'first sentence rollup'.
- Javadoc is littered with spelling mistakes.
- Inaccurate translation of GraphQL inline Common Markdown documentation to Javadoc (e.g., ```xxx``` should be translated to {@code xxx} but isn't).
- The generateServerCode Gradle task has a useJakartaEE9 flag, which causes the generated classes corresponding to GraphQL types to be annotated with @Entity. However, this scheme involves the assumption that every such type necessarily corresponds to a database entity. There are valid use cases where this assumption is invalid, and in these the @Entity annotation distorts the semantics of the type. For example, every @Entity class requires a primary key field annotated with @Id, which forces you to declare a dummy ID field in the GraphQL type. There needs to be a way to tell the code generator that a type has (or maybe does not have) a corresponding database entity (and therefore to include/omit) the @Entity annotation. This could have been easily accomplished by using an entityPersonalization.deleteAnnotation property in personalization.json file, but unfortunately this capability has been removed on the spurious grounds that people were breaking the generated code by using it. Surely it's a case of 'caveat emptor' - if someone doesn't understand what they are doing, that's their fault not the tools? It doesn't make sense to sacrifice an essential feature purely to stop idiots misusing it and thereby penalise the competent!

Runtime
-------
- GraphQL annotations on inherited members are not detected, so it's impossible to optimise similar generated classes by extending an abstract base class supplying the common functionality. To fix this I had to extend GraphQLClientUtils.getDeclaredField() to check superclasses where necessary, further modify the generated sources and programmatically update the static GraphqlClientUtils.graphqlClientUtils and InputParameter.graphqlClientUtils fields.
- Spelling errors in log and message strings. (e.g. "Could not find fied '...' in ...")
- com.graphql_java_generator.client.request.InputParameter.getStringContentForAnInputTypeValue() line 1113 only checks the declared fields on the input's class, not any of its superclasses, thus ignoring any inherited fields.

